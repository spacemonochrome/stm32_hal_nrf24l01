
nrf24L01_F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000793c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007a50  08007a50  00008a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e9c  08007e9c  000091fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e9c  08007e9c  00008e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ea4  08007ea4  000091fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea4  08007ea4  00008ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ea8  08007ea8  00008ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08007eac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001fc  080080a8  000091fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080080a8  000093c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006531  00000000  00000000  00009225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d0  00000000  00000000  0000f756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00010f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000603  00000000  00000000  00011750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ecf  00000000  00000000  00011d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008670  00000000  00000000  00029c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c51  00000000  00000000  00032292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  000b5f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000b93c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a34 	.word	0x08007a34

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08007a34 	.word	0x08007a34

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <csn_high+0x14>)
 8000bde:	f001 fa21 	bl	8002024 <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010800 	.word	0x40010800

08000bec <csn_low>:

void csn_low(void){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <csn_low+0x14>)
 8000bf6:	f001 fa15 	bl	8002024 <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010800 	.word	0x40010800

08000c04 <ce_high>:

void ce_high(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <ce_high+0x14>)
 8000c0e:	f001 fa09 	bl	8002024 <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40010800 	.word	0x40010800

08000c1c <ce_low>:

void ce_low(void){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2108      	movs	r1, #8
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <ce_low+0x14>)
 8000c26:	f001 f9fd 	bl	8002024 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010800 	.word	0x40010800

08000c34 <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f043 0320 	orr.w	r3, r3, #32
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000c4e:	f7ff ffcd 	bl	8000bec <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000c52:	f107 010f 	add.w	r1, r7, #15
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <nrf24_w_reg+0x4c>)
 8000c5e:	f001 fe7d 	bl	800295c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8000c62:	79bb      	ldrb	r3, [r7, #6]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <nrf24_w_reg+0x4c>)
 8000c6e:	f001 fe75 	bl	800295c <HAL_SPI_Transmit>

	csn_high();
 8000c72:	f7ff ffaf 	bl	8000bd4 <csn_high>
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000218 	.word	0x20000218

08000c84 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	71fb      	strb	r3, [r7, #7]
 8000c90:	4613      	mov	r3, r2
 8000c92:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000c9c:	f7ff ffa6 	bl	8000bec <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000ca0:	f107 010f 	add.w	r1, r7, #15
 8000ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <nrf24_r_reg+0x4c>)
 8000cac:	f001 fe56 	bl	800295c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	f107 010e 	add.w	r1, r7, #14
 8000cb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <nrf24_r_reg+0x4c>)
 8000cbe:	f001 ff91 	bl	8002be4 <HAL_SPI_Receive>

	csn_high();
 8000cc2:	f7ff ff87 	bl	8000bd4 <csn_high>

	return data;
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000218 	.word	0x20000218

08000cd4 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000cde:	1df9      	adds	r1, r7, #7
 8000ce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <nrf24_w_spec_cmd+0x20>)
 8000ce8:	f001 fe38 	bl	800295c <HAL_SPI_Transmit>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000218 	.word	0x20000218

08000cf8 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8000d02:	2101      	movs	r1, #1
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ffbd 	bl	8000c84 <nrf24_r_reg>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff ff88 	bl	8000c34 <nrf24_w_reg>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f7ff ffa1 	bl	8000c84 <nrf24_r_reg>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000d64:	f107 030f 	add.w	r3, r7, #15
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2006      	movs	r0, #6
 8000d6e:	f7ff ff61 	bl	8000c34 <nrf24_w_reg>
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f7ff ff7a 	bl	8000c84 <nrf24_r_reg>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d105      	bne.n	8000db0 <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e007      	b.n	8000dc0 <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d104      	bne.n	8000dc0 <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000dc0:	f107 030f 	add.w	r3, r7, #15
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	2006      	movs	r0, #6
 8000dca:	f7ff ff33 	bl	8000c34 <nrf24_w_reg>
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 8000de0:	1dfb      	adds	r3, r7, #7
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	2005      	movs	r0, #5
 8000de8:	f7ff ff24 	bl	8000c34 <nrf24_w_reg>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2010      	movs	r0, #16
 8000e02:	f7ff ff17 	bl	8000c34 <nrf24_w_reg>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	2b20      	cmp	r3, #32
 8000e24:	d901      	bls.n	8000e2a <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8000e26:	2320      	movs	r3, #32
 8000e28:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d839      	bhi.n	8000ea4 <nrf24_pipe_pld_size+0x94>
 8000e30:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <nrf24_pipe_pld_size+0x28>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e51 	.word	0x08000e51
 8000e3c:	08000e5f 	.word	0x08000e5f
 8000e40:	08000e6d 	.word	0x08000e6d
 8000e44:	08000e7b 	.word	0x08000e7b
 8000e48:	08000e89 	.word	0x08000e89
 8000e4c:	08000e97 	.word	0x08000e97
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	2201      	movs	r2, #1
 8000e54:	4619      	mov	r1, r3
 8000e56:	2011      	movs	r0, #17
 8000e58:	f7ff feec 	bl	8000c34 <nrf24_w_reg>

		break;
 8000e5c:	e022      	b.n	8000ea4 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 8000e5e:	1dbb      	adds	r3, r7, #6
 8000e60:	2201      	movs	r2, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	2012      	movs	r0, #18
 8000e66:	f7ff fee5 	bl	8000c34 <nrf24_w_reg>

		break;
 8000e6a:	e01b      	b.n	8000ea4 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	2013      	movs	r0, #19
 8000e74:	f7ff fede 	bl	8000c34 <nrf24_w_reg>

		break;
 8000e78:	e014      	b.n	8000ea4 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000e7a:	1dbb      	adds	r3, r7, #6
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4619      	mov	r1, r3
 8000e80:	2014      	movs	r0, #20
 8000e82:	f7ff fed7 	bl	8000c34 <nrf24_w_reg>

		break;
 8000e86:	e00d      	b.n	8000ea4 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000e88:	1dbb      	adds	r3, r7, #6
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2015      	movs	r0, #21
 8000e90:	f7ff fed0 	bl	8000c34 <nrf24_w_reg>

		break;
 8000e94:	e006      	b.n	8000ea4 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000e96:	1dbb      	adds	r3, r7, #6
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2016      	movs	r0, #22
 8000e9e:	f7ff fec9 	bl	8000c34 <nrf24_w_reg>

		break;
 8000ea2:	bf00      	nop
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fee0 	bl	8000c84 <nrf24_r_reg>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d850      	bhi.n	8000f70 <nrf24_open_rx_pipe+0xc4>
 8000ece:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed4 <nrf24_open_rx_pipe+0x28>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000eed 	.word	0x08000eed
 8000ed8:	08000f03 	.word	0x08000f03
 8000edc:	08000f19 	.word	0x08000f19
 8000ee0:	08000f2f 	.word	0x08000f2f
 8000ee4:	08000f45 	.word	0x08000f45
 8000ee8:	08000f5b 	.word	0x08000f5b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 8000eec:	2205      	movs	r2, #5
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f7ff fe9f 	bl	8000c34 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	73fb      	strb	r3, [r7, #15]
		break;
 8000f00:	e036      	b.n	8000f70 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000f02:	2205      	movs	r2, #5
 8000f04:	6839      	ldr	r1, [r7, #0]
 8000f06:	200b      	movs	r0, #11
 8000f08:	f7ff fe94 	bl	8000c34 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	73fb      	strb	r3, [r7, #15]
		break;
 8000f16:	e02b      	b.n	8000f70 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	200c      	movs	r0, #12
 8000f1e:	f7ff fe89 	bl	8000c34 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f2c:	e020      	b.n	8000f70 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	200d      	movs	r0, #13
 8000f34:	f7ff fe7e 	bl	8000c34 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	73fb      	strb	r3, [r7, #15]
		break;
 8000f42:	e015      	b.n	8000f70 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	200e      	movs	r0, #14
 8000f4a:	f7ff fe73 	bl	8000c34 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	73fb      	strb	r3, [r7, #15]
		break;
 8000f58:	e00a      	b.n	8000f70 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f7ff fe68 	bl	8000c34 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f6e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000f70:	f107 030f 	add.w	r3, r7, #15
 8000f74:	2201      	movs	r2, #1
 8000f76:	4619      	mov	r1, r3
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff fe5b 	bl	8000c34 <nrf24_w_reg>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop

08000f88 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460a      	mov	r2, r1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	4613      	mov	r3, r2
 8000f96:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fe72 	bl	8000c84 <nrf24_r_reg>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	f023 030c 	bic.w	r3, r3, #12
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 8000fce:	f107 030f 	add.w	r3, r7, #15
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fe2c 	bl	8000c34 <nrf24_w_reg>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	3b02      	subs	r3, #2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f7ff fe19 	bl	8000c34 <nrf24_w_reg>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
	csn_low();
 800100e:	f7ff fded 	bl	8000bec <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8001012:	20e1      	movs	r0, #225	@ 0xe1
 8001014:	f7ff fe5e 	bl	8000cd4 <nrf24_w_spec_cmd>
	csn_high();
 8001018:	f7ff fddc 	bl	8000bd4 <csn_high>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	csn_low();
 8001024:	f7ff fde2 	bl	8000bec <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8001028:	20e2      	movs	r0, #226	@ 0xe2
 800102a:	f7ff fe53 	bl	8000cd4 <nrf24_w_spec_cmd>
	csn_high();
 800102e:	f7ff fdd1 	bl	8000bd4 <csn_high>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8001042:	23ff      	movs	r3, #255	@ 0xff
 8001044:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8001046:	f7ff fdd1 	bl	8000bec <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	1db9      	adds	r1, r7, #6
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	4805      	ldr	r0, [pc, #20]	@ (800106c <nrf24_r_status+0x34>)
 8001058:	f001 fedd 	bl	8002e16 <HAL_SPI_TransmitReceive>
	csn_high();
 800105c:	f7ff fdba 	bl	8000bd4 <csn_high>

	return data;
 8001060:	79fb      	ldrb	r3, [r7, #7]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000218 	.word	0x20000218

08001070 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800107a:	f7ff ffdd 	bl	8001038 <nrf24_r_status>
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001088:	b2db      	uxtb	r3, r3
 800108a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	2201      	movs	r2, #1
 8001090:	4619      	mov	r1, r3
 8001092:	2007      	movs	r0, #7
 8001094:	f7ff fdce 	bl	8000c34 <nrf24_w_reg>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80010aa:	f7ff ffc5 	bl	8001038 <nrf24_r_status>
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	2201      	movs	r2, #1
 80010c0:	4619      	mov	r1, r3
 80010c2:	2007      	movs	r0, #7
 80010c4:	f7ff fdb6 	bl	8000c34 <nrf24_w_reg>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80010da:	f7ff ffad 	bl	8001038 <nrf24_r_status>
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	2201      	movs	r2, #1
 80010f0:	4619      	mov	r1, r3
 80010f2:	2007      	movs	r0, #7
 80010f4:	f7ff fd9e 	bl	8000c34 <nrf24_w_reg>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800110a:	2101      	movs	r1, #1
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fdb9 	bl	8000c84 <nrf24_r_reg>
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fd84 	bl	8000c34 <nrf24_w_reg>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800113e:	2101      	movs	r1, #1
 8001140:	201d      	movs	r0, #29
 8001142:	f7ff fd9f 	bl	8000c84 <nrf24_r_reg>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d105      	bne.n	800115c <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e004      	b.n	8001166 <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	f023 0304 	bic.w	r3, r3, #4
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8001166:	f107 030f 	add.w	r3, r7, #15
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	201d      	movs	r0, #29
 8001170:	f7ff fd60 	bl	8000c34 <nrf24_w_reg>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 800118c:	2101      	movs	r1, #1
 800118e:	201c      	movs	r0, #28
 8001190:	f7ff fd78 	bl	8000c84 <nrf24_r_reg>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b05      	cmp	r3, #5
 800119c:	d901      	bls.n	80011a2 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 800119e:	2305      	movs	r3, #5
 80011a0:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2201      	movs	r2, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	e00c      	b.n	80011da <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2201      	movs	r2, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	4013      	ands	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80011da:	f107 030f 	add.w	r3, r7, #15
 80011de:	2201      	movs	r2, #1
 80011e0:	4619      	mov	r1, r3
 80011e2:	201c      	movs	r0, #28
 80011e4:	f7ff fd26 	bl	8000c34 <nrf24_w_reg>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 80011fa:	2101      	movs	r1, #1
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff fd41 	bl	8000c84 <nrf24_r_reg>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 800120c:	233f      	movs	r3, #63	@ 0x3f
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e001      	b.n	8001216 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8001216:	f107 030f 	add.w	r3, r7, #15
 800121a:	2201      	movs	r2, #1
 800121c:	4619      	mov	r1, r3
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff fd08 	bl	8000c34 <nrf24_w_reg>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8001236:	2101      	movs	r1, #1
 8001238:	201d      	movs	r0, #29
 800123a:	f7ff fd23 	bl	8000c84 <nrf24_r_reg>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]

	if(en){
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e004      	b.n	800125e <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f023 0302 	bic.w	r3, r3, #2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800125e:	f107 030f 	add.w	r3, r7, #15
 8001262:	2201      	movs	r2, #1
 8001264:	4619      	mov	r1, r3
 8001266:	201d      	movs	r0, #29
 8001268:	f7ff fce4 	bl	8000c34 <nrf24_w_reg>
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <nrf24_auto_retr_delay>:
	}

	nrf24_w_reg(FEATURE, &feature, 1);
}

void nrf24_auto_retr_delay(uint8_t delay){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800127e:	2101      	movs	r1, #1
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff fcff 	bl	8000c84 <nrf24_r_reg>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	b2db      	uxtb	r3, r3
 8001292:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	b25a      	sxtb	r2, r3
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80012a8:	f107 030f 	add.w	r3, r7, #15
 80012ac:	2201      	movs	r2, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	2004      	movs	r0, #4
 80012b2:	f7ff fcbf 	bl	8000c34 <nrf24_w_reg>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 80012c8:	2101      	movs	r1, #1
 80012ca:	2004      	movs	r0, #4
 80012cc:	f7ff fcda 	bl	8000c84 <nrf24_r_reg>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f023 030f 	bic.w	r3, r3, #15
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80012de:	7bfa      	ldrb	r2, [r7, #15]
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80012e8:	f107 030f 	add.w	r3, r7, #15
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	2004      	movs	r0, #4
 80012f2:	f7ff fc9f 	bl	8000c34 <nrf24_w_reg>
}
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <nrf24_type_to_uint8_t>:

void nrf24_type_to_uint8_t(size_t in, uint8_t* out, uint16_t size){
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	4613      	mov	r3, r2
 800130a:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < size; i++){
 800130c:	2300      	movs	r3, #0
 800130e:	82fb      	strh	r3, [r7, #22]
 8001310:	e013      	b.n	800133a <nrf24_type_to_uint8_t+0x3c>
		out[i] = (((in & (255 << (i*8)))) >> (i*8));
 8001312:	8afb      	ldrh	r3, [r7, #22]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	22ff      	movs	r2, #255	@ 0xff
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	401a      	ands	r2, r3
 8001322:	8afb      	ldrh	r3, [r7, #22]
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	fa22 f103 	lsr.w	r1, r2, r3
 800132a:	8afb      	ldrh	r3, [r7, #22]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	4413      	add	r3, r2
 8001330:	b2ca      	uxtb	r2, r1
 8001332:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < size; i++){
 8001334:	8afb      	ldrh	r3, [r7, #22]
 8001336:	3301      	adds	r3, #1
 8001338:	82fb      	strh	r3, [r7, #22]
 800133a:	8afa      	ldrh	r2, [r7, #22]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3e7      	bcc.n	8001312 <nrf24_type_to_uint8_t+0x14>
	}
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
	...

08001350 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]

	ce_low();
 800135c:	f7ff fc5e 	bl	8000c1c <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 8001360:	23a0      	movs	r3, #160	@ 0xa0
 8001362:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8001364:	f7ff fc42 	bl	8000bec <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8001368:	f107 010f 	add.w	r1, r7, #15
 800136c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001370:	2201      	movs	r2, #1
 8001372:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <nrf24_transmit+0x70>)
 8001374:	f001 faf2 	bl	800295c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	b29a      	uxth	r2, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <nrf24_transmit+0x70>)
 8001384:	f001 faea 	bl	800295c <HAL_SPI_Transmit>
	csn_high();
 8001388:	f7ff fc24 	bl	8000bd4 <csn_high>

	ce_high();
 800138c:	f7ff fc3a 	bl	8000c04 <ce_high>
	HAL_Delay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f000 fb91 	bl	8001ab8 <HAL_Delay>
	ce_low();
 8001396:	f7ff fc41 	bl	8000c1c <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800139a:	f7ff fe4d 	bl	8001038 <nrf24_r_status>
 800139e:	4603      	mov	r3, r0
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 80013a8:	f7ff fe92 	bl	80010d0 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 80013ac:	f7ff fe2d 	bl	800100a <nrf24_flush_tx>
		return 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <nrf24_transmit+0x66>
	}

	return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000218 	.word	0x20000218

080013c4 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80013c8:	f7ff fc96 	bl	8000cf8 <nrf24_pwr_up>

	nrf24_flush_tx();
 80013cc:	f7ff fe1d 	bl	800100a <nrf24_flush_tx>
	nrf24_flush_rx();
 80013d0:	f7ff fe26 	bl	8001020 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80013d4:	f7ff fe4c 	bl	8001070 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80013d8:	f7ff fe62 	bl	80010a0 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 80013dc:	f7ff fe78 	bl	80010d0 <nrf24_clear_max_rt>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f000 fb03 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f86d 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f000 f8e7 	bl	80015c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013f6:	f000 f8af 	bl	8001558 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  csn_high();
 80013fa:	f7ff fbeb 	bl	8000bd4 <csn_high>
    ce_high();
 80013fe:	f7ff fc01 	bl	8000c04 <ce_high>

    HAL_Delay(5);
 8001402:	2005      	movs	r0, #5
 8001404:	f000 fb58 	bl	8001ab8 <HAL_Delay>

    ce_low();
 8001408:	f7ff fc08 	bl	8000c1c <ce_low>

    nrf24_init();
 800140c:	f7ff ffda 	bl	80013c4 <nrf24_init>

    nrf24_stop_listen();
 8001410:	f7ff fe76 	bl	8001100 <nrf24_stop_listen>

    nrf24_auto_ack_all(auto_ack);
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff feeb 	bl	80011f0 <nrf24_auto_ack_all>
    nrf24_en_ack_pld(disable);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff06 	bl	800122c <nrf24_en_ack_pld>
    nrf24_dpl(disable);
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fe87 	bl	8001134 <nrf24_dpl>

    nrf24_set_crc(no_crc, _1byte);
 8001426:	2100      	movs	r1, #0
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fdad 	bl	8000f88 <nrf24_set_crc>

    nrf24_tx_pwr(_0dbm);
 800142e:	2003      	movs	r0, #3
 8001430:	f7ff fc7c 	bl	8000d2c <nrf24_tx_pwr>
    nrf24_data_rate(_1mbps);
 8001434:	2000      	movs	r0, #0
 8001436:	f7ff fca0 	bl	8000d7a <nrf24_data_rate>
    nrf24_set_channel(90);
 800143a:	205a      	movs	r0, #90	@ 0x5a
 800143c:	f7ff fccb 	bl	8000dd6 <nrf24_set_channel>
    nrf24_set_addr_width(5);
 8001440:	2005      	movs	r0, #5
 8001442:	f7ff fdcf 	bl	8000fe4 <nrf24_set_addr_width>

    nrf24_set_rx_dpl(0, disable);
 8001446:	2100      	movs	r1, #0
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fe97 	bl	800117c <nrf24_set_rx_dpl>
    nrf24_set_rx_dpl(1, disable);
 800144e:	2100      	movs	r1, #0
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff fe93 	bl	800117c <nrf24_set_rx_dpl>
    nrf24_set_rx_dpl(2, disable);
 8001456:	2100      	movs	r1, #0
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff fe8f 	bl	800117c <nrf24_set_rx_dpl>
    nrf24_set_rx_dpl(3, disable);
 800145e:	2100      	movs	r1, #0
 8001460:	2003      	movs	r0, #3
 8001462:	f7ff fe8b 	bl	800117c <nrf24_set_rx_dpl>
    nrf24_set_rx_dpl(4, disable);
 8001466:	2100      	movs	r1, #0
 8001468:	2004      	movs	r0, #4
 800146a:	f7ff fe87 	bl	800117c <nrf24_set_rx_dpl>
    nrf24_set_rx_dpl(5, disable);
 800146e:	2100      	movs	r1, #0
 8001470:	2005      	movs	r0, #5
 8001472:	f7ff fe83 	bl	800117c <nrf24_set_rx_dpl>

    nrf24_pipe_pld_size(0, PLD_S);
 8001476:	2120      	movs	r1, #32
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fcc9 	bl	8000e10 <nrf24_pipe_pld_size>

    nrf24_auto_retr_delay(4);
 800147e:	2004      	movs	r0, #4
 8001480:	f7ff fef8 	bl	8001274 <nrf24_auto_retr_delay>
    nrf24_auto_retr_limit(10);
 8001484:	200a      	movs	r0, #10
 8001486:	f7ff ff1a 	bl	80012be <nrf24_auto_retr_limit>

    nrf24_open_tx_pipe(tx_addr);
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <main+0xdc>)
 800148c:	f7ff fcb2 	bl	8000df4 <nrf24_open_tx_pipe>
    nrf24_open_rx_pipe(0, tx_addr);
 8001490:	490b      	ldr	r1, [pc, #44]	@ (80014c0 <main+0xdc>)
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fd0a 	bl	8000eac <nrf24_open_rx_pipe>
    ce_high();
 8001498:	f7ff fbb4 	bl	8000c04 <ce_high>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	    nrf24_type_to_uint8_t(data, dataT, sizeof(data));
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <main+0xe0>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	4909      	ldr	r1, [pc, #36]	@ (80014c8 <main+0xe4>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff2a 	bl	80012fe <nrf24_type_to_uint8_t>

	    uint8_t val = nrf24_transmit(dataT, sizeof(dataT));
 80014aa:	2120      	movs	r1, #32
 80014ac:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <main+0xe4>)
 80014ae:	f7ff ff4f 	bl	8001350 <nrf24_transmit>
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]

		HAL_Delay(100);
 80014b6:	2064      	movs	r0, #100	@ 0x64
 80014b8:	f000 fafe 	bl	8001ab8 <HAL_Delay>
  {
 80014bc:	bf00      	nop
 80014be:	e7ed      	b.n	800149c <main+0xb8>
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000270 	.word	0x20000270
 80014c8:	20000008 	.word	0x20000008

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b090      	sub	sp, #64	@ 0x40
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	2228      	movs	r2, #40	@ 0x28
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fedb 	bl	8004296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001500:	2302      	movs	r3, #2
 8001502:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001504:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001508:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800150a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fdbf 	bl	8002098 <HAL_RCC_OscConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001520:	f000 f8c6 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001524:	230f      	movs	r3, #15
 8001526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2102      	movs	r1, #2
 800153e:	4618      	mov	r0, r3
 8001540:	f001 f82c 	bl	800259c <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800154a:	f000 f8b1 	bl	80016b0 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3740      	adds	r7, #64	@ 0x40
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_SPI1_Init+0x64>)
 800155e:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <MX_SPI1_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001564:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_SPI1_Init+0x64>)
 800158c:	2220      	movs	r2, #32
 800158e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_SPI1_Init+0x64>)
 80015a4:	220a      	movs	r2, #10
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_SPI1_Init+0x64>)
 80015aa:	f001 f953 	bl	8002854 <HAL_SPI_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f000 f87c 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000218 	.word	0x20000218
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a2a      	ldr	r2, [pc, #168]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 80015f6:	f043 0320 	orr.w	r3, r3, #32
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a24      	ldr	r2, [pc, #144]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <MX_GPIO_Init+0xdc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001626:	481f      	ldr	r0, [pc, #124]	@ (80016a4 <MX_GPIO_Init+0xe0>)
 8001628:	f000 fcfc 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2118      	movs	r1, #24
 8001630:	481d      	ldr	r0, [pc, #116]	@ (80016a8 <MX_GPIO_Init+0xe4>)
 8001632:	f000 fcf7 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001636:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2302      	movs	r3, #2
 8001646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_GPIO_Init+0xe0>)
 8001650:	f000 fb64 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001654:	2304      	movs	r3, #4
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_GPIO_Init+0xe8>)
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <MX_GPIO_Init+0xe4>)
 8001668:	f000 fb58 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800166c:	2318      	movs	r3, #24
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2302      	movs	r3, #2
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <MX_GPIO_Init+0xe4>)
 8001684:	f000 fb4a 	bl	8001d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2008      	movs	r0, #8
 800168e:	f000 fb0e 	bl	8001cae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001692:	2008      	movs	r0, #8
 8001694:	f000 fb27 	bl	8001ce6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40011000 	.word	0x40011000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	10210000 	.word	0x10210000

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <Error_Handler+0x8>

080016bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_MspInit+0x5c>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <HAL_MspInit+0x5c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6193      	str	r3, [r2, #24]
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_MspInit+0x5c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <HAL_MspInit+0x5c>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <HAL_MspInit+0x5c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_MspInit+0x5c>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_MspInit+0x60>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_MspInit+0x60>)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000

08001720 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1b      	ldr	r2, [pc, #108]	@ (80017a8 <HAL_SPI_MspInit+0x88>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d12f      	bne.n	80017a0 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_SPI_MspInit+0x8c>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_SPI_MspInit+0x8c>)
 8001746:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_SPI_MspInit+0x8c>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_SPI_MspInit+0x8c>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a13      	ldr	r2, [pc, #76]	@ (80017ac <HAL_SPI_MspInit+0x8c>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_SPI_MspInit+0x8c>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001770:	23a0      	movs	r3, #160	@ 0xa0
 8001772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <HAL_SPI_MspInit+0x90>)
 8001784:	f000 faca 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001788:	2340      	movs	r3, #64	@ 0x40
 800178a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <HAL_SPI_MspInit+0x90>)
 800179c:	f000 fabe 	bl	8001d1c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010800 	.word	0x40010800

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f93c 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001810:	2004      	movs	r0, #4
 8001812:	f000 fc1f 	bl	8002054 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}

0800181a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  return 1;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <_kill>:

int _kill(int pid, int sig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001832:	f002 fd83 	bl	800433c <__errno>
 8001836:	4603      	mov	r3, r0
 8001838:	2216      	movs	r2, #22
 800183a:	601a      	str	r2, [r3, #0]
  return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_exit>:

void _exit (int status)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffe7 	bl	8001828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800185a:	bf00      	nop
 800185c:	e7fd      	b.n	800185a <_exit+0x12>

0800185e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e00a      	b.n	8001886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001870:	f3af 8000 	nop.w
 8001874:	4601      	mov	r1, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	60ba      	str	r2, [r7, #8]
 800187c:	b2ca      	uxtb	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf0      	blt.n	8001870 <_read+0x12>
  }

  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e009      	b.n	80018be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf1      	blt.n	80018aa <_write+0x12>
  }
  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_close>:

int _close(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f6:	605a      	str	r2, [r3, #4]
  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <_isatty>:

int _isatty(int file)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f002 fcec 	bl	800433c <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20005000 	.word	0x20005000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000274 	.word	0x20000274
 8001998:	200003c8 	.word	0x200003c8

0800199c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff fff8 	bl	800199c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	@ (80019dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ae:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b0:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c4:	4c09      	ldr	r4, [pc, #36]	@ (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f002 fcb9 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fd05 	bl	80013e4 <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80019e4:	08007eac 	.word	0x08007eac
  ldr r2, =_sbss
 80019e8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80019ec:	200003c8 	.word	0x200003c8

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f947 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fe54 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 f95f 	bl	8001d02 <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 f927 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000028 	.word	0x20000028
 8001a78:	20000030 	.word	0x20000030
 8001a7c:	2000002c 	.word	0x2000002c

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000030 	.word	0x20000030
 8001aa0:	20000278 	.word	0x20000278

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	@ (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000278 	.word	0x20000278

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff fff0 	bl	8001aa4 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffe0 	bl	8001aa4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000030 	.word	0x20000030

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4906      	ldr	r1, [pc, #24]	@ (8001b98 <__NVIC_EnableIRQ+0x34>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff2d 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff42 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff35 	bl	8001b64 <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b08b      	sub	sp, #44	@ 0x2c
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e169      	b.n	8002004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d30:	2201      	movs	r2, #1
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8158 	bne.w	8001ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a9a      	ldr	r2, [pc, #616]	@ (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d05e      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d58:	4a98      	ldr	r2, [pc, #608]	@ (8001fbc <HAL_GPIO_Init+0x2a0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d875      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d5e:	4a98      	ldr	r2, [pc, #608]	@ (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d058      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d64:	4a96      	ldr	r2, [pc, #600]	@ (8001fc0 <HAL_GPIO_Init+0x2a4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d86f      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d6a:	4a96      	ldr	r2, [pc, #600]	@ (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d052      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d70:	4a94      	ldr	r2, [pc, #592]	@ (8001fc4 <HAL_GPIO_Init+0x2a8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d869      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d76:	4a94      	ldr	r2, [pc, #592]	@ (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d04c      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d7c:	4a92      	ldr	r2, [pc, #584]	@ (8001fc8 <HAL_GPIO_Init+0x2ac>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d863      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d82:	4a92      	ldr	r2, [pc, #584]	@ (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d046      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
 8001d88:	4a90      	ldr	r2, [pc, #576]	@ (8001fcc <HAL_GPIO_Init+0x2b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d85d      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d82a      	bhi.n	8001de8 <HAL_GPIO_Init+0xcc>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d859      	bhi.n	8001e4a <HAL_GPIO_Init+0x12e>
 8001d96:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <HAL_GPIO_Init+0x80>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001e03 	.word	0x08001e03
 8001da8:	08001e45 	.word	0x08001e45
 8001dac:	08001e4b 	.word	0x08001e4b
 8001db0:	08001e4b 	.word	0x08001e4b
 8001db4:	08001e4b 	.word	0x08001e4b
 8001db8:	08001e4b 	.word	0x08001e4b
 8001dbc:	08001e4b 	.word	0x08001e4b
 8001dc0:	08001e4b 	.word	0x08001e4b
 8001dc4:	08001e4b 	.word	0x08001e4b
 8001dc8:	08001e4b 	.word	0x08001e4b
 8001dcc:	08001e4b 	.word	0x08001e4b
 8001dd0:	08001e4b 	.word	0x08001e4b
 8001dd4:	08001e4b 	.word	0x08001e4b
 8001dd8:	08001e4b 	.word	0x08001e4b
 8001ddc:	08001e4b 	.word	0x08001e4b
 8001de0:	08001df9 	.word	0x08001df9
 8001de4:	08001e0d 	.word	0x08001e0d
 8001de8:	4a79      	ldr	r2, [pc, #484]	@ (8001fd0 <HAL_GPIO_Init+0x2b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dee:	e02c      	b.n	8001e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e029      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e024      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	3308      	adds	r3, #8
 8001e08:	623b      	str	r3, [r7, #32]
          break;
 8001e0a:	e01f      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	330c      	adds	r3, #12
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e01a      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d102      	bne.n	8001e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e013      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	611a      	str	r2, [r3, #16]
          break;
 8001e36:	e009      	b.n	8001e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e38:	2308      	movs	r3, #8
 8001e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	615a      	str	r2, [r3, #20]
          break;
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
          break;
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x130>
          break;
 8001e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	@ 0xff
 8001e50:	d801      	bhi.n	8001e56 <HAL_GPIO_Init+0x13a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_Init+0x13e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2bff      	cmp	r3, #255	@ 0xff
 8001e60:	d802      	bhi.n	8001e68 <HAL_GPIO_Init+0x14c>
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x152>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	3b08      	subs	r3, #8
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	210f      	movs	r1, #15
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	6a39      	ldr	r1, [r7, #32]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80b1 	beq.w	8001ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd4 <HAL_GPIO_Init+0x2b8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb4:	4a48      	ldr	r2, [pc, #288]	@ (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a40      	ldr	r2, [pc, #256]	@ (8001fdc <HAL_GPIO_Init+0x2c0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1ec>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe0 <HAL_GPIO_Init+0x2c4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1e8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3d      	ldr	r2, [pc, #244]	@ (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1e0>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e006      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001efc:	2304      	movs	r3, #4
 8001efe:	e004      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_GPIO_Init+0x1ee>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f1a:	492f      	ldr	r1, [pc, #188]	@ (8001fd8 <HAL_GPIO_Init+0x2bc>)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f34:	4b2d      	ldr	r3, [pc, #180]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	492c      	ldr	r1, [pc, #176]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f42:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4928      	ldr	r1, [pc, #160]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4922      	ldr	r1, [pc, #136]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60cb      	str	r3, [r1, #12]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	491e      	ldr	r1, [pc, #120]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4918      	ldr	r1, [pc, #96]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4914      	ldr	r1, [pc, #80]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	490e      	ldr	r1, [pc, #56]	@ (8001fec <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e021      	b.n	8001ffe <HAL_GPIO_Init+0x2e2>
 8001fba:	bf00      	nop
 8001fbc:	10320000 	.word	0x10320000
 8001fc0:	10310000 	.word	0x10310000
 8001fc4:	10220000 	.word	0x10220000
 8001fc8:	10210000 	.word	0x10210000
 8001fcc:	10120000 	.word	0x10120000
 8001fd0:	10110000 	.word	0x10110000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010800 	.word	0x40010800
 8001fe0:	40010c00 	.word	0x40010c00
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	40011400 	.word	0x40011400
 8001fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	4909      	ldr	r1, [pc, #36]	@ (8002020 <HAL_GPIO_Init+0x304>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	3301      	adds	r3, #1
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	f47f ae8e 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	372c      	adds	r7, #44	@ 0x2c
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d006      	beq.n	8002078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800206a:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f806 	bl	8002084 <HAL_GPIO_EXTI_Callback>
  }
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e272      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b8:	4b92      	ldr	r3, [pc, #584]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d00c      	beq.n	80020de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d112      	bne.n	80020f6 <HAL_RCC_OscConfig+0x5e>
 80020d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	4b89      	ldr	r3, [pc, #548]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d06c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x12c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d168      	bne.n	80021c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e24c      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x76>
 8002100:	4b80      	ldr	r3, [pc, #512]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a7f      	ldr	r2, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e02e      	b.n	800216c <HAL_RCC_OscConfig+0xd4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x98>
 8002116:	4b7b      	ldr	r3, [pc, #492]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7a      	ldr	r2, [pc, #488]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b78      	ldr	r3, [pc, #480]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a77      	ldr	r2, [pc, #476]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xd4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0xbc>
 800213a:	4b72      	ldr	r3, [pc, #456]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a71      	ldr	r2, [pc, #452]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b6f      	ldr	r3, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6e      	ldr	r2, [pc, #440]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xd4>
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6a      	ldr	r2, [pc, #424]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b68      	ldr	r3, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a67      	ldr	r2, [pc, #412]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800216a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fc96 	bl	8001aa4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fc92 	bl	8001aa4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	@ 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e200      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xe4>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fc82 	bl	8001aa4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fc7e 	bl	8001aa4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1ec      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x10c>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021de:	4b49      	ldr	r3, [pc, #292]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11c      	bne.n	8002224 <HAL_RCC_OscConfig+0x18c>
 80021ea:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	4b43      	ldr	r3, [pc, #268]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x176>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1c0      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b3d      	ldr	r3, [pc, #244]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4939      	ldr	r1, [pc, #228]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	e03a      	b.n	800229a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fc37 	bl	8001aa4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fc33 	bl	8001aa4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e1a1      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	4b2d      	ldr	r3, [pc, #180]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4927      	ldr	r1, [pc, #156]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <HAL_RCC_OscConfig+0x270>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fc16 	bl	8001aa4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227c:	f7ff fc12 	bl	8001aa4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e180      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03a      	beq.n	800231c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d019      	beq.n	80022e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <HAL_RCC_OscConfig+0x274>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fbf6 	bl	8001aa4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fbf2 	bl	8001aa4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e160      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fa9c 	bl	8002818 <RCC_Delay>
 80022e0:	e01c      	b.n	800231c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_RCC_OscConfig+0x274>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7ff fbdc 	bl	8001aa4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff fbd8 	bl	8001aa4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d908      	bls.n	8002310 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e146      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	42420000 	.word	0x42420000
 800230c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b92      	ldr	r3, [pc, #584]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e9      	bne.n	80022f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80a6 	beq.w	8002476 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b8b      	ldr	r3, [pc, #556]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b88      	ldr	r3, [pc, #544]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a87      	ldr	r2, [pc, #540]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b85      	ldr	r3, [pc, #532]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b82      	ldr	r3, [pc, #520]	@ (8002560 <HAL_RCC_OscConfig+0x4c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b7f      	ldr	r3, [pc, #508]	@ (8002560 <HAL_RCC_OscConfig+0x4c8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7e      	ldr	r2, [pc, #504]	@ (8002560 <HAL_RCC_OscConfig+0x4c8>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7ff fb99 	bl	8001aa4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7ff fb95 	bl	8001aa4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	@ 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e103      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b75      	ldr	r3, [pc, #468]	@ (8002560 <HAL_RCC_OscConfig+0x4c8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x312>
 800239c:	4b6f      	ldr	r3, [pc, #444]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a6e      	ldr	r2, [pc, #440]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	e02d      	b.n	8002406 <HAL_RCC_OscConfig+0x36e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x334>
 80023b2:	4b6a      	ldr	r3, [pc, #424]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a69      	ldr	r2, [pc, #420]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	4b67      	ldr	r3, [pc, #412]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a66      	ldr	r2, [pc, #408]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	e01c      	b.n	8002406 <HAL_RCC_OscConfig+0x36e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x356>
 80023d4:	4b61      	ldr	r3, [pc, #388]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a60      	ldr	r2, [pc, #384]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	4b5e      	ldr	r3, [pc, #376]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a5d      	ldr	r2, [pc, #372]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x36e>
 80023ee:	4b5b      	ldr	r3, [pc, #364]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a5a      	ldr	r2, [pc, #360]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	4b58      	ldr	r3, [pc, #352]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a57      	ldr	r2, [pc, #348]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d015      	beq.n	800243a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff fb49 	bl	8001aa4 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7ff fb45 	bl	8001aa4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0b1      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	4b4b      	ldr	r3, [pc, #300]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ee      	beq.n	8002416 <HAL_RCC_OscConfig+0x37e>
 8002438:	e014      	b.n	8002464 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7ff fb33 	bl	8001aa4 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7ff fb2f 	bl	8001aa4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e09b      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	4b40      	ldr	r3, [pc, #256]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ee      	bne.n	8002442 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b3c      	ldr	r3, [pc, #240]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4a3b      	ldr	r2, [pc, #236]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002474:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8087 	beq.w	800258e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002480:	4b36      	ldr	r3, [pc, #216]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d061      	beq.n	8002550 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d146      	bne.n	8002522 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fb03 	bl	8001aa4 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff faff 	bl	8001aa4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e06d      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	4b29      	ldr	r3, [pc, #164]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c8:	d108      	bne.n	80024dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ca:	4b24      	ldr	r3, [pc, #144]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4921      	ldr	r1, [pc, #132]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a19      	ldr	r1, [r3, #32]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	430b      	orrs	r3, r1
 80024ee:	491b      	ldr	r1, [pc, #108]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fad3 	bl	8001aa4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff facf 	bl	8001aa4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e03d      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x46a>
 8002520:	e035      	b.n	800258e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <HAL_RCC_OscConfig+0x4cc>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fabc 	bl	8001aa4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7ff fab8 	bl	8001aa4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e026      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_OscConfig+0x4c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x498>
 800254e:	e01e      	b.n	800258e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d107      	bne.n	8002568 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e019      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
 800255c:	40021000 	.word	0x40021000
 8002560:	40007000 	.word	0x40007000
 8002564:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <HAL_RCC_OscConfig+0x500>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0d0      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d910      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b67      	ldr	r3, [pc, #412]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
 80025c6:	4965      	ldr	r1, [pc, #404]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b63      	ldr	r3, [pc, #396]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b59      	ldr	r3, [pc, #356]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4a58      	ldr	r2, [pc, #352]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002602:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002610:	4b53      	ldr	r3, [pc, #332]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a52      	ldr	r2, [pc, #328]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800261a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b50      	ldr	r3, [pc, #320]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	494d      	ldr	r1, [pc, #308]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d040      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b47      	ldr	r3, [pc, #284]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d115      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e073      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3d      	ldr	r3, [pc, #244]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e06b      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b39      	ldr	r3, [pc, #228]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4936      	ldr	r1, [pc, #216]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7ff fa0a 	bl	8001aa4 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff fa06 	bl	8001aa4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e053      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d210      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b24      	ldr	r3, [pc, #144]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4922      	ldr	r1, [pc, #136]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b20      	ldr	r3, [pc, #128]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e032      	b.n	8002752 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b19      	ldr	r3, [pc, #100]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4916      	ldr	r1, [pc, #88]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002716:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	490e      	ldr	r1, [pc, #56]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800272a:	f000 f821 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800272e:	4602      	mov	r2, r0
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	490a      	ldr	r1, [pc, #40]	@ (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	5ccb      	ldrb	r3, [r1, r3]
 800273e:	fa22 f303 	lsr.w	r3, r2, r3
 8002742:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <HAL_RCC_ClockConfig+0x1cc>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002746:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_RCC_ClockConfig+0x1d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f968 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40022000 	.word	0x40022000
 8002760:	40021000 	.word	0x40021000
 8002764:	08007a50 	.word	0x08007a50
 8002768:	20000028 	.word	0x20000028
 800276c:	2000002c 	.word	0x2000002c

08002770 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800278a:	4b1e      	ldr	r3, [pc, #120]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x94>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d002      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x30>
 800279a:	2b08      	cmp	r3, #8
 800279c:	d003      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x36>
 800279e:	e027      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a0:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x98>)
 80027a2:	613b      	str	r3, [r7, #16]
      break;
 80027a4:	e027      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	4a17      	ldr	r2, [pc, #92]	@ (800280c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b0:	5cd3      	ldrb	r3, [r2, r3]
 80027b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d010      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	0c5b      	lsrs	r3, r3, #17
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	4a11      	ldr	r2, [pc, #68]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x98>)
 80027d2:	fb03 f202 	mul.w	r2, r3, r2
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e004      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	613b      	str	r3, [r7, #16]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x98>)
 80027f2:	613b      	str	r3, [r7, #16]
      break;
 80027f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f6:	693b      	ldr	r3, [r7, #16]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	007a1200 	.word	0x007a1200
 800280c:	08007a60 	.word	0x08007a60
 8002810:	08007a70 	.word	0x08007a70
 8002814:	003d0900 	.word	0x003d0900

08002818 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002820:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <RCC_Delay+0x34>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	@ (8002850 <RCC_Delay+0x38>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0a5b      	lsrs	r3, r3, #9
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	fb02 f303 	mul.w	r3, r2, r3
 8002832:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002834:	bf00      	nop
  }
  while (Delay --);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	60fa      	str	r2, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f9      	bne.n	8002834 <RCC_Delay+0x1c>
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	20000028 	.word	0x20000028
 8002850:	10624dd3 	.word	0x10624dd3

08002854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e076      	b.n	8002954 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002876:	d009      	beq.n	800288c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	61da      	str	r2, [r3, #28]
 800287e:	e005      	b.n	800288c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe ff3a 	bl	8001720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	ea42 0103 	orr.w	r1, r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	0c1a      	lsrs	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f002 0204 	and.w	r2, r2, #4
 8002932:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002942:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296c:	f7ff f89a 	bl	8001aa4 <HAL_GetTick>
 8002970:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	e12a      	b.n	8002bdc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_SPI_Transmit+0x36>
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e122      	b.n	8002bdc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_SPI_Transmit+0x48>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e11b      	b.n	8002bdc <HAL_SPI_Transmit+0x280>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2203      	movs	r2, #3
 80029b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029f2:	d10f      	bne.n	8002a14 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1e:	2b40      	cmp	r3, #64	@ 0x40
 8002a20:	d007      	beq.n	8002a32 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a3a:	d152      	bne.n	8002ae2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_SPI_Transmit+0xee>
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d145      	bne.n	8002ad6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	881a      	ldrh	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	1c9a      	adds	r2, r3, #2
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a6e:	e032      	b.n	8002ad6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d112      	bne.n	8002aa4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	1c9a      	adds	r2, r3, #2
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002aa2:	e018      	b.n	8002ad6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa4:	f7fe fffe 	bl	8001aa4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d803      	bhi.n	8002abc <HAL_SPI_Transmit+0x160>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x166>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e082      	b.n	8002bdc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1c7      	bne.n	8002a70 <HAL_SPI_Transmit+0x114>
 8002ae0:	e053      	b.n	8002b8a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_SPI_Transmit+0x194>
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d147      	bne.n	8002b80 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	7812      	ldrb	r2, [r2, #0]
 8002afc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b16:	e033      	b.n	8002b80 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d113      	bne.n	8002b4e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	7812      	ldrb	r2, [r2, #0]
 8002b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b4c:	e018      	b.n	8002b80 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b4e:	f7fe ffa9 	bl	8001aa4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d803      	bhi.n	8002b66 <HAL_SPI_Transmit+0x20a>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d102      	bne.n	8002b6c <HAL_SPI_Transmit+0x210>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e02d      	b.n	8002bdc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1c6      	bne.n	8002b18 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fbc4 	bl	800331c <SPI_EndRxTxTransaction>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002bda:	2300      	movs	r3, #0
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d001      	beq.n	8002c04 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	e104      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c0c:	d112      	bne.n	8002c34 <HAL_SPI_Receive+0x50>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2204      	movs	r2, #4
 8002c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c1e:	88fa      	ldrh	r2, [r7, #6]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f8f3 	bl	8002e16 <HAL_SPI_TransmitReceive>
 8002c30:	4603      	mov	r3, r0
 8002c32:	e0ec      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c34:	f7fe ff36 	bl	8001aa4 <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_SPI_Receive+0x62>
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0e1      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_SPI_Receive+0x74>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e0da      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2204      	movs	r2, #4
 8002c64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd2:	2b40      	cmp	r3, #64	@ 0x40
 8002cd4:	d007      	beq.n	8002ce6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d170      	bne.n	8002dd0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cee:	e035      	b.n	8002d5c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d115      	bne.n	8002d2a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f103 020c 	add.w	r2, r3, #12
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d28:	e018      	b.n	8002d5c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2a:	f7fe febb 	bl	8001aa4 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d803      	bhi.n	8002d42 <HAL_SPI_Receive+0x15e>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_Receive+0x164>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e058      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1c4      	bne.n	8002cf0 <HAL_SPI_Receive+0x10c>
 8002d66:	e038      	b.n	8002dda <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d113      	bne.n	8002d9e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	b292      	uxth	r2, r2
 8002d82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d9c:	e018      	b.n	8002dd0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe fe81 	bl	8001aa4 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Receive+0x1d2>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Receive+0x1d8>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e01e      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1c6      	bne.n	8002d68 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fa4a 	bl	8003278 <SPI_EndRxTransaction>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
  }
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b08a      	sub	sp, #40	@ 0x28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e24:	2301      	movs	r3, #1
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e28:	f7fe fe3c 	bl	8001aa4 <HAL_GetTick>
 8002e2c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e34:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e40:	7ffb      	ldrb	r3, [r7, #31]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d00c      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x4a>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e4c:	d106      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x46>
 8002e56:	7ffb      	ldrb	r3, [r7, #31]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d001      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e17f      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x5c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x5c>
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e174      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_SPI_TransmitReceive+0x6e>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e16d      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d003      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	887a      	ldrh	r2, [r7, #2]
 8002ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee0:	2b40      	cmp	r3, #64	@ 0x40
 8002ee2:	d007      	beq.n	8002ef4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002efc:	d17e      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0xf6>
 8002f06:	8afb      	ldrh	r3, [r7, #22]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d16c      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f30:	e059      	b.n	8002fe6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d11b      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x162>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_SPI_TransmitReceive+0x162>
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d113      	bne.n	8002f78 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	881a      	ldrh	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d119      	bne.n	8002fba <HAL_SPI_TransmitReceive+0x1a4>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d014      	beq.n	8002fba <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9a:	b292      	uxth	r2, r2
 8002f9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa2:	1c9a      	adds	r2, r3, #2
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fba:	f7fe fd73 	bl	8001aa4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d80d      	bhi.n	8002fe6 <HAL_SPI_TransmitReceive+0x1d0>
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d009      	beq.n	8002fe6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0bc      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1a0      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x11c>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d19b      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x11c>
 8002ffa:	e082      	b.n	8003102 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_SPI_TransmitReceive+0x1f4>
 8003004:	8afb      	ldrh	r3, [r7, #22]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d171      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003030:	e05d      	b.n	80030ee <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11c      	bne.n	800307a <HAL_SPI_TransmitReceive+0x264>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d017      	beq.n	800307a <HAL_SPI_TransmitReceive+0x264>
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	2b01      	cmp	r3, #1
 800304e:	d114      	bne.n	800307a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d119      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x2a6>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d014      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030b8:	2301      	movs	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030bc:	f7fe fcf2 	bl	8001aa4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d803      	bhi.n	80030d4 <HAL_SPI_TransmitReceive+0x2be>
 80030cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d102      	bne.n	80030da <HAL_SPI_TransmitReceive+0x2c4>
 80030d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e038      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d19c      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x21c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d197      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003102:	6a3a      	ldr	r2, [r7, #32]
 8003104:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f908 	bl	800331c <SPI_EndRxTxTransaction>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e01d      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800315e:	2300      	movs	r3, #0
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	@ 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003178:	f7fe fc94 	bl	8001aa4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	4413      	add	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003188:	f7fe fc8c 	bl	8001aa4 <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800318e:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	015b      	lsls	r3, r3, #5
 8003194:	0d1b      	lsrs	r3, r3, #20
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800319e:	e054      	b.n	800324a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d050      	beq.n	800324a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a8:	f7fe fc7c 	bl	8001aa4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d902      	bls.n	80031be <SPI_WaitFlagStateUntilTimeout+0x56>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d13d      	bne.n	800323a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031d6:	d111      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e0:	d004      	beq.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ea:	d107      	bne.n	80031fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003204:	d10f      	bne.n	8003226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e017      	b.n	800326a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3b01      	subs	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d19b      	bne.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000028 	.word	0x20000028

08003278 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328c:	d111      	bne.n	80032b2 <SPI_EndRxTransaction+0x3a>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003296:	d004      	beq.n	80032a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a0:	d107      	bne.n	80032b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ba:	d117      	bne.n	80032ec <SPI_EndRxTransaction+0x74>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c4:	d112      	bne.n	80032ec <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2101      	movs	r1, #1
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff ff49 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01a      	beq.n	8003312 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e013      	b.n	8003314 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	2180      	movs	r1, #128	@ 0x80
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff ff36 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e000      	b.n	8003314 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2201      	movs	r2, #1
 8003330:	2102      	movs	r1, #2
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ff18 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e013      	b.n	8003376 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	2180      	movs	r1, #128	@ 0x80
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff ff05 	bl	8003168 <SPI_WaitFlagStateUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e000      	b.n	8003376 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <__cvt>:
 800337e:	2b00      	cmp	r3, #0
 8003380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003384:	461d      	mov	r5, r3
 8003386:	bfbb      	ittet	lt
 8003388:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800338c:	461d      	movlt	r5, r3
 800338e:	2300      	movge	r3, #0
 8003390:	232d      	movlt	r3, #45	@ 0x2d
 8003392:	b088      	sub	sp, #32
 8003394:	4614      	mov	r4, r2
 8003396:	bfb8      	it	lt
 8003398:	4614      	movlt	r4, r2
 800339a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800339c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800339e:	7013      	strb	r3, [r2, #0]
 80033a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80033a2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80033a6:	f023 0820 	bic.w	r8, r3, #32
 80033aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80033ae:	d005      	beq.n	80033bc <__cvt+0x3e>
 80033b0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80033b4:	d100      	bne.n	80033b8 <__cvt+0x3a>
 80033b6:	3601      	adds	r6, #1
 80033b8:	2302      	movs	r3, #2
 80033ba:	e000      	b.n	80033be <__cvt+0x40>
 80033bc:	2303      	movs	r3, #3
 80033be:	aa07      	add	r2, sp, #28
 80033c0:	9204      	str	r2, [sp, #16]
 80033c2:	aa06      	add	r2, sp, #24
 80033c4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80033c8:	e9cd 3600 	strd	r3, r6, [sp]
 80033cc:	4622      	mov	r2, r4
 80033ce:	462b      	mov	r3, r5
 80033d0:	f001 f87e 	bl	80044d0 <_dtoa_r>
 80033d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80033d8:	4607      	mov	r7, r0
 80033da:	d119      	bne.n	8003410 <__cvt+0x92>
 80033dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80033de:	07db      	lsls	r3, r3, #31
 80033e0:	d50e      	bpl.n	8003400 <__cvt+0x82>
 80033e2:	eb00 0906 	add.w	r9, r0, r6
 80033e6:	2200      	movs	r2, #0
 80033e8:	2300      	movs	r3, #0
 80033ea:	4620      	mov	r0, r4
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7fd fadb 	bl	80009a8 <__aeabi_dcmpeq>
 80033f2:	b108      	cbz	r0, 80033f8 <__cvt+0x7a>
 80033f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80033f8:	2230      	movs	r2, #48	@ 0x30
 80033fa:	9b07      	ldr	r3, [sp, #28]
 80033fc:	454b      	cmp	r3, r9
 80033fe:	d31e      	bcc.n	800343e <__cvt+0xc0>
 8003400:	4638      	mov	r0, r7
 8003402:	9b07      	ldr	r3, [sp, #28]
 8003404:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003406:	1bdb      	subs	r3, r3, r7
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	b008      	add	sp, #32
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003414:	eb00 0906 	add.w	r9, r0, r6
 8003418:	d1e5      	bne.n	80033e6 <__cvt+0x68>
 800341a:	7803      	ldrb	r3, [r0, #0]
 800341c:	2b30      	cmp	r3, #48	@ 0x30
 800341e:	d10a      	bne.n	8003436 <__cvt+0xb8>
 8003420:	2200      	movs	r2, #0
 8003422:	2300      	movs	r3, #0
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	f7fd fabe 	bl	80009a8 <__aeabi_dcmpeq>
 800342c:	b918      	cbnz	r0, 8003436 <__cvt+0xb8>
 800342e:	f1c6 0601 	rsb	r6, r6, #1
 8003432:	f8ca 6000 	str.w	r6, [sl]
 8003436:	f8da 3000 	ldr.w	r3, [sl]
 800343a:	4499      	add	r9, r3
 800343c:	e7d3      	b.n	80033e6 <__cvt+0x68>
 800343e:	1c59      	adds	r1, r3, #1
 8003440:	9107      	str	r1, [sp, #28]
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e7d9      	b.n	80033fa <__cvt+0x7c>

08003446 <__exponent>:
 8003446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003448:	2900      	cmp	r1, #0
 800344a:	bfb6      	itet	lt
 800344c:	232d      	movlt	r3, #45	@ 0x2d
 800344e:	232b      	movge	r3, #43	@ 0x2b
 8003450:	4249      	neglt	r1, r1
 8003452:	2909      	cmp	r1, #9
 8003454:	7002      	strb	r2, [r0, #0]
 8003456:	7043      	strb	r3, [r0, #1]
 8003458:	dd29      	ble.n	80034ae <__exponent+0x68>
 800345a:	f10d 0307 	add.w	r3, sp, #7
 800345e:	461d      	mov	r5, r3
 8003460:	270a      	movs	r7, #10
 8003462:	fbb1 f6f7 	udiv	r6, r1, r7
 8003466:	461a      	mov	r2, r3
 8003468:	fb07 1416 	mls	r4, r7, r6, r1
 800346c:	3430      	adds	r4, #48	@ 0x30
 800346e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003472:	460c      	mov	r4, r1
 8003474:	2c63      	cmp	r4, #99	@ 0x63
 8003476:	4631      	mov	r1, r6
 8003478:	f103 33ff 	add.w	r3, r3, #4294967295
 800347c:	dcf1      	bgt.n	8003462 <__exponent+0x1c>
 800347e:	3130      	adds	r1, #48	@ 0x30
 8003480:	1e94      	subs	r4, r2, #2
 8003482:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003486:	4623      	mov	r3, r4
 8003488:	1c41      	adds	r1, r0, #1
 800348a:	42ab      	cmp	r3, r5
 800348c:	d30a      	bcc.n	80034a4 <__exponent+0x5e>
 800348e:	f10d 0309 	add.w	r3, sp, #9
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	42ac      	cmp	r4, r5
 8003496:	bf88      	it	hi
 8003498:	2300      	movhi	r3, #0
 800349a:	3302      	adds	r3, #2
 800349c:	4403      	add	r3, r0
 800349e:	1a18      	subs	r0, r3, r0
 80034a0:	b003      	add	sp, #12
 80034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80034a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80034ac:	e7ed      	b.n	800348a <__exponent+0x44>
 80034ae:	2330      	movs	r3, #48	@ 0x30
 80034b0:	3130      	adds	r1, #48	@ 0x30
 80034b2:	7083      	strb	r3, [r0, #2]
 80034b4:	70c1      	strb	r1, [r0, #3]
 80034b6:	1d03      	adds	r3, r0, #4
 80034b8:	e7f1      	b.n	800349e <__exponent+0x58>
	...

080034bc <_printf_float>:
 80034bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c0:	b091      	sub	sp, #68	@ 0x44
 80034c2:	460c      	mov	r4, r1
 80034c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80034c8:	4616      	mov	r6, r2
 80034ca:	461f      	mov	r7, r3
 80034cc:	4605      	mov	r5, r0
 80034ce:	f000 feeb 	bl	80042a8 <_localeconv_r>
 80034d2:	6803      	ldr	r3, [r0, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	9308      	str	r3, [sp, #32]
 80034d8:	f7fc fe3a 	bl	8000150 <strlen>
 80034dc:	2300      	movs	r3, #0
 80034de:	930e      	str	r3, [sp, #56]	@ 0x38
 80034e0:	f8d8 3000 	ldr.w	r3, [r8]
 80034e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80034e6:	3307      	adds	r3, #7
 80034e8:	f023 0307 	bic.w	r3, r3, #7
 80034ec:	f103 0208 	add.w	r2, r3, #8
 80034f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80034f4:	f8d4 b000 	ldr.w	fp, [r4]
 80034f8:	f8c8 2000 	str.w	r2, [r8]
 80034fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003500:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003504:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003506:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800350a:	f04f 32ff 	mov.w	r2, #4294967295
 800350e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003512:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003516:	4b9c      	ldr	r3, [pc, #624]	@ (8003788 <_printf_float+0x2cc>)
 8003518:	f7fd fa78 	bl	8000a0c <__aeabi_dcmpun>
 800351c:	bb70      	cbnz	r0, 800357c <_printf_float+0xc0>
 800351e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003522:	f04f 32ff 	mov.w	r2, #4294967295
 8003526:	4b98      	ldr	r3, [pc, #608]	@ (8003788 <_printf_float+0x2cc>)
 8003528:	f7fd fa52 	bl	80009d0 <__aeabi_dcmple>
 800352c:	bb30      	cbnz	r0, 800357c <_printf_float+0xc0>
 800352e:	2200      	movs	r2, #0
 8003530:	2300      	movs	r3, #0
 8003532:	4640      	mov	r0, r8
 8003534:	4649      	mov	r1, r9
 8003536:	f7fd fa41 	bl	80009bc <__aeabi_dcmplt>
 800353a:	b110      	cbz	r0, 8003542 <_printf_float+0x86>
 800353c:	232d      	movs	r3, #45	@ 0x2d
 800353e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003542:	4a92      	ldr	r2, [pc, #584]	@ (800378c <_printf_float+0x2d0>)
 8003544:	4b92      	ldr	r3, [pc, #584]	@ (8003790 <_printf_float+0x2d4>)
 8003546:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800354a:	bf8c      	ite	hi
 800354c:	4690      	movhi	r8, r2
 800354e:	4698      	movls	r8, r3
 8003550:	2303      	movs	r3, #3
 8003552:	f04f 0900 	mov.w	r9, #0
 8003556:	6123      	str	r3, [r4, #16]
 8003558:	f02b 0304 	bic.w	r3, fp, #4
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	4633      	mov	r3, r6
 8003560:	4621      	mov	r1, r4
 8003562:	4628      	mov	r0, r5
 8003564:	9700      	str	r7, [sp, #0]
 8003566:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003568:	f000 f9d4 	bl	8003914 <_printf_common>
 800356c:	3001      	adds	r0, #1
 800356e:	f040 8090 	bne.w	8003692 <_printf_float+0x1d6>
 8003572:	f04f 30ff 	mov.w	r0, #4294967295
 8003576:	b011      	add	sp, #68	@ 0x44
 8003578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	4640      	mov	r0, r8
 8003582:	4649      	mov	r1, r9
 8003584:	f7fd fa42 	bl	8000a0c <__aeabi_dcmpun>
 8003588:	b148      	cbz	r0, 800359e <_printf_float+0xe2>
 800358a:	464b      	mov	r3, r9
 800358c:	2b00      	cmp	r3, #0
 800358e:	bfb8      	it	lt
 8003590:	232d      	movlt	r3, #45	@ 0x2d
 8003592:	4a80      	ldr	r2, [pc, #512]	@ (8003794 <_printf_float+0x2d8>)
 8003594:	bfb8      	it	lt
 8003596:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <_printf_float+0x2dc>)
 800359c:	e7d3      	b.n	8003546 <_printf_float+0x8a>
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	d13f      	bne.n	8003628 <_printf_float+0x16c>
 80035a8:	2306      	movs	r3, #6
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	9206      	str	r2, [sp, #24]
 80035b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80035b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80035bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80035be:	9203      	str	r2, [sp, #12]
 80035c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80035c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80035c8:	6863      	ldr	r3, [r4, #4]
 80035ca:	4642      	mov	r2, r8
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	4628      	mov	r0, r5
 80035d0:	464b      	mov	r3, r9
 80035d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80035d4:	f7ff fed3 	bl	800337e <__cvt>
 80035d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80035da:	4680      	mov	r8, r0
 80035dc:	2947      	cmp	r1, #71	@ 0x47
 80035de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80035e0:	d128      	bne.n	8003634 <_printf_float+0x178>
 80035e2:	1cc8      	adds	r0, r1, #3
 80035e4:	db02      	blt.n	80035ec <_printf_float+0x130>
 80035e6:	6863      	ldr	r3, [r4, #4]
 80035e8:	4299      	cmp	r1, r3
 80035ea:	dd40      	ble.n	800366e <_printf_float+0x1b2>
 80035ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80035f0:	fa5f fa8a 	uxtb.w	sl, sl
 80035f4:	4652      	mov	r2, sl
 80035f6:	3901      	subs	r1, #1
 80035f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80035fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80035fe:	f7ff ff22 	bl	8003446 <__exponent>
 8003602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003604:	4681      	mov	r9, r0
 8003606:	1813      	adds	r3, r2, r0
 8003608:	2a01      	cmp	r2, #1
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	dc02      	bgt.n	8003614 <_printf_float+0x158>
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	07d2      	lsls	r2, r2, #31
 8003612:	d501      	bpl.n	8003618 <_printf_float+0x15c>
 8003614:	3301      	adds	r3, #1
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800361c:	2b00      	cmp	r3, #0
 800361e:	d09e      	beq.n	800355e <_printf_float+0xa2>
 8003620:	232d      	movs	r3, #45	@ 0x2d
 8003622:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003626:	e79a      	b.n	800355e <_printf_float+0xa2>
 8003628:	2947      	cmp	r1, #71	@ 0x47
 800362a:	d1bf      	bne.n	80035ac <_printf_float+0xf0>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1bd      	bne.n	80035ac <_printf_float+0xf0>
 8003630:	2301      	movs	r3, #1
 8003632:	e7ba      	b.n	80035aa <_printf_float+0xee>
 8003634:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003638:	d9dc      	bls.n	80035f4 <_printf_float+0x138>
 800363a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800363e:	d118      	bne.n	8003672 <_printf_float+0x1b6>
 8003640:	2900      	cmp	r1, #0
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	dd0b      	ble.n	800365e <_printf_float+0x1a2>
 8003646:	6121      	str	r1, [r4, #16]
 8003648:	b913      	cbnz	r3, 8003650 <_printf_float+0x194>
 800364a:	6822      	ldr	r2, [r4, #0]
 800364c:	07d0      	lsls	r0, r2, #31
 800364e:	d502      	bpl.n	8003656 <_printf_float+0x19a>
 8003650:	3301      	adds	r3, #1
 8003652:	440b      	add	r3, r1
 8003654:	6123      	str	r3, [r4, #16]
 8003656:	f04f 0900 	mov.w	r9, #0
 800365a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800365c:	e7dc      	b.n	8003618 <_printf_float+0x15c>
 800365e:	b913      	cbnz	r3, 8003666 <_printf_float+0x1aa>
 8003660:	6822      	ldr	r2, [r4, #0]
 8003662:	07d2      	lsls	r2, r2, #31
 8003664:	d501      	bpl.n	800366a <_printf_float+0x1ae>
 8003666:	3302      	adds	r3, #2
 8003668:	e7f4      	b.n	8003654 <_printf_float+0x198>
 800366a:	2301      	movs	r3, #1
 800366c:	e7f2      	b.n	8003654 <_printf_float+0x198>
 800366e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003674:	4299      	cmp	r1, r3
 8003676:	db05      	blt.n	8003684 <_printf_float+0x1c8>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	6121      	str	r1, [r4, #16]
 800367c:	07d8      	lsls	r0, r3, #31
 800367e:	d5ea      	bpl.n	8003656 <_printf_float+0x19a>
 8003680:	1c4b      	adds	r3, r1, #1
 8003682:	e7e7      	b.n	8003654 <_printf_float+0x198>
 8003684:	2900      	cmp	r1, #0
 8003686:	bfcc      	ite	gt
 8003688:	2201      	movgt	r2, #1
 800368a:	f1c1 0202 	rsble	r2, r1, #2
 800368e:	4413      	add	r3, r2
 8003690:	e7e0      	b.n	8003654 <_printf_float+0x198>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	055a      	lsls	r2, r3, #21
 8003696:	d407      	bmi.n	80036a8 <_printf_float+0x1ec>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	4642      	mov	r2, r8
 800369c:	4631      	mov	r1, r6
 800369e:	4628      	mov	r0, r5
 80036a0:	47b8      	blx	r7
 80036a2:	3001      	adds	r0, #1
 80036a4:	d12b      	bne.n	80036fe <_printf_float+0x242>
 80036a6:	e764      	b.n	8003572 <_printf_float+0xb6>
 80036a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80036ac:	f240 80dc 	bls.w	8003868 <_printf_float+0x3ac>
 80036b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036b4:	2200      	movs	r2, #0
 80036b6:	2300      	movs	r3, #0
 80036b8:	f7fd f976 	bl	80009a8 <__aeabi_dcmpeq>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d033      	beq.n	8003728 <_printf_float+0x26c>
 80036c0:	2301      	movs	r3, #1
 80036c2:	4631      	mov	r1, r6
 80036c4:	4628      	mov	r0, r5
 80036c6:	4a35      	ldr	r2, [pc, #212]	@ (800379c <_printf_float+0x2e0>)
 80036c8:	47b8      	blx	r7
 80036ca:	3001      	adds	r0, #1
 80036cc:	f43f af51 	beq.w	8003572 <_printf_float+0xb6>
 80036d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80036d4:	4543      	cmp	r3, r8
 80036d6:	db02      	blt.n	80036de <_printf_float+0x222>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07d8      	lsls	r0, r3, #31
 80036dc:	d50f      	bpl.n	80036fe <_printf_float+0x242>
 80036de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80036e2:	4631      	mov	r1, r6
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b8      	blx	r7
 80036e8:	3001      	adds	r0, #1
 80036ea:	f43f af42 	beq.w	8003572 <_printf_float+0xb6>
 80036ee:	f04f 0900 	mov.w	r9, #0
 80036f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80036f6:	f104 0a1a 	add.w	sl, r4, #26
 80036fa:	45c8      	cmp	r8, r9
 80036fc:	dc09      	bgt.n	8003712 <_printf_float+0x256>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079b      	lsls	r3, r3, #30
 8003702:	f100 8102 	bmi.w	800390a <_printf_float+0x44e>
 8003706:	68e0      	ldr	r0, [r4, #12]
 8003708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800370a:	4298      	cmp	r0, r3
 800370c:	bfb8      	it	lt
 800370e:	4618      	movlt	r0, r3
 8003710:	e731      	b.n	8003576 <_printf_float+0xba>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f af28 	beq.w	8003572 <_printf_float+0xb6>
 8003722:	f109 0901 	add.w	r9, r9, #1
 8003726:	e7e8      	b.n	80036fa <_printf_float+0x23e>
 8003728:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800372a:	2b00      	cmp	r3, #0
 800372c:	dc38      	bgt.n	80037a0 <_printf_float+0x2e4>
 800372e:	2301      	movs	r3, #1
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	4a19      	ldr	r2, [pc, #100]	@ (800379c <_printf_float+0x2e0>)
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f af1a 	beq.w	8003572 <_printf_float+0xb6>
 800373e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003742:	ea59 0303 	orrs.w	r3, r9, r3
 8003746:	d102      	bne.n	800374e <_printf_float+0x292>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	07d9      	lsls	r1, r3, #31
 800374c:	d5d7      	bpl.n	80036fe <_printf_float+0x242>
 800374e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003752:	4631      	mov	r1, r6
 8003754:	4628      	mov	r0, r5
 8003756:	47b8      	blx	r7
 8003758:	3001      	adds	r0, #1
 800375a:	f43f af0a 	beq.w	8003572 <_printf_float+0xb6>
 800375e:	f04f 0a00 	mov.w	sl, #0
 8003762:	f104 0b1a 	add.w	fp, r4, #26
 8003766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003768:	425b      	negs	r3, r3
 800376a:	4553      	cmp	r3, sl
 800376c:	dc01      	bgt.n	8003772 <_printf_float+0x2b6>
 800376e:	464b      	mov	r3, r9
 8003770:	e793      	b.n	800369a <_printf_float+0x1de>
 8003772:	2301      	movs	r3, #1
 8003774:	465a      	mov	r2, fp
 8003776:	4631      	mov	r1, r6
 8003778:	4628      	mov	r0, r5
 800377a:	47b8      	blx	r7
 800377c:	3001      	adds	r0, #1
 800377e:	f43f aef8 	beq.w	8003572 <_printf_float+0xb6>
 8003782:	f10a 0a01 	add.w	sl, sl, #1
 8003786:	e7ee      	b.n	8003766 <_printf_float+0x2aa>
 8003788:	7fefffff 	.word	0x7fefffff
 800378c:	08007a76 	.word	0x08007a76
 8003790:	08007a72 	.word	0x08007a72
 8003794:	08007a7e 	.word	0x08007a7e
 8003798:	08007a7a 	.word	0x08007a7a
 800379c:	08007a82 	.word	0x08007a82
 80037a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80037a6:	4553      	cmp	r3, sl
 80037a8:	bfa8      	it	ge
 80037aa:	4653      	movge	r3, sl
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	4699      	mov	r9, r3
 80037b0:	dc36      	bgt.n	8003820 <_printf_float+0x364>
 80037b2:	f04f 0b00 	mov.w	fp, #0
 80037b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037ba:	f104 021a 	add.w	r2, r4, #26
 80037be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80037c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80037c2:	eba3 0309 	sub.w	r3, r3, r9
 80037c6:	455b      	cmp	r3, fp
 80037c8:	dc31      	bgt.n	800382e <_printf_float+0x372>
 80037ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037cc:	459a      	cmp	sl, r3
 80037ce:	dc3a      	bgt.n	8003846 <_printf_float+0x38a>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	07da      	lsls	r2, r3, #31
 80037d4:	d437      	bmi.n	8003846 <_printf_float+0x38a>
 80037d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037d8:	ebaa 0903 	sub.w	r9, sl, r3
 80037dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037de:	ebaa 0303 	sub.w	r3, sl, r3
 80037e2:	4599      	cmp	r9, r3
 80037e4:	bfa8      	it	ge
 80037e6:	4699      	movge	r9, r3
 80037e8:	f1b9 0f00 	cmp.w	r9, #0
 80037ec:	dc33      	bgt.n	8003856 <_printf_float+0x39a>
 80037ee:	f04f 0800 	mov.w	r8, #0
 80037f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80037f6:	f104 0b1a 	add.w	fp, r4, #26
 80037fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037fc:	ebaa 0303 	sub.w	r3, sl, r3
 8003800:	eba3 0309 	sub.w	r3, r3, r9
 8003804:	4543      	cmp	r3, r8
 8003806:	f77f af7a 	ble.w	80036fe <_printf_float+0x242>
 800380a:	2301      	movs	r3, #1
 800380c:	465a      	mov	r2, fp
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	f43f aeac 	beq.w	8003572 <_printf_float+0xb6>
 800381a:	f108 0801 	add.w	r8, r8, #1
 800381e:	e7ec      	b.n	80037fa <_printf_float+0x33e>
 8003820:	4642      	mov	r2, r8
 8003822:	4631      	mov	r1, r6
 8003824:	4628      	mov	r0, r5
 8003826:	47b8      	blx	r7
 8003828:	3001      	adds	r0, #1
 800382a:	d1c2      	bne.n	80037b2 <_printf_float+0x2f6>
 800382c:	e6a1      	b.n	8003572 <_printf_float+0xb6>
 800382e:	2301      	movs	r3, #1
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	920a      	str	r2, [sp, #40]	@ 0x28
 8003836:	47b8      	blx	r7
 8003838:	3001      	adds	r0, #1
 800383a:	f43f ae9a 	beq.w	8003572 <_printf_float+0xb6>
 800383e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003840:	f10b 0b01 	add.w	fp, fp, #1
 8003844:	e7bb      	b.n	80037be <_printf_float+0x302>
 8003846:	4631      	mov	r1, r6
 8003848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800384c:	4628      	mov	r0, r5
 800384e:	47b8      	blx	r7
 8003850:	3001      	adds	r0, #1
 8003852:	d1c0      	bne.n	80037d6 <_printf_float+0x31a>
 8003854:	e68d      	b.n	8003572 <_printf_float+0xb6>
 8003856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003858:	464b      	mov	r3, r9
 800385a:	4631      	mov	r1, r6
 800385c:	4628      	mov	r0, r5
 800385e:	4442      	add	r2, r8
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	d1c3      	bne.n	80037ee <_printf_float+0x332>
 8003866:	e684      	b.n	8003572 <_printf_float+0xb6>
 8003868:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800386c:	f1ba 0f01 	cmp.w	sl, #1
 8003870:	dc01      	bgt.n	8003876 <_printf_float+0x3ba>
 8003872:	07db      	lsls	r3, r3, #31
 8003874:	d536      	bpl.n	80038e4 <_printf_float+0x428>
 8003876:	2301      	movs	r3, #1
 8003878:	4642      	mov	r2, r8
 800387a:	4631      	mov	r1, r6
 800387c:	4628      	mov	r0, r5
 800387e:	47b8      	blx	r7
 8003880:	3001      	adds	r0, #1
 8003882:	f43f ae76 	beq.w	8003572 <_printf_float+0xb6>
 8003886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	f43f ae6e 	beq.w	8003572 <_printf_float+0xb6>
 8003896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800389a:	2200      	movs	r2, #0
 800389c:	2300      	movs	r3, #0
 800389e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038a2:	f7fd f881 	bl	80009a8 <__aeabi_dcmpeq>
 80038a6:	b9c0      	cbnz	r0, 80038da <_printf_float+0x41e>
 80038a8:	4653      	mov	r3, sl
 80038aa:	f108 0201 	add.w	r2, r8, #1
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	d10c      	bne.n	80038d2 <_printf_float+0x416>
 80038b8:	e65b      	b.n	8003572 <_printf_float+0xb6>
 80038ba:	2301      	movs	r3, #1
 80038bc:	465a      	mov	r2, fp
 80038be:	4631      	mov	r1, r6
 80038c0:	4628      	mov	r0, r5
 80038c2:	47b8      	blx	r7
 80038c4:	3001      	adds	r0, #1
 80038c6:	f43f ae54 	beq.w	8003572 <_printf_float+0xb6>
 80038ca:	f108 0801 	add.w	r8, r8, #1
 80038ce:	45d0      	cmp	r8, sl
 80038d0:	dbf3      	blt.n	80038ba <_printf_float+0x3fe>
 80038d2:	464b      	mov	r3, r9
 80038d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80038d8:	e6e0      	b.n	800369c <_printf_float+0x1e0>
 80038da:	f04f 0800 	mov.w	r8, #0
 80038de:	f104 0b1a 	add.w	fp, r4, #26
 80038e2:	e7f4      	b.n	80038ce <_printf_float+0x412>
 80038e4:	2301      	movs	r3, #1
 80038e6:	4642      	mov	r2, r8
 80038e8:	e7e1      	b.n	80038ae <_printf_float+0x3f2>
 80038ea:	2301      	movs	r3, #1
 80038ec:	464a      	mov	r2, r9
 80038ee:	4631      	mov	r1, r6
 80038f0:	4628      	mov	r0, r5
 80038f2:	47b8      	blx	r7
 80038f4:	3001      	adds	r0, #1
 80038f6:	f43f ae3c 	beq.w	8003572 <_printf_float+0xb6>
 80038fa:	f108 0801 	add.w	r8, r8, #1
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	4543      	cmp	r3, r8
 8003906:	dcf0      	bgt.n	80038ea <_printf_float+0x42e>
 8003908:	e6fd      	b.n	8003706 <_printf_float+0x24a>
 800390a:	f04f 0800 	mov.w	r8, #0
 800390e:	f104 0919 	add.w	r9, r4, #25
 8003912:	e7f4      	b.n	80038fe <_printf_float+0x442>

08003914 <_printf_common>:
 8003914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003918:	4616      	mov	r6, r2
 800391a:	4698      	mov	r8, r3
 800391c:	688a      	ldr	r2, [r1, #8]
 800391e:	690b      	ldr	r3, [r1, #16]
 8003920:	4607      	mov	r7, r0
 8003922:	4293      	cmp	r3, r2
 8003924:	bfb8      	it	lt
 8003926:	4613      	movlt	r3, r2
 8003928:	6033      	str	r3, [r6, #0]
 800392a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800392e:	460c      	mov	r4, r1
 8003930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003934:	b10a      	cbz	r2, 800393a <_printf_common+0x26>
 8003936:	3301      	adds	r3, #1
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	0699      	lsls	r1, r3, #26
 800393e:	bf42      	ittt	mi
 8003940:	6833      	ldrmi	r3, [r6, #0]
 8003942:	3302      	addmi	r3, #2
 8003944:	6033      	strmi	r3, [r6, #0]
 8003946:	6825      	ldr	r5, [r4, #0]
 8003948:	f015 0506 	ands.w	r5, r5, #6
 800394c:	d106      	bne.n	800395c <_printf_common+0x48>
 800394e:	f104 0a19 	add.w	sl, r4, #25
 8003952:	68e3      	ldr	r3, [r4, #12]
 8003954:	6832      	ldr	r2, [r6, #0]
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	42ab      	cmp	r3, r5
 800395a:	dc2b      	bgt.n	80039b4 <_printf_common+0xa0>
 800395c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	3b00      	subs	r3, #0
 8003964:	bf18      	it	ne
 8003966:	2301      	movne	r3, #1
 8003968:	0692      	lsls	r2, r2, #26
 800396a:	d430      	bmi.n	80039ce <_printf_common+0xba>
 800396c:	4641      	mov	r1, r8
 800396e:	4638      	mov	r0, r7
 8003970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003974:	47c8      	blx	r9
 8003976:	3001      	adds	r0, #1
 8003978:	d023      	beq.n	80039c2 <_printf_common+0xae>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	f003 0306 	and.w	r3, r3, #6
 8003982:	2b04      	cmp	r3, #4
 8003984:	bf14      	ite	ne
 8003986:	2500      	movne	r5, #0
 8003988:	6833      	ldreq	r3, [r6, #0]
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	bf08      	it	eq
 8003990:	68e5      	ldreq	r5, [r4, #12]
 8003992:	f104 041a 	add.w	r4, r4, #26
 8003996:	bf08      	it	eq
 8003998:	1aed      	subeq	r5, r5, r3
 800399a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800399e:	bf08      	it	eq
 80039a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039a4:	4293      	cmp	r3, r2
 80039a6:	bfc4      	itt	gt
 80039a8:	1a9b      	subgt	r3, r3, r2
 80039aa:	18ed      	addgt	r5, r5, r3
 80039ac:	42b5      	cmp	r5, r6
 80039ae:	d11a      	bne.n	80039e6 <_printf_common+0xd2>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e008      	b.n	80039c6 <_printf_common+0xb2>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4652      	mov	r2, sl
 80039b8:	4641      	mov	r1, r8
 80039ba:	4638      	mov	r0, r7
 80039bc:	47c8      	blx	r9
 80039be:	3001      	adds	r0, #1
 80039c0:	d103      	bne.n	80039ca <_printf_common+0xb6>
 80039c2:	f04f 30ff 	mov.w	r0, #4294967295
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ca:	3501      	adds	r5, #1
 80039cc:	e7c1      	b.n	8003952 <_printf_common+0x3e>
 80039ce:	2030      	movs	r0, #48	@ 0x30
 80039d0:	18e1      	adds	r1, r4, r3
 80039d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039dc:	4422      	add	r2, r4
 80039de:	3302      	adds	r3, #2
 80039e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039e4:	e7c2      	b.n	800396c <_printf_common+0x58>
 80039e6:	2301      	movs	r3, #1
 80039e8:	4622      	mov	r2, r4
 80039ea:	4641      	mov	r1, r8
 80039ec:	4638      	mov	r0, r7
 80039ee:	47c8      	blx	r9
 80039f0:	3001      	adds	r0, #1
 80039f2:	d0e6      	beq.n	80039c2 <_printf_common+0xae>
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7d9      	b.n	80039ac <_printf_common+0x98>

080039f8 <_printf_i>:
 80039f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	7e0f      	ldrb	r7, [r1, #24]
 80039fe:	4691      	mov	r9, r2
 8003a00:	2f78      	cmp	r7, #120	@ 0x78
 8003a02:	4680      	mov	r8, r0
 8003a04:	460c      	mov	r4, r1
 8003a06:	469a      	mov	sl, r3
 8003a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a0e:	d807      	bhi.n	8003a20 <_printf_i+0x28>
 8003a10:	2f62      	cmp	r7, #98	@ 0x62
 8003a12:	d80a      	bhi.n	8003a2a <_printf_i+0x32>
 8003a14:	2f00      	cmp	r7, #0
 8003a16:	f000 80d1 	beq.w	8003bbc <_printf_i+0x1c4>
 8003a1a:	2f58      	cmp	r7, #88	@ 0x58
 8003a1c:	f000 80b8 	beq.w	8003b90 <_printf_i+0x198>
 8003a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a28:	e03a      	b.n	8003aa0 <_printf_i+0xa8>
 8003a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a2e:	2b15      	cmp	r3, #21
 8003a30:	d8f6      	bhi.n	8003a20 <_printf_i+0x28>
 8003a32:	a101      	add	r1, pc, #4	@ (adr r1, 8003a38 <_printf_i+0x40>)
 8003a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	08003aa5 	.word	0x08003aa5
 8003a40:	08003a21 	.word	0x08003a21
 8003a44:	08003a21 	.word	0x08003a21
 8003a48:	08003a21 	.word	0x08003a21
 8003a4c:	08003a21 	.word	0x08003a21
 8003a50:	08003aa5 	.word	0x08003aa5
 8003a54:	08003a21 	.word	0x08003a21
 8003a58:	08003a21 	.word	0x08003a21
 8003a5c:	08003a21 	.word	0x08003a21
 8003a60:	08003a21 	.word	0x08003a21
 8003a64:	08003ba3 	.word	0x08003ba3
 8003a68:	08003acf 	.word	0x08003acf
 8003a6c:	08003b5d 	.word	0x08003b5d
 8003a70:	08003a21 	.word	0x08003a21
 8003a74:	08003a21 	.word	0x08003a21
 8003a78:	08003bc5 	.word	0x08003bc5
 8003a7c:	08003a21 	.word	0x08003a21
 8003a80:	08003acf 	.word	0x08003acf
 8003a84:	08003a21 	.word	0x08003a21
 8003a88:	08003a21 	.word	0x08003a21
 8003a8c:	08003b65 	.word	0x08003b65
 8003a90:	6833      	ldr	r3, [r6, #0]
 8003a92:	1d1a      	adds	r2, r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6032      	str	r2, [r6, #0]
 8003a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e09c      	b.n	8003bde <_printf_i+0x1e6>
 8003aa4:	6833      	ldr	r3, [r6, #0]
 8003aa6:	6820      	ldr	r0, [r4, #0]
 8003aa8:	1d19      	adds	r1, r3, #4
 8003aaa:	6031      	str	r1, [r6, #0]
 8003aac:	0606      	lsls	r6, r0, #24
 8003aae:	d501      	bpl.n	8003ab4 <_printf_i+0xbc>
 8003ab0:	681d      	ldr	r5, [r3, #0]
 8003ab2:	e003      	b.n	8003abc <_printf_i+0xc4>
 8003ab4:	0645      	lsls	r5, r0, #25
 8003ab6:	d5fb      	bpl.n	8003ab0 <_printf_i+0xb8>
 8003ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003abc:	2d00      	cmp	r5, #0
 8003abe:	da03      	bge.n	8003ac8 <_printf_i+0xd0>
 8003ac0:	232d      	movs	r3, #45	@ 0x2d
 8003ac2:	426d      	negs	r5, r5
 8003ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ac8:	230a      	movs	r3, #10
 8003aca:	4858      	ldr	r0, [pc, #352]	@ (8003c2c <_printf_i+0x234>)
 8003acc:	e011      	b.n	8003af2 <_printf_i+0xfa>
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	6833      	ldr	r3, [r6, #0]
 8003ad2:	0608      	lsls	r0, r1, #24
 8003ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ad8:	d402      	bmi.n	8003ae0 <_printf_i+0xe8>
 8003ada:	0649      	lsls	r1, r1, #25
 8003adc:	bf48      	it	mi
 8003ade:	b2ad      	uxthmi	r5, r5
 8003ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ae2:	6033      	str	r3, [r6, #0]
 8003ae4:	bf14      	ite	ne
 8003ae6:	230a      	movne	r3, #10
 8003ae8:	2308      	moveq	r3, #8
 8003aea:	4850      	ldr	r0, [pc, #320]	@ (8003c2c <_printf_i+0x234>)
 8003aec:	2100      	movs	r1, #0
 8003aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003af2:	6866      	ldr	r6, [r4, #4]
 8003af4:	2e00      	cmp	r6, #0
 8003af6:	60a6      	str	r6, [r4, #8]
 8003af8:	db05      	blt.n	8003b06 <_printf_i+0x10e>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	432e      	orrs	r6, r5
 8003afe:	f021 0104 	bic.w	r1, r1, #4
 8003b02:	6021      	str	r1, [r4, #0]
 8003b04:	d04b      	beq.n	8003b9e <_printf_i+0x1a6>
 8003b06:	4616      	mov	r6, r2
 8003b08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003b10:	5dc7      	ldrb	r7, [r0, r7]
 8003b12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b16:	462f      	mov	r7, r5
 8003b18:	42bb      	cmp	r3, r7
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	d9f4      	bls.n	8003b08 <_printf_i+0x110>
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d10b      	bne.n	8003b3a <_printf_i+0x142>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	07df      	lsls	r7, r3, #31
 8003b26:	d508      	bpl.n	8003b3a <_printf_i+0x142>
 8003b28:	6923      	ldr	r3, [r4, #16]
 8003b2a:	6861      	ldr	r1, [r4, #4]
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	bfde      	ittt	le
 8003b30:	2330      	movle	r3, #48	@ 0x30
 8003b32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b3a:	1b92      	subs	r2, r2, r6
 8003b3c:	6122      	str	r2, [r4, #16]
 8003b3e:	464b      	mov	r3, r9
 8003b40:	4621      	mov	r1, r4
 8003b42:	4640      	mov	r0, r8
 8003b44:	f8cd a000 	str.w	sl, [sp]
 8003b48:	aa03      	add	r2, sp, #12
 8003b4a:	f7ff fee3 	bl	8003914 <_printf_common>
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d14a      	bne.n	8003be8 <_printf_i+0x1f0>
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	b004      	add	sp, #16
 8003b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f043 0320 	orr.w	r3, r3, #32
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	2778      	movs	r7, #120	@ 0x78
 8003b66:	4832      	ldr	r0, [pc, #200]	@ (8003c30 <_printf_i+0x238>)
 8003b68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	6831      	ldr	r1, [r6, #0]
 8003b70:	061f      	lsls	r7, r3, #24
 8003b72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b76:	d402      	bmi.n	8003b7e <_printf_i+0x186>
 8003b78:	065f      	lsls	r7, r3, #25
 8003b7a:	bf48      	it	mi
 8003b7c:	b2ad      	uxthmi	r5, r5
 8003b7e:	6031      	str	r1, [r6, #0]
 8003b80:	07d9      	lsls	r1, r3, #31
 8003b82:	bf44      	itt	mi
 8003b84:	f043 0320 	orrmi.w	r3, r3, #32
 8003b88:	6023      	strmi	r3, [r4, #0]
 8003b8a:	b11d      	cbz	r5, 8003b94 <_printf_i+0x19c>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	e7ad      	b.n	8003aec <_printf_i+0xf4>
 8003b90:	4826      	ldr	r0, [pc, #152]	@ (8003c2c <_printf_i+0x234>)
 8003b92:	e7e9      	b.n	8003b68 <_printf_i+0x170>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	f023 0320 	bic.w	r3, r3, #32
 8003b9a:	6023      	str	r3, [r4, #0]
 8003b9c:	e7f6      	b.n	8003b8c <_printf_i+0x194>
 8003b9e:	4616      	mov	r6, r2
 8003ba0:	e7bd      	b.n	8003b1e <_printf_i+0x126>
 8003ba2:	6833      	ldr	r3, [r6, #0]
 8003ba4:	6825      	ldr	r5, [r4, #0]
 8003ba6:	1d18      	adds	r0, r3, #4
 8003ba8:	6961      	ldr	r1, [r4, #20]
 8003baa:	6030      	str	r0, [r6, #0]
 8003bac:	062e      	lsls	r6, r5, #24
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	d501      	bpl.n	8003bb6 <_printf_i+0x1be>
 8003bb2:	6019      	str	r1, [r3, #0]
 8003bb4:	e002      	b.n	8003bbc <_printf_i+0x1c4>
 8003bb6:	0668      	lsls	r0, r5, #25
 8003bb8:	d5fb      	bpl.n	8003bb2 <_printf_i+0x1ba>
 8003bba:	8019      	strh	r1, [r3, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4616      	mov	r6, r2
 8003bc0:	6123      	str	r3, [r4, #16]
 8003bc2:	e7bc      	b.n	8003b3e <_printf_i+0x146>
 8003bc4:	6833      	ldr	r3, [r6, #0]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	1d1a      	adds	r2, r3, #4
 8003bca:	6032      	str	r2, [r6, #0]
 8003bcc:	681e      	ldr	r6, [r3, #0]
 8003bce:	6862      	ldr	r2, [r4, #4]
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 fbe0 	bl	8004396 <memchr>
 8003bd6:	b108      	cbz	r0, 8003bdc <_printf_i+0x1e4>
 8003bd8:	1b80      	subs	r0, r0, r6
 8003bda:	6060      	str	r0, [r4, #4]
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	6123      	str	r3, [r4, #16]
 8003be0:	2300      	movs	r3, #0
 8003be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003be6:	e7aa      	b.n	8003b3e <_printf_i+0x146>
 8003be8:	4632      	mov	r2, r6
 8003bea:	4649      	mov	r1, r9
 8003bec:	4640      	mov	r0, r8
 8003bee:	6923      	ldr	r3, [r4, #16]
 8003bf0:	47d0      	blx	sl
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d0ad      	beq.n	8003b52 <_printf_i+0x15a>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	079b      	lsls	r3, r3, #30
 8003bfa:	d413      	bmi.n	8003c24 <_printf_i+0x22c>
 8003bfc:	68e0      	ldr	r0, [r4, #12]
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	4298      	cmp	r0, r3
 8003c02:	bfb8      	it	lt
 8003c04:	4618      	movlt	r0, r3
 8003c06:	e7a6      	b.n	8003b56 <_printf_i+0x15e>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	4632      	mov	r2, r6
 8003c0c:	4649      	mov	r1, r9
 8003c0e:	4640      	mov	r0, r8
 8003c10:	47d0      	blx	sl
 8003c12:	3001      	adds	r0, #1
 8003c14:	d09d      	beq.n	8003b52 <_printf_i+0x15a>
 8003c16:	3501      	adds	r5, #1
 8003c18:	68e3      	ldr	r3, [r4, #12]
 8003c1a:	9903      	ldr	r1, [sp, #12]
 8003c1c:	1a5b      	subs	r3, r3, r1
 8003c1e:	42ab      	cmp	r3, r5
 8003c20:	dcf2      	bgt.n	8003c08 <_printf_i+0x210>
 8003c22:	e7eb      	b.n	8003bfc <_printf_i+0x204>
 8003c24:	2500      	movs	r5, #0
 8003c26:	f104 0619 	add.w	r6, r4, #25
 8003c2a:	e7f5      	b.n	8003c18 <_printf_i+0x220>
 8003c2c:	08007a84 	.word	0x08007a84
 8003c30:	08007a95 	.word	0x08007a95

08003c34 <_scanf_float>:
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	b087      	sub	sp, #28
 8003c3a:	9303      	str	r3, [sp, #12]
 8003c3c:	688b      	ldr	r3, [r1, #8]
 8003c3e:	4691      	mov	r9, r2
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003c46:	bf82      	ittt	hi
 8003c48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003c4c:	eb03 0b05 	addhi.w	fp, r3, r5
 8003c50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003c54:	460a      	mov	r2, r1
 8003c56:	f04f 0500 	mov.w	r5, #0
 8003c5a:	bf88      	it	hi
 8003c5c:	608b      	strhi	r3, [r1, #8]
 8003c5e:	680b      	ldr	r3, [r1, #0]
 8003c60:	4680      	mov	r8, r0
 8003c62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003c66:	f842 3b1c 	str.w	r3, [r2], #28
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	bf98      	it	ls
 8003c6e:	f04f 0b00 	movls.w	fp, #0
 8003c72:	4616      	mov	r6, r2
 8003c74:	46aa      	mov	sl, r5
 8003c76:	462f      	mov	r7, r5
 8003c78:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003c7c:	9201      	str	r2, [sp, #4]
 8003c7e:	9502      	str	r5, [sp, #8]
 8003c80:	68a2      	ldr	r2, [r4, #8]
 8003c82:	b15a      	cbz	r2, 8003c9c <_scanf_float+0x68>
 8003c84:	f8d9 3000 	ldr.w	r3, [r9]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c8c:	d862      	bhi.n	8003d54 <_scanf_float+0x120>
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d83a      	bhi.n	8003d08 <_scanf_float+0xd4>
 8003c92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003c96:	b2c8      	uxtb	r0, r1
 8003c98:	280e      	cmp	r0, #14
 8003c9a:	d938      	bls.n	8003d0e <_scanf_float+0xda>
 8003c9c:	b11f      	cbz	r7, 8003ca6 <_scanf_float+0x72>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003caa:	f1ba 0f01 	cmp.w	sl, #1
 8003cae:	f200 8114 	bhi.w	8003eda <_scanf_float+0x2a6>
 8003cb2:	9b01      	ldr	r3, [sp, #4]
 8003cb4:	429e      	cmp	r6, r3
 8003cb6:	f200 8105 	bhi.w	8003ec4 <_scanf_float+0x290>
 8003cba:	2001      	movs	r0, #1
 8003cbc:	b007      	add	sp, #28
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003cc6:	2a0d      	cmp	r2, #13
 8003cc8:	d8e8      	bhi.n	8003c9c <_scanf_float+0x68>
 8003cca:	a101      	add	r1, pc, #4	@ (adr r1, 8003cd0 <_scanf_float+0x9c>)
 8003ccc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003cd0:	08003e19 	.word	0x08003e19
 8003cd4:	08003c9d 	.word	0x08003c9d
 8003cd8:	08003c9d 	.word	0x08003c9d
 8003cdc:	08003c9d 	.word	0x08003c9d
 8003ce0:	08003e75 	.word	0x08003e75
 8003ce4:	08003e4f 	.word	0x08003e4f
 8003ce8:	08003c9d 	.word	0x08003c9d
 8003cec:	08003c9d 	.word	0x08003c9d
 8003cf0:	08003e27 	.word	0x08003e27
 8003cf4:	08003c9d 	.word	0x08003c9d
 8003cf8:	08003c9d 	.word	0x08003c9d
 8003cfc:	08003c9d 	.word	0x08003c9d
 8003d00:	08003c9d 	.word	0x08003c9d
 8003d04:	08003de3 	.word	0x08003de3
 8003d08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003d0c:	e7db      	b.n	8003cc6 <_scanf_float+0x92>
 8003d0e:	290e      	cmp	r1, #14
 8003d10:	d8c4      	bhi.n	8003c9c <_scanf_float+0x68>
 8003d12:	a001      	add	r0, pc, #4	@ (adr r0, 8003d18 <_scanf_float+0xe4>)
 8003d14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003d18:	08003dd3 	.word	0x08003dd3
 8003d1c:	08003c9d 	.word	0x08003c9d
 8003d20:	08003dd3 	.word	0x08003dd3
 8003d24:	08003e63 	.word	0x08003e63
 8003d28:	08003c9d 	.word	0x08003c9d
 8003d2c:	08003d75 	.word	0x08003d75
 8003d30:	08003db9 	.word	0x08003db9
 8003d34:	08003db9 	.word	0x08003db9
 8003d38:	08003db9 	.word	0x08003db9
 8003d3c:	08003db9 	.word	0x08003db9
 8003d40:	08003db9 	.word	0x08003db9
 8003d44:	08003db9 	.word	0x08003db9
 8003d48:	08003db9 	.word	0x08003db9
 8003d4c:	08003db9 	.word	0x08003db9
 8003d50:	08003db9 	.word	0x08003db9
 8003d54:	2b6e      	cmp	r3, #110	@ 0x6e
 8003d56:	d809      	bhi.n	8003d6c <_scanf_float+0x138>
 8003d58:	2b60      	cmp	r3, #96	@ 0x60
 8003d5a:	d8b2      	bhi.n	8003cc2 <_scanf_float+0x8e>
 8003d5c:	2b54      	cmp	r3, #84	@ 0x54
 8003d5e:	d07b      	beq.n	8003e58 <_scanf_float+0x224>
 8003d60:	2b59      	cmp	r3, #89	@ 0x59
 8003d62:	d19b      	bne.n	8003c9c <_scanf_float+0x68>
 8003d64:	2d07      	cmp	r5, #7
 8003d66:	d199      	bne.n	8003c9c <_scanf_float+0x68>
 8003d68:	2508      	movs	r5, #8
 8003d6a:	e02f      	b.n	8003dcc <_scanf_float+0x198>
 8003d6c:	2b74      	cmp	r3, #116	@ 0x74
 8003d6e:	d073      	beq.n	8003e58 <_scanf_float+0x224>
 8003d70:	2b79      	cmp	r3, #121	@ 0x79
 8003d72:	e7f6      	b.n	8003d62 <_scanf_float+0x12e>
 8003d74:	6821      	ldr	r1, [r4, #0]
 8003d76:	05c8      	lsls	r0, r1, #23
 8003d78:	d51e      	bpl.n	8003db8 <_scanf_float+0x184>
 8003d7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003d7e:	6021      	str	r1, [r4, #0]
 8003d80:	3701      	adds	r7, #1
 8003d82:	f1bb 0f00 	cmp.w	fp, #0
 8003d86:	d003      	beq.n	8003d90 <_scanf_float+0x15c>
 8003d88:	3201      	adds	r2, #1
 8003d8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d8e:	60a2      	str	r2, [r4, #8]
 8003d90:	68a3      	ldr	r3, [r4, #8]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60a3      	str	r3, [r4, #8]
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	6123      	str	r3, [r4, #16]
 8003d9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f8c9 3004 	str.w	r3, [r9, #4]
 8003da8:	f340 8083 	ble.w	8003eb2 <_scanf_float+0x27e>
 8003dac:	f8d9 3000 	ldr.w	r3, [r9]
 8003db0:	3301      	adds	r3, #1
 8003db2:	f8c9 3000 	str.w	r3, [r9]
 8003db6:	e763      	b.n	8003c80 <_scanf_float+0x4c>
 8003db8:	eb1a 0105 	adds.w	r1, sl, r5
 8003dbc:	f47f af6e 	bne.w	8003c9c <_scanf_float+0x68>
 8003dc0:	460d      	mov	r5, r1
 8003dc2:	468a      	mov	sl, r1
 8003dc4:	6822      	ldr	r2, [r4, #0]
 8003dc6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003dca:	6022      	str	r2, [r4, #0]
 8003dcc:	f806 3b01 	strb.w	r3, [r6], #1
 8003dd0:	e7de      	b.n	8003d90 <_scanf_float+0x15c>
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	0610      	lsls	r0, r2, #24
 8003dd6:	f57f af61 	bpl.w	8003c9c <_scanf_float+0x68>
 8003dda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dde:	6022      	str	r2, [r4, #0]
 8003de0:	e7f4      	b.n	8003dcc <_scanf_float+0x198>
 8003de2:	f1ba 0f00 	cmp.w	sl, #0
 8003de6:	d10c      	bne.n	8003e02 <_scanf_float+0x1ce>
 8003de8:	b977      	cbnz	r7, 8003e08 <_scanf_float+0x1d4>
 8003dea:	6822      	ldr	r2, [r4, #0]
 8003dec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003df0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003df4:	d108      	bne.n	8003e08 <_scanf_float+0x1d4>
 8003df6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003dfa:	f04f 0a01 	mov.w	sl, #1
 8003dfe:	6022      	str	r2, [r4, #0]
 8003e00:	e7e4      	b.n	8003dcc <_scanf_float+0x198>
 8003e02:	f1ba 0f02 	cmp.w	sl, #2
 8003e06:	d051      	beq.n	8003eac <_scanf_float+0x278>
 8003e08:	2d01      	cmp	r5, #1
 8003e0a:	d002      	beq.n	8003e12 <_scanf_float+0x1de>
 8003e0c:	2d04      	cmp	r5, #4
 8003e0e:	f47f af45 	bne.w	8003c9c <_scanf_float+0x68>
 8003e12:	3501      	adds	r5, #1
 8003e14:	b2ed      	uxtb	r5, r5
 8003e16:	e7d9      	b.n	8003dcc <_scanf_float+0x198>
 8003e18:	f1ba 0f01 	cmp.w	sl, #1
 8003e1c:	f47f af3e 	bne.w	8003c9c <_scanf_float+0x68>
 8003e20:	f04f 0a02 	mov.w	sl, #2
 8003e24:	e7d2      	b.n	8003dcc <_scanf_float+0x198>
 8003e26:	b975      	cbnz	r5, 8003e46 <_scanf_float+0x212>
 8003e28:	2f00      	cmp	r7, #0
 8003e2a:	f47f af38 	bne.w	8003c9e <_scanf_float+0x6a>
 8003e2e:	6822      	ldr	r2, [r4, #0]
 8003e30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003e34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003e38:	f040 80ff 	bne.w	800403a <_scanf_float+0x406>
 8003e3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003e40:	2501      	movs	r5, #1
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	e7c2      	b.n	8003dcc <_scanf_float+0x198>
 8003e46:	2d03      	cmp	r5, #3
 8003e48:	d0e3      	beq.n	8003e12 <_scanf_float+0x1de>
 8003e4a:	2d05      	cmp	r5, #5
 8003e4c:	e7df      	b.n	8003e0e <_scanf_float+0x1da>
 8003e4e:	2d02      	cmp	r5, #2
 8003e50:	f47f af24 	bne.w	8003c9c <_scanf_float+0x68>
 8003e54:	2503      	movs	r5, #3
 8003e56:	e7b9      	b.n	8003dcc <_scanf_float+0x198>
 8003e58:	2d06      	cmp	r5, #6
 8003e5a:	f47f af1f 	bne.w	8003c9c <_scanf_float+0x68>
 8003e5e:	2507      	movs	r5, #7
 8003e60:	e7b4      	b.n	8003dcc <_scanf_float+0x198>
 8003e62:	6822      	ldr	r2, [r4, #0]
 8003e64:	0591      	lsls	r1, r2, #22
 8003e66:	f57f af19 	bpl.w	8003c9c <_scanf_float+0x68>
 8003e6a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003e6e:	6022      	str	r2, [r4, #0]
 8003e70:	9702      	str	r7, [sp, #8]
 8003e72:	e7ab      	b.n	8003dcc <_scanf_float+0x198>
 8003e74:	6822      	ldr	r2, [r4, #0]
 8003e76:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003e7a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003e7e:	d005      	beq.n	8003e8c <_scanf_float+0x258>
 8003e80:	0550      	lsls	r0, r2, #21
 8003e82:	f57f af0b 	bpl.w	8003c9c <_scanf_float+0x68>
 8003e86:	2f00      	cmp	r7, #0
 8003e88:	f000 80d7 	beq.w	800403a <_scanf_float+0x406>
 8003e8c:	0591      	lsls	r1, r2, #22
 8003e8e:	bf58      	it	pl
 8003e90:	9902      	ldrpl	r1, [sp, #8]
 8003e92:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003e96:	bf58      	it	pl
 8003e98:	1a79      	subpl	r1, r7, r1
 8003e9a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003e9e:	f04f 0700 	mov.w	r7, #0
 8003ea2:	bf58      	it	pl
 8003ea4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003ea8:	6022      	str	r2, [r4, #0]
 8003eaa:	e78f      	b.n	8003dcc <_scanf_float+0x198>
 8003eac:	f04f 0a03 	mov.w	sl, #3
 8003eb0:	e78c      	b.n	8003dcc <_scanf_float+0x198>
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	4640      	mov	r0, r8
 8003eb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003eba:	4798      	blx	r3
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	f43f aedf 	beq.w	8003c80 <_scanf_float+0x4c>
 8003ec2:	e6eb      	b.n	8003c9c <_scanf_float+0x68>
 8003ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ec8:	464a      	mov	r2, r9
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ed0:	4798      	blx	r3
 8003ed2:	6923      	ldr	r3, [r4, #16]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	6123      	str	r3, [r4, #16]
 8003ed8:	e6eb      	b.n	8003cb2 <_scanf_float+0x7e>
 8003eda:	1e6b      	subs	r3, r5, #1
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d824      	bhi.n	8003f2a <_scanf_float+0x2f6>
 8003ee0:	2d02      	cmp	r5, #2
 8003ee2:	d836      	bhi.n	8003f52 <_scanf_float+0x31e>
 8003ee4:	9b01      	ldr	r3, [sp, #4]
 8003ee6:	429e      	cmp	r6, r3
 8003ee8:	f67f aee7 	bls.w	8003cba <_scanf_float+0x86>
 8003eec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003ef0:	464a      	mov	r2, r9
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ef8:	4798      	blx	r3
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	6123      	str	r3, [r4, #16]
 8003f00:	e7f0      	b.n	8003ee4 <_scanf_float+0x2b0>
 8003f02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f06:	464a      	mov	r2, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003f0e:	4798      	blx	r3
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	6123      	str	r3, [r4, #16]
 8003f16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f1a:	fa5f fa8a 	uxtb.w	sl, sl
 8003f1e:	f1ba 0f02 	cmp.w	sl, #2
 8003f22:	d1ee      	bne.n	8003f02 <_scanf_float+0x2ce>
 8003f24:	3d03      	subs	r5, #3
 8003f26:	b2ed      	uxtb	r5, r5
 8003f28:	1b76      	subs	r6, r6, r5
 8003f2a:	6823      	ldr	r3, [r4, #0]
 8003f2c:	05da      	lsls	r2, r3, #23
 8003f2e:	d530      	bpl.n	8003f92 <_scanf_float+0x35e>
 8003f30:	055b      	lsls	r3, r3, #21
 8003f32:	d511      	bpl.n	8003f58 <_scanf_float+0x324>
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	429e      	cmp	r6, r3
 8003f38:	f67f aebf 	bls.w	8003cba <_scanf_float+0x86>
 8003f3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f40:	464a      	mov	r2, r9
 8003f42:	4640      	mov	r0, r8
 8003f44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003f48:	4798      	blx	r3
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	6123      	str	r3, [r4, #16]
 8003f50:	e7f0      	b.n	8003f34 <_scanf_float+0x300>
 8003f52:	46aa      	mov	sl, r5
 8003f54:	46b3      	mov	fp, r6
 8003f56:	e7de      	b.n	8003f16 <_scanf_float+0x2e2>
 8003f58:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003f5c:	6923      	ldr	r3, [r4, #16]
 8003f5e:	2965      	cmp	r1, #101	@ 0x65
 8003f60:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f64:	f106 35ff 	add.w	r5, r6, #4294967295
 8003f68:	6123      	str	r3, [r4, #16]
 8003f6a:	d00c      	beq.n	8003f86 <_scanf_float+0x352>
 8003f6c:	2945      	cmp	r1, #69	@ 0x45
 8003f6e:	d00a      	beq.n	8003f86 <_scanf_float+0x352>
 8003f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f74:	464a      	mov	r2, r9
 8003f76:	4640      	mov	r0, r8
 8003f78:	4798      	blx	r3
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	1eb5      	subs	r5, r6, #2
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	464a      	mov	r2, r9
 8003f88:	4640      	mov	r0, r8
 8003f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003f8e:	4798      	blx	r3
 8003f90:	462e      	mov	r6, r5
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	f012 0210 	ands.w	r2, r2, #16
 8003f98:	d001      	beq.n	8003f9e <_scanf_float+0x36a>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e68e      	b.n	8003cbc <_scanf_float+0x88>
 8003f9e:	7032      	strb	r2, [r6, #0]
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d125      	bne.n	8003ff8 <_scanf_float+0x3c4>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	429f      	cmp	r7, r3
 8003fb0:	d00a      	beq.n	8003fc8 <_scanf_float+0x394>
 8003fb2:	1bda      	subs	r2, r3, r7
 8003fb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003fb8:	429e      	cmp	r6, r3
 8003fba:	bf28      	it	cs
 8003fbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	491f      	ldr	r1, [pc, #124]	@ (8004040 <_scanf_float+0x40c>)
 8003fc4:	f000 f902 	bl	80041cc <siprintf>
 8003fc8:	2200      	movs	r2, #0
 8003fca:	4640      	mov	r0, r8
 8003fcc:	9901      	ldr	r1, [sp, #4]
 8003fce:	f002 fbeb 	bl	80067a8 <_strtod_r>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	6825      	ldr	r5, [r4, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f015 0f02 	tst.w	r5, #2
 8003fdc:	4606      	mov	r6, r0
 8003fde:	460f      	mov	r7, r1
 8003fe0:	f103 0204 	add.w	r2, r3, #4
 8003fe4:	d015      	beq.n	8004012 <_scanf_float+0x3de>
 8003fe6:	9903      	ldr	r1, [sp, #12]
 8003fe8:	600a      	str	r2, [r1, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	e9c3 6700 	strd	r6, r7, [r3]
 8003ff0:	68e3      	ldr	r3, [r4, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60e3      	str	r3, [r4, #12]
 8003ff6:	e7d0      	b.n	8003f9a <_scanf_float+0x366>
 8003ff8:	9b04      	ldr	r3, [sp, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0e4      	beq.n	8003fc8 <_scanf_float+0x394>
 8003ffe:	9905      	ldr	r1, [sp, #20]
 8004000:	230a      	movs	r3, #10
 8004002:	4640      	mov	r0, r8
 8004004:	3101      	adds	r1, #1
 8004006:	f002 fc4f 	bl	80068a8 <_strtol_r>
 800400a:	9b04      	ldr	r3, [sp, #16]
 800400c:	9e05      	ldr	r6, [sp, #20]
 800400e:	1ac2      	subs	r2, r0, r3
 8004010:	e7d0      	b.n	8003fb4 <_scanf_float+0x380>
 8004012:	076d      	lsls	r5, r5, #29
 8004014:	d4e7      	bmi.n	8003fe6 <_scanf_float+0x3b2>
 8004016:	9d03      	ldr	r5, [sp, #12]
 8004018:	602a      	str	r2, [r5, #0]
 800401a:	681d      	ldr	r5, [r3, #0]
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	f7fc fcf4 	bl	8000a0c <__aeabi_dcmpun>
 8004024:	b120      	cbz	r0, 8004030 <_scanf_float+0x3fc>
 8004026:	4807      	ldr	r0, [pc, #28]	@ (8004044 <_scanf_float+0x410>)
 8004028:	f000 f9c4 	bl	80043b4 <nanf>
 800402c:	6028      	str	r0, [r5, #0]
 800402e:	e7df      	b.n	8003ff0 <_scanf_float+0x3bc>
 8004030:	4630      	mov	r0, r6
 8004032:	4639      	mov	r1, r7
 8004034:	f7fc fd48 	bl	8000ac8 <__aeabi_d2f>
 8004038:	e7f8      	b.n	800402c <_scanf_float+0x3f8>
 800403a:	2700      	movs	r7, #0
 800403c:	e633      	b.n	8003ca6 <_scanf_float+0x72>
 800403e:	bf00      	nop
 8004040:	08007aa6 	.word	0x08007aa6
 8004044:	08007be7 	.word	0x08007be7

08004048 <std>:
 8004048:	2300      	movs	r3, #0
 800404a:	b510      	push	{r4, lr}
 800404c:	4604      	mov	r4, r0
 800404e:	e9c0 3300 	strd	r3, r3, [r0]
 8004052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004056:	6083      	str	r3, [r0, #8]
 8004058:	8181      	strh	r1, [r0, #12]
 800405a:	6643      	str	r3, [r0, #100]	@ 0x64
 800405c:	81c2      	strh	r2, [r0, #14]
 800405e:	6183      	str	r3, [r0, #24]
 8004060:	4619      	mov	r1, r3
 8004062:	2208      	movs	r2, #8
 8004064:	305c      	adds	r0, #92	@ 0x5c
 8004066:	f000 f916 	bl	8004296 <memset>
 800406a:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <std+0x58>)
 800406c:	6224      	str	r4, [r4, #32]
 800406e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <std+0x5c>)
 8004072:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004074:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <std+0x60>)
 8004076:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004078:	4b0c      	ldr	r3, [pc, #48]	@ (80040ac <std+0x64>)
 800407a:	6323      	str	r3, [r4, #48]	@ 0x30
 800407c:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <std+0x68>)
 800407e:	429c      	cmp	r4, r3
 8004080:	d006      	beq.n	8004090 <std+0x48>
 8004082:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004086:	4294      	cmp	r4, r2
 8004088:	d002      	beq.n	8004090 <std+0x48>
 800408a:	33d0      	adds	r3, #208	@ 0xd0
 800408c:	429c      	cmp	r4, r3
 800408e:	d105      	bne.n	800409c <std+0x54>
 8004090:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004098:	f000 b97a 	b.w	8004390 <__retarget_lock_init_recursive>
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	08004211 	.word	0x08004211
 80040a4:	08004233 	.word	0x08004233
 80040a8:	0800426b 	.word	0x0800426b
 80040ac:	0800428f 	.word	0x0800428f
 80040b0:	2000027c 	.word	0x2000027c

080040b4 <stdio_exit_handler>:
 80040b4:	4a02      	ldr	r2, [pc, #8]	@ (80040c0 <stdio_exit_handler+0xc>)
 80040b6:	4903      	ldr	r1, [pc, #12]	@ (80040c4 <stdio_exit_handler+0x10>)
 80040b8:	4803      	ldr	r0, [pc, #12]	@ (80040c8 <stdio_exit_handler+0x14>)
 80040ba:	f000 b869 	b.w	8004190 <_fwalk_sglue>
 80040be:	bf00      	nop
 80040c0:	20000034 	.word	0x20000034
 80040c4:	08006c5d 	.word	0x08006c5d
 80040c8:	20000044 	.word	0x20000044

080040cc <cleanup_stdio>:
 80040cc:	6841      	ldr	r1, [r0, #4]
 80040ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004100 <cleanup_stdio+0x34>)
 80040d0:	b510      	push	{r4, lr}
 80040d2:	4299      	cmp	r1, r3
 80040d4:	4604      	mov	r4, r0
 80040d6:	d001      	beq.n	80040dc <cleanup_stdio+0x10>
 80040d8:	f002 fdc0 	bl	8006c5c <_fflush_r>
 80040dc:	68a1      	ldr	r1, [r4, #8]
 80040de:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <cleanup_stdio+0x38>)
 80040e0:	4299      	cmp	r1, r3
 80040e2:	d002      	beq.n	80040ea <cleanup_stdio+0x1e>
 80040e4:	4620      	mov	r0, r4
 80040e6:	f002 fdb9 	bl	8006c5c <_fflush_r>
 80040ea:	68e1      	ldr	r1, [r4, #12]
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <cleanup_stdio+0x3c>)
 80040ee:	4299      	cmp	r1, r3
 80040f0:	d004      	beq.n	80040fc <cleanup_stdio+0x30>
 80040f2:	4620      	mov	r0, r4
 80040f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040f8:	f002 bdb0 	b.w	8006c5c <_fflush_r>
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	bf00      	nop
 8004100:	2000027c 	.word	0x2000027c
 8004104:	200002e4 	.word	0x200002e4
 8004108:	2000034c 	.word	0x2000034c

0800410c <global_stdio_init.part.0>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <global_stdio_init.part.0+0x30>)
 8004110:	4c0b      	ldr	r4, [pc, #44]	@ (8004140 <global_stdio_init.part.0+0x34>)
 8004112:	4a0c      	ldr	r2, [pc, #48]	@ (8004144 <global_stdio_init.part.0+0x38>)
 8004114:	4620      	mov	r0, r4
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	2104      	movs	r1, #4
 800411a:	2200      	movs	r2, #0
 800411c:	f7ff ff94 	bl	8004048 <std>
 8004120:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004124:	2201      	movs	r2, #1
 8004126:	2109      	movs	r1, #9
 8004128:	f7ff ff8e 	bl	8004048 <std>
 800412c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004130:	2202      	movs	r2, #2
 8004132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004136:	2112      	movs	r1, #18
 8004138:	f7ff bf86 	b.w	8004048 <std>
 800413c:	200003b4 	.word	0x200003b4
 8004140:	2000027c 	.word	0x2000027c
 8004144:	080040b5 	.word	0x080040b5

08004148 <__sfp_lock_acquire>:
 8004148:	4801      	ldr	r0, [pc, #4]	@ (8004150 <__sfp_lock_acquire+0x8>)
 800414a:	f000 b922 	b.w	8004392 <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	200003bd 	.word	0x200003bd

08004154 <__sfp_lock_release>:
 8004154:	4801      	ldr	r0, [pc, #4]	@ (800415c <__sfp_lock_release+0x8>)
 8004156:	f000 b91d 	b.w	8004394 <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	200003bd 	.word	0x200003bd

08004160 <__sinit>:
 8004160:	b510      	push	{r4, lr}
 8004162:	4604      	mov	r4, r0
 8004164:	f7ff fff0 	bl	8004148 <__sfp_lock_acquire>
 8004168:	6a23      	ldr	r3, [r4, #32]
 800416a:	b11b      	cbz	r3, 8004174 <__sinit+0x14>
 800416c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004170:	f7ff bff0 	b.w	8004154 <__sfp_lock_release>
 8004174:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <__sinit+0x28>)
 8004176:	6223      	str	r3, [r4, #32]
 8004178:	4b04      	ldr	r3, [pc, #16]	@ (800418c <__sinit+0x2c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f5      	bne.n	800416c <__sinit+0xc>
 8004180:	f7ff ffc4 	bl	800410c <global_stdio_init.part.0>
 8004184:	e7f2      	b.n	800416c <__sinit+0xc>
 8004186:	bf00      	nop
 8004188:	080040cd 	.word	0x080040cd
 800418c:	200003b4 	.word	0x200003b4

08004190 <_fwalk_sglue>:
 8004190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004194:	4607      	mov	r7, r0
 8004196:	4688      	mov	r8, r1
 8004198:	4614      	mov	r4, r2
 800419a:	2600      	movs	r6, #0
 800419c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041a0:	f1b9 0901 	subs.w	r9, r9, #1
 80041a4:	d505      	bpl.n	80041b2 <_fwalk_sglue+0x22>
 80041a6:	6824      	ldr	r4, [r4, #0]
 80041a8:	2c00      	cmp	r4, #0
 80041aa:	d1f7      	bne.n	800419c <_fwalk_sglue+0xc>
 80041ac:	4630      	mov	r0, r6
 80041ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b2:	89ab      	ldrh	r3, [r5, #12]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d907      	bls.n	80041c8 <_fwalk_sglue+0x38>
 80041b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041bc:	3301      	adds	r3, #1
 80041be:	d003      	beq.n	80041c8 <_fwalk_sglue+0x38>
 80041c0:	4629      	mov	r1, r5
 80041c2:	4638      	mov	r0, r7
 80041c4:	47c0      	blx	r8
 80041c6:	4306      	orrs	r6, r0
 80041c8:	3568      	adds	r5, #104	@ 0x68
 80041ca:	e7e9      	b.n	80041a0 <_fwalk_sglue+0x10>

080041cc <siprintf>:
 80041cc:	b40e      	push	{r1, r2, r3}
 80041ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041d2:	b510      	push	{r4, lr}
 80041d4:	2400      	movs	r4, #0
 80041d6:	b09d      	sub	sp, #116	@ 0x74
 80041d8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80041da:	9002      	str	r0, [sp, #8]
 80041dc:	9006      	str	r0, [sp, #24]
 80041de:	9107      	str	r1, [sp, #28]
 80041e0:	9104      	str	r1, [sp, #16]
 80041e2:	4809      	ldr	r0, [pc, #36]	@ (8004208 <siprintf+0x3c>)
 80041e4:	4909      	ldr	r1, [pc, #36]	@ (800420c <siprintf+0x40>)
 80041e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ea:	9105      	str	r1, [sp, #20]
 80041ec:	6800      	ldr	r0, [r0, #0]
 80041ee:	a902      	add	r1, sp, #8
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80041f4:	f002 fbb6 	bl	8006964 <_svfiprintf_r>
 80041f8:	9b02      	ldr	r3, [sp, #8]
 80041fa:	701c      	strb	r4, [r3, #0]
 80041fc:	b01d      	add	sp, #116	@ 0x74
 80041fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004202:	b003      	add	sp, #12
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000040 	.word	0x20000040
 800420c:	ffff0208 	.word	0xffff0208

08004210 <__sread>:
 8004210:	b510      	push	{r4, lr}
 8004212:	460c      	mov	r4, r1
 8004214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004218:	f000 f86c 	bl	80042f4 <_read_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	bfab      	itete	ge
 8004220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004222:	89a3      	ldrhlt	r3, [r4, #12]
 8004224:	181b      	addge	r3, r3, r0
 8004226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800422a:	bfac      	ite	ge
 800422c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800422e:	81a3      	strhlt	r3, [r4, #12]
 8004230:	bd10      	pop	{r4, pc}

08004232 <__swrite>:
 8004232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004236:	461f      	mov	r7, r3
 8004238:	898b      	ldrh	r3, [r1, #12]
 800423a:	4605      	mov	r5, r0
 800423c:	05db      	lsls	r3, r3, #23
 800423e:	460c      	mov	r4, r1
 8004240:	4616      	mov	r6, r2
 8004242:	d505      	bpl.n	8004250 <__swrite+0x1e>
 8004244:	2302      	movs	r3, #2
 8004246:	2200      	movs	r2, #0
 8004248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800424c:	f000 f840 	bl	80042d0 <_lseek_r>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	4632      	mov	r2, r6
 8004254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	4628      	mov	r0, r5
 800425c:	463b      	mov	r3, r7
 800425e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004266:	f000 b857 	b.w	8004318 <_write_r>

0800426a <__sseek>:
 800426a:	b510      	push	{r4, lr}
 800426c:	460c      	mov	r4, r1
 800426e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004272:	f000 f82d 	bl	80042d0 <_lseek_r>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	89a3      	ldrh	r3, [r4, #12]
 800427a:	bf15      	itete	ne
 800427c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800427e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004286:	81a3      	strheq	r3, [r4, #12]
 8004288:	bf18      	it	ne
 800428a:	81a3      	strhne	r3, [r4, #12]
 800428c:	bd10      	pop	{r4, pc}

0800428e <__sclose>:
 800428e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004292:	f000 b80d 	b.w	80042b0 <_close_r>

08004296 <memset>:
 8004296:	4603      	mov	r3, r0
 8004298:	4402      	add	r2, r0
 800429a:	4293      	cmp	r3, r2
 800429c:	d100      	bne.n	80042a0 <memset+0xa>
 800429e:	4770      	bx	lr
 80042a0:	f803 1b01 	strb.w	r1, [r3], #1
 80042a4:	e7f9      	b.n	800429a <memset+0x4>
	...

080042a8 <_localeconv_r>:
 80042a8:	4800      	ldr	r0, [pc, #0]	@ (80042ac <_localeconv_r+0x4>)
 80042aa:	4770      	bx	lr
 80042ac:	20000180 	.word	0x20000180

080042b0 <_close_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	2300      	movs	r3, #0
 80042b4:	4d05      	ldr	r5, [pc, #20]	@ (80042cc <_close_r+0x1c>)
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7fd fb08 	bl	80018d0 <_close>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_close_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_close_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	200003b8 	.word	0x200003b8

080042d0 <_lseek_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	2200      	movs	r2, #0
 80042da:	4d05      	ldr	r5, [pc, #20]	@ (80042f0 <_lseek_r+0x20>)
 80042dc:	602a      	str	r2, [r5, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fd fb1a 	bl	8001918 <_lseek>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_lseek_r+0x1e>
 80042e8:	682b      	ldr	r3, [r5, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_lseek_r+0x1e>
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	200003b8 	.word	0x200003b8

080042f4 <_read_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	2200      	movs	r2, #0
 80042fe:	4d05      	ldr	r5, [pc, #20]	@ (8004314 <_read_r+0x20>)
 8004300:	602a      	str	r2, [r5, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	f7fd faab 	bl	800185e <_read>
 8004308:	1c43      	adds	r3, r0, #1
 800430a:	d102      	bne.n	8004312 <_read_r+0x1e>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	b103      	cbz	r3, 8004312 <_read_r+0x1e>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	bd38      	pop	{r3, r4, r5, pc}
 8004314:	200003b8 	.word	0x200003b8

08004318 <_write_r>:
 8004318:	b538      	push	{r3, r4, r5, lr}
 800431a:	4604      	mov	r4, r0
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	2200      	movs	r2, #0
 8004322:	4d05      	ldr	r5, [pc, #20]	@ (8004338 <_write_r+0x20>)
 8004324:	602a      	str	r2, [r5, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	f7fd fab6 	bl	8001898 <_write>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d102      	bne.n	8004336 <_write_r+0x1e>
 8004330:	682b      	ldr	r3, [r5, #0]
 8004332:	b103      	cbz	r3, 8004336 <_write_r+0x1e>
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	200003b8 	.word	0x200003b8

0800433c <__errno>:
 800433c:	4b01      	ldr	r3, [pc, #4]	@ (8004344 <__errno+0x8>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000040 	.word	0x20000040

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	2600      	movs	r6, #0
 800434c:	4d0c      	ldr	r5, [pc, #48]	@ (8004380 <__libc_init_array+0x38>)
 800434e:	4c0d      	ldr	r4, [pc, #52]	@ (8004384 <__libc_init_array+0x3c>)
 8004350:	1b64      	subs	r4, r4, r5
 8004352:	10a4      	asrs	r4, r4, #2
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	f003 fb6c 	bl	8007a34 <_init>
 800435c:	2600      	movs	r6, #0
 800435e:	4d0a      	ldr	r5, [pc, #40]	@ (8004388 <__libc_init_array+0x40>)
 8004360:	4c0a      	ldr	r4, [pc, #40]	@ (800438c <__libc_init_array+0x44>)
 8004362:	1b64      	subs	r4, r4, r5
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	08007ea4 	.word	0x08007ea4
 8004384:	08007ea4 	.word	0x08007ea4
 8004388:	08007ea4 	.word	0x08007ea4
 800438c:	08007ea8 	.word	0x08007ea8

08004390 <__retarget_lock_init_recursive>:
 8004390:	4770      	bx	lr

08004392 <__retarget_lock_acquire_recursive>:
 8004392:	4770      	bx	lr

08004394 <__retarget_lock_release_recursive>:
 8004394:	4770      	bx	lr

08004396 <memchr>:
 8004396:	4603      	mov	r3, r0
 8004398:	b510      	push	{r4, lr}
 800439a:	b2c9      	uxtb	r1, r1
 800439c:	4402      	add	r2, r0
 800439e:	4293      	cmp	r3, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	d101      	bne.n	80043a8 <memchr+0x12>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e003      	b.n	80043b0 <memchr+0x1a>
 80043a8:	7804      	ldrb	r4, [r0, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	428c      	cmp	r4, r1
 80043ae:	d1f6      	bne.n	800439e <memchr+0x8>
 80043b0:	bd10      	pop	{r4, pc}
	...

080043b4 <nanf>:
 80043b4:	4800      	ldr	r0, [pc, #0]	@ (80043b8 <nanf+0x4>)
 80043b6:	4770      	bx	lr
 80043b8:	7fc00000 	.word	0x7fc00000

080043bc <quorem>:
 80043bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c0:	6903      	ldr	r3, [r0, #16]
 80043c2:	690c      	ldr	r4, [r1, #16]
 80043c4:	4607      	mov	r7, r0
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	db7e      	blt.n	80044c8 <quorem+0x10c>
 80043ca:	3c01      	subs	r4, #1
 80043cc:	00a3      	lsls	r3, r4, #2
 80043ce:	f100 0514 	add.w	r5, r0, #20
 80043d2:	f101 0814 	add.w	r8, r1, #20
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043e6:	3301      	adds	r3, #1
 80043e8:	429a      	cmp	r2, r3
 80043ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80043ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043f2:	d32e      	bcc.n	8004452 <quorem+0x96>
 80043f4:	f04f 0a00 	mov.w	sl, #0
 80043f8:	46c4      	mov	ip, r8
 80043fa:	46ae      	mov	lr, r5
 80043fc:	46d3      	mov	fp, sl
 80043fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004402:	b298      	uxth	r0, r3
 8004404:	fb06 a000 	mla	r0, r6, r0, sl
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	0c02      	lsrs	r2, r0, #16
 800440c:	fb06 2303 	mla	r3, r6, r3, r2
 8004410:	f8de 2000 	ldr.w	r2, [lr]
 8004414:	b280      	uxth	r0, r0
 8004416:	b292      	uxth	r2, r2
 8004418:	1a12      	subs	r2, r2, r0
 800441a:	445a      	add	r2, fp
 800441c:	f8de 0000 	ldr.w	r0, [lr]
 8004420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004424:	b29b      	uxth	r3, r3
 8004426:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800442a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800442e:	b292      	uxth	r2, r2
 8004430:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004434:	45e1      	cmp	r9, ip
 8004436:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800443a:	f84e 2b04 	str.w	r2, [lr], #4
 800443e:	d2de      	bcs.n	80043fe <quorem+0x42>
 8004440:	9b00      	ldr	r3, [sp, #0]
 8004442:	58eb      	ldr	r3, [r5, r3]
 8004444:	b92b      	cbnz	r3, 8004452 <quorem+0x96>
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	3b04      	subs	r3, #4
 800444a:	429d      	cmp	r5, r3
 800444c:	461a      	mov	r2, r3
 800444e:	d32f      	bcc.n	80044b0 <quorem+0xf4>
 8004450:	613c      	str	r4, [r7, #16]
 8004452:	4638      	mov	r0, r7
 8004454:	f001 f9ca 	bl	80057ec <__mcmp>
 8004458:	2800      	cmp	r0, #0
 800445a:	db25      	blt.n	80044a8 <quorem+0xec>
 800445c:	4629      	mov	r1, r5
 800445e:	2000      	movs	r0, #0
 8004460:	f858 2b04 	ldr.w	r2, [r8], #4
 8004464:	f8d1 c000 	ldr.w	ip, [r1]
 8004468:	fa1f fe82 	uxth.w	lr, r2
 800446c:	fa1f f38c 	uxth.w	r3, ip
 8004470:	eba3 030e 	sub.w	r3, r3, lr
 8004474:	4403      	add	r3, r0
 8004476:	0c12      	lsrs	r2, r2, #16
 8004478:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800447c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004486:	45c1      	cmp	r9, r8
 8004488:	ea4f 4022 	mov.w	r0, r2, asr #16
 800448c:	f841 3b04 	str.w	r3, [r1], #4
 8004490:	d2e6      	bcs.n	8004460 <quorem+0xa4>
 8004492:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800449a:	b922      	cbnz	r2, 80044a6 <quorem+0xea>
 800449c:	3b04      	subs	r3, #4
 800449e:	429d      	cmp	r5, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	d30b      	bcc.n	80044bc <quorem+0x100>
 80044a4:	613c      	str	r4, [r7, #16]
 80044a6:	3601      	adds	r6, #1
 80044a8:	4630      	mov	r0, r6
 80044aa:	b003      	add	sp, #12
 80044ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d1cb      	bne.n	8004450 <quorem+0x94>
 80044b8:	3c01      	subs	r4, #1
 80044ba:	e7c6      	b.n	800444a <quorem+0x8e>
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	3b04      	subs	r3, #4
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	d1ef      	bne.n	80044a4 <quorem+0xe8>
 80044c4:	3c01      	subs	r4, #1
 80044c6:	e7ea      	b.n	800449e <quorem+0xe2>
 80044c8:	2000      	movs	r0, #0
 80044ca:	e7ee      	b.n	80044aa <quorem+0xee>
 80044cc:	0000      	movs	r0, r0
	...

080044d0 <_dtoa_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
 80044d8:	69c7      	ldr	r7, [r0, #28]
 80044da:	b097      	sub	sp, #92	@ 0x5c
 80044dc:	4681      	mov	r9, r0
 80044de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80044e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80044e4:	b97f      	cbnz	r7, 8004506 <_dtoa_r+0x36>
 80044e6:	2010      	movs	r0, #16
 80044e8:	f000 fe0e 	bl	8005108 <malloc>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f8c9 001c 	str.w	r0, [r9, #28]
 80044f2:	b920      	cbnz	r0, 80044fe <_dtoa_r+0x2e>
 80044f4:	21ef      	movs	r1, #239	@ 0xef
 80044f6:	4bac      	ldr	r3, [pc, #688]	@ (80047a8 <_dtoa_r+0x2d8>)
 80044f8:	48ac      	ldr	r0, [pc, #688]	@ (80047ac <_dtoa_r+0x2dc>)
 80044fa:	f002 fc27 	bl	8006d4c <__assert_func>
 80044fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004502:	6007      	str	r7, [r0, #0]
 8004504:	60c7      	str	r7, [r0, #12]
 8004506:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	b159      	cbz	r1, 8004526 <_dtoa_r+0x56>
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	2301      	movs	r3, #1
 8004512:	4093      	lsls	r3, r2
 8004514:	604a      	str	r2, [r1, #4]
 8004516:	608b      	str	r3, [r1, #8]
 8004518:	4648      	mov	r0, r9
 800451a:	f000 feeb 	bl	80052f4 <_Bfree>
 800451e:	2200      	movs	r2, #0
 8004520:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	1e2b      	subs	r3, r5, #0
 8004528:	bfaf      	iteee	ge
 800452a:	2300      	movge	r3, #0
 800452c:	2201      	movlt	r2, #1
 800452e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004532:	9307      	strlt	r3, [sp, #28]
 8004534:	bfa8      	it	ge
 8004536:	6033      	strge	r3, [r6, #0]
 8004538:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800453c:	4b9c      	ldr	r3, [pc, #624]	@ (80047b0 <_dtoa_r+0x2e0>)
 800453e:	bfb8      	it	lt
 8004540:	6032      	strlt	r2, [r6, #0]
 8004542:	ea33 0308 	bics.w	r3, r3, r8
 8004546:	d112      	bne.n	800456e <_dtoa_r+0x9e>
 8004548:	f242 730f 	movw	r3, #9999	@ 0x270f
 800454c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004554:	4323      	orrs	r3, r4
 8004556:	f000 855e 	beq.w	8005016 <_dtoa_r+0xb46>
 800455a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800455c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80047b4 <_dtoa_r+0x2e4>
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8560 	beq.w	8005026 <_dtoa_r+0xb56>
 8004566:	f10a 0303 	add.w	r3, sl, #3
 800456a:	f000 bd5a 	b.w	8005022 <_dtoa_r+0xb52>
 800456e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004572:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800457a:	2200      	movs	r2, #0
 800457c:	2300      	movs	r3, #0
 800457e:	f7fc fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8004582:	4607      	mov	r7, r0
 8004584:	b158      	cbz	r0, 800459e <_dtoa_r+0xce>
 8004586:	2301      	movs	r3, #1
 8004588:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800458e:	b113      	cbz	r3, 8004596 <_dtoa_r+0xc6>
 8004590:	4b89      	ldr	r3, [pc, #548]	@ (80047b8 <_dtoa_r+0x2e8>)
 8004592:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80047bc <_dtoa_r+0x2ec>
 800459a:	f000 bd44 	b.w	8005026 <_dtoa_r+0xb56>
 800459e:	ab14      	add	r3, sp, #80	@ 0x50
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	ab15      	add	r3, sp, #84	@ 0x54
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4648      	mov	r0, r9
 80045a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80045ac:	f001 fa36 	bl	8005a1c <__d2b>
 80045b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80045b4:	9003      	str	r0, [sp, #12]
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	d078      	beq.n	80046ac <_dtoa_r+0x1dc>
 80045ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80045d2:	4619      	mov	r1, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	4b7a      	ldr	r3, [pc, #488]	@ (80047c0 <_dtoa_r+0x2f0>)
 80045d8:	f7fb fdc6 	bl	8000168 <__aeabi_dsub>
 80045dc:	a36c      	add	r3, pc, #432	@ (adr r3, 8004790 <_dtoa_r+0x2c0>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fb ff79 	bl	80004d8 <__aeabi_dmul>
 80045e6:	a36c      	add	r3, pc, #432	@ (adr r3, 8004798 <_dtoa_r+0x2c8>)
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f7fb fdbe 	bl	800016c <__adddf3>
 80045f0:	4604      	mov	r4, r0
 80045f2:	4630      	mov	r0, r6
 80045f4:	460d      	mov	r5, r1
 80045f6:	f7fb ff05 	bl	8000404 <__aeabi_i2d>
 80045fa:	a369      	add	r3, pc, #420	@ (adr r3, 80047a0 <_dtoa_r+0x2d0>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fb ff6a 	bl	80004d8 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fdae 	bl	800016c <__adddf3>
 8004610:	4604      	mov	r4, r0
 8004612:	460d      	mov	r5, r1
 8004614:	f7fc fa10 	bl	8000a38 <__aeabi_d2iz>
 8004618:	2200      	movs	r2, #0
 800461a:	4607      	mov	r7, r0
 800461c:	2300      	movs	r3, #0
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fc f9cb 	bl	80009bc <__aeabi_dcmplt>
 8004626:	b140      	cbz	r0, 800463a <_dtoa_r+0x16a>
 8004628:	4638      	mov	r0, r7
 800462a:	f7fb feeb 	bl	8000404 <__aeabi_i2d>
 800462e:	4622      	mov	r2, r4
 8004630:	462b      	mov	r3, r5
 8004632:	f7fc f9b9 	bl	80009a8 <__aeabi_dcmpeq>
 8004636:	b900      	cbnz	r0, 800463a <_dtoa_r+0x16a>
 8004638:	3f01      	subs	r7, #1
 800463a:	2f16      	cmp	r7, #22
 800463c:	d854      	bhi.n	80046e8 <_dtoa_r+0x218>
 800463e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004642:	4b60      	ldr	r3, [pc, #384]	@ (80047c4 <_dtoa_r+0x2f4>)
 8004644:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fc f9b6 	bl	80009bc <__aeabi_dcmplt>
 8004650:	2800      	cmp	r0, #0
 8004652:	d04b      	beq.n	80046ec <_dtoa_r+0x21c>
 8004654:	2300      	movs	r3, #0
 8004656:	3f01      	subs	r7, #1
 8004658:	930f      	str	r3, [sp, #60]	@ 0x3c
 800465a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	bf49      	itett	mi
 8004662:	f1c3 0301 	rsbmi	r3, r3, #1
 8004666:	2300      	movpl	r3, #0
 8004668:	9304      	strmi	r3, [sp, #16]
 800466a:	2300      	movmi	r3, #0
 800466c:	9209      	str	r2, [sp, #36]	@ 0x24
 800466e:	bf54      	ite	pl
 8004670:	9304      	strpl	r3, [sp, #16]
 8004672:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004674:	2f00      	cmp	r7, #0
 8004676:	db3b      	blt.n	80046f0 <_dtoa_r+0x220>
 8004678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800467a:	970e      	str	r7, [sp, #56]	@ 0x38
 800467c:	443b      	add	r3, r7
 800467e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004680:	2300      	movs	r3, #0
 8004682:	930a      	str	r3, [sp, #40]	@ 0x28
 8004684:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004686:	2b09      	cmp	r3, #9
 8004688:	d865      	bhi.n	8004756 <_dtoa_r+0x286>
 800468a:	2b05      	cmp	r3, #5
 800468c:	bfc4      	itt	gt
 800468e:	3b04      	subgt	r3, #4
 8004690:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004692:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004694:	bfc8      	it	gt
 8004696:	2400      	movgt	r4, #0
 8004698:	f1a3 0302 	sub.w	r3, r3, #2
 800469c:	bfd8      	it	le
 800469e:	2401      	movle	r4, #1
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d864      	bhi.n	800476e <_dtoa_r+0x29e>
 80046a4:	e8df f003 	tbb	[pc, r3]
 80046a8:	2c385553 	.word	0x2c385553
 80046ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80046b0:	441e      	add	r6, r3
 80046b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	bfc1      	itttt	gt
 80046ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046be:	fa08 f803 	lslgt.w	r8, r8, r3
 80046c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046ca:	bfd6      	itet	le
 80046cc:	f1c3 0320 	rsble	r3, r3, #32
 80046d0:	ea48 0003 	orrgt.w	r0, r8, r3
 80046d4:	fa04 f003 	lslle.w	r0, r4, r3
 80046d8:	f7fb fe84 	bl	80003e4 <__aeabi_ui2d>
 80046dc:	2201      	movs	r2, #1
 80046de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046e2:	3e01      	subs	r6, #1
 80046e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80046e6:	e774      	b.n	80045d2 <_dtoa_r+0x102>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e7b5      	b.n	8004658 <_dtoa_r+0x188>
 80046ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046ee:	e7b4      	b.n	800465a <_dtoa_r+0x18a>
 80046f0:	9b04      	ldr	r3, [sp, #16]
 80046f2:	1bdb      	subs	r3, r3, r7
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	427b      	negs	r3, r7
 80046f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046fa:	2300      	movs	r3, #0
 80046fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80046fe:	e7c1      	b.n	8004684 <_dtoa_r+0x1b4>
 8004700:	2301      	movs	r3, #1
 8004702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004704:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004706:	eb07 0b03 	add.w	fp, r7, r3
 800470a:	f10b 0301 	add.w	r3, fp, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	9308      	str	r3, [sp, #32]
 8004712:	bfb8      	it	lt
 8004714:	2301      	movlt	r3, #1
 8004716:	e006      	b.n	8004726 <_dtoa_r+0x256>
 8004718:	2301      	movs	r3, #1
 800471a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800471c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800471e:	2b00      	cmp	r3, #0
 8004720:	dd28      	ble.n	8004774 <_dtoa_r+0x2a4>
 8004722:	469b      	mov	fp, r3
 8004724:	9308      	str	r3, [sp, #32]
 8004726:	2100      	movs	r1, #0
 8004728:	2204      	movs	r2, #4
 800472a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800472e:	f102 0514 	add.w	r5, r2, #20
 8004732:	429d      	cmp	r5, r3
 8004734:	d926      	bls.n	8004784 <_dtoa_r+0x2b4>
 8004736:	6041      	str	r1, [r0, #4]
 8004738:	4648      	mov	r0, r9
 800473a:	f000 fd9b 	bl	8005274 <_Balloc>
 800473e:	4682      	mov	sl, r0
 8004740:	2800      	cmp	r0, #0
 8004742:	d143      	bne.n	80047cc <_dtoa_r+0x2fc>
 8004744:	4602      	mov	r2, r0
 8004746:	f240 11af 	movw	r1, #431	@ 0x1af
 800474a:	4b1f      	ldr	r3, [pc, #124]	@ (80047c8 <_dtoa_r+0x2f8>)
 800474c:	e6d4      	b.n	80044f8 <_dtoa_r+0x28>
 800474e:	2300      	movs	r3, #0
 8004750:	e7e3      	b.n	800471a <_dtoa_r+0x24a>
 8004752:	2300      	movs	r3, #0
 8004754:	e7d5      	b.n	8004702 <_dtoa_r+0x232>
 8004756:	2401      	movs	r4, #1
 8004758:	2300      	movs	r3, #0
 800475a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800475c:	9320      	str	r3, [sp, #128]	@ 0x80
 800475e:	f04f 3bff 	mov.w	fp, #4294967295
 8004762:	2200      	movs	r2, #0
 8004764:	2312      	movs	r3, #18
 8004766:	f8cd b020 	str.w	fp, [sp, #32]
 800476a:	9221      	str	r2, [sp, #132]	@ 0x84
 800476c:	e7db      	b.n	8004726 <_dtoa_r+0x256>
 800476e:	2301      	movs	r3, #1
 8004770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004772:	e7f4      	b.n	800475e <_dtoa_r+0x28e>
 8004774:	f04f 0b01 	mov.w	fp, #1
 8004778:	465b      	mov	r3, fp
 800477a:	f8cd b020 	str.w	fp, [sp, #32]
 800477e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004782:	e7d0      	b.n	8004726 <_dtoa_r+0x256>
 8004784:	3101      	adds	r1, #1
 8004786:	0052      	lsls	r2, r2, #1
 8004788:	e7d1      	b.n	800472e <_dtoa_r+0x25e>
 800478a:	bf00      	nop
 800478c:	f3af 8000 	nop.w
 8004790:	636f4361 	.word	0x636f4361
 8004794:	3fd287a7 	.word	0x3fd287a7
 8004798:	8b60c8b3 	.word	0x8b60c8b3
 800479c:	3fc68a28 	.word	0x3fc68a28
 80047a0:	509f79fb 	.word	0x509f79fb
 80047a4:	3fd34413 	.word	0x3fd34413
 80047a8:	08007ab8 	.word	0x08007ab8
 80047ac:	08007acf 	.word	0x08007acf
 80047b0:	7ff00000 	.word	0x7ff00000
 80047b4:	08007ab4 	.word	0x08007ab4
 80047b8:	08007a83 	.word	0x08007a83
 80047bc:	08007a82 	.word	0x08007a82
 80047c0:	3ff80000 	.word	0x3ff80000
 80047c4:	08007c80 	.word	0x08007c80
 80047c8:	08007b27 	.word	0x08007b27
 80047cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047d0:	6018      	str	r0, [r3, #0]
 80047d2:	9b08      	ldr	r3, [sp, #32]
 80047d4:	2b0e      	cmp	r3, #14
 80047d6:	f200 80a1 	bhi.w	800491c <_dtoa_r+0x44c>
 80047da:	2c00      	cmp	r4, #0
 80047dc:	f000 809e 	beq.w	800491c <_dtoa_r+0x44c>
 80047e0:	2f00      	cmp	r7, #0
 80047e2:	dd33      	ble.n	800484c <_dtoa_r+0x37c>
 80047e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a58 <_dtoa_r+0x588>)
 80047e6:	f007 020f 	and.w	r2, r7, #15
 80047ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047ee:	05f8      	lsls	r0, r7, #23
 80047f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80047f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047fc:	d516      	bpl.n	800482c <_dtoa_r+0x35c>
 80047fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004802:	4b96      	ldr	r3, [pc, #600]	@ (8004a5c <_dtoa_r+0x58c>)
 8004804:	2603      	movs	r6, #3
 8004806:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800480a:	f7fb ff8f 	bl	800072c <__aeabi_ddiv>
 800480e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004812:	f004 040f 	and.w	r4, r4, #15
 8004816:	4d91      	ldr	r5, [pc, #580]	@ (8004a5c <_dtoa_r+0x58c>)
 8004818:	b954      	cbnz	r4, 8004830 <_dtoa_r+0x360>
 800481a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800481e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004822:	f7fb ff83 	bl	800072c <__aeabi_ddiv>
 8004826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800482a:	e028      	b.n	800487e <_dtoa_r+0x3ae>
 800482c:	2602      	movs	r6, #2
 800482e:	e7f2      	b.n	8004816 <_dtoa_r+0x346>
 8004830:	07e1      	lsls	r1, r4, #31
 8004832:	d508      	bpl.n	8004846 <_dtoa_r+0x376>
 8004834:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004838:	e9d5 2300 	ldrd	r2, r3, [r5]
 800483c:	f7fb fe4c 	bl	80004d8 <__aeabi_dmul>
 8004840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004844:	3601      	adds	r6, #1
 8004846:	1064      	asrs	r4, r4, #1
 8004848:	3508      	adds	r5, #8
 800484a:	e7e5      	b.n	8004818 <_dtoa_r+0x348>
 800484c:	f000 80af 	beq.w	80049ae <_dtoa_r+0x4de>
 8004850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004854:	427c      	negs	r4, r7
 8004856:	4b80      	ldr	r3, [pc, #512]	@ (8004a58 <_dtoa_r+0x588>)
 8004858:	f004 020f 	and.w	r2, r4, #15
 800485c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fe38 	bl	80004d8 <__aeabi_dmul>
 8004868:	2602      	movs	r6, #2
 800486a:	2300      	movs	r3, #0
 800486c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004870:	4d7a      	ldr	r5, [pc, #488]	@ (8004a5c <_dtoa_r+0x58c>)
 8004872:	1124      	asrs	r4, r4, #4
 8004874:	2c00      	cmp	r4, #0
 8004876:	f040 808f 	bne.w	8004998 <_dtoa_r+0x4c8>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1d3      	bne.n	8004826 <_dtoa_r+0x356>
 800487e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004882:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8094 	beq.w	80049b2 <_dtoa_r+0x4e2>
 800488a:	2200      	movs	r2, #0
 800488c:	4620      	mov	r0, r4
 800488e:	4629      	mov	r1, r5
 8004890:	4b73      	ldr	r3, [pc, #460]	@ (8004a60 <_dtoa_r+0x590>)
 8004892:	f7fc f893 	bl	80009bc <__aeabi_dcmplt>
 8004896:	2800      	cmp	r0, #0
 8004898:	f000 808b 	beq.w	80049b2 <_dtoa_r+0x4e2>
 800489c:	9b08      	ldr	r3, [sp, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8087 	beq.w	80049b2 <_dtoa_r+0x4e2>
 80048a4:	f1bb 0f00 	cmp.w	fp, #0
 80048a8:	dd34      	ble.n	8004914 <_dtoa_r+0x444>
 80048aa:	4620      	mov	r0, r4
 80048ac:	2200      	movs	r2, #0
 80048ae:	4629      	mov	r1, r5
 80048b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <_dtoa_r+0x594>)
 80048b2:	f7fb fe11 	bl	80004d8 <__aeabi_dmul>
 80048b6:	465c      	mov	r4, fp
 80048b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80048c0:	3601      	adds	r6, #1
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7fb fd9e 	bl	8000404 <__aeabi_i2d>
 80048c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048cc:	f7fb fe04 	bl	80004d8 <__aeabi_dmul>
 80048d0:	2200      	movs	r2, #0
 80048d2:	4b65      	ldr	r3, [pc, #404]	@ (8004a68 <_dtoa_r+0x598>)
 80048d4:	f7fb fc4a 	bl	800016c <__adddf3>
 80048d8:	4605      	mov	r5, r0
 80048da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048de:	2c00      	cmp	r4, #0
 80048e0:	d16a      	bne.n	80049b8 <_dtoa_r+0x4e8>
 80048e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e6:	2200      	movs	r2, #0
 80048e8:	4b60      	ldr	r3, [pc, #384]	@ (8004a6c <_dtoa_r+0x59c>)
 80048ea:	f7fb fc3d 	bl	8000168 <__aeabi_dsub>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048f6:	462a      	mov	r2, r5
 80048f8:	4633      	mov	r3, r6
 80048fa:	f7fc f87d 	bl	80009f8 <__aeabi_dcmpgt>
 80048fe:	2800      	cmp	r0, #0
 8004900:	f040 8298 	bne.w	8004e34 <_dtoa_r+0x964>
 8004904:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004908:	462a      	mov	r2, r5
 800490a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800490e:	f7fc f855 	bl	80009bc <__aeabi_dcmplt>
 8004912:	bb38      	cbnz	r0, 8004964 <_dtoa_r+0x494>
 8004914:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004918:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800491c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800491e:	2b00      	cmp	r3, #0
 8004920:	f2c0 8157 	blt.w	8004bd2 <_dtoa_r+0x702>
 8004924:	2f0e      	cmp	r7, #14
 8004926:	f300 8154 	bgt.w	8004bd2 <_dtoa_r+0x702>
 800492a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a58 <_dtoa_r+0x588>)
 800492c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004930:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004934:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004938:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800493a:	2b00      	cmp	r3, #0
 800493c:	f280 80e5 	bge.w	8004b0a <_dtoa_r+0x63a>
 8004940:	9b08      	ldr	r3, [sp, #32]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f300 80e1 	bgt.w	8004b0a <_dtoa_r+0x63a>
 8004948:	d10c      	bne.n	8004964 <_dtoa_r+0x494>
 800494a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800494e:	2200      	movs	r2, #0
 8004950:	4b46      	ldr	r3, [pc, #280]	@ (8004a6c <_dtoa_r+0x59c>)
 8004952:	f7fb fdc1 	bl	80004d8 <__aeabi_dmul>
 8004956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800495a:	f7fc f843 	bl	80009e4 <__aeabi_dcmpge>
 800495e:	2800      	cmp	r0, #0
 8004960:	f000 8266 	beq.w	8004e30 <_dtoa_r+0x960>
 8004964:	2400      	movs	r4, #0
 8004966:	4625      	mov	r5, r4
 8004968:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800496a:	4656      	mov	r6, sl
 800496c:	ea6f 0803 	mvn.w	r8, r3
 8004970:	2700      	movs	r7, #0
 8004972:	4621      	mov	r1, r4
 8004974:	4648      	mov	r0, r9
 8004976:	f000 fcbd 	bl	80052f4 <_Bfree>
 800497a:	2d00      	cmp	r5, #0
 800497c:	f000 80bd 	beq.w	8004afa <_dtoa_r+0x62a>
 8004980:	b12f      	cbz	r7, 800498e <_dtoa_r+0x4be>
 8004982:	42af      	cmp	r7, r5
 8004984:	d003      	beq.n	800498e <_dtoa_r+0x4be>
 8004986:	4639      	mov	r1, r7
 8004988:	4648      	mov	r0, r9
 800498a:	f000 fcb3 	bl	80052f4 <_Bfree>
 800498e:	4629      	mov	r1, r5
 8004990:	4648      	mov	r0, r9
 8004992:	f000 fcaf 	bl	80052f4 <_Bfree>
 8004996:	e0b0      	b.n	8004afa <_dtoa_r+0x62a>
 8004998:	07e2      	lsls	r2, r4, #31
 800499a:	d505      	bpl.n	80049a8 <_dtoa_r+0x4d8>
 800499c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049a0:	f7fb fd9a 	bl	80004d8 <__aeabi_dmul>
 80049a4:	2301      	movs	r3, #1
 80049a6:	3601      	adds	r6, #1
 80049a8:	1064      	asrs	r4, r4, #1
 80049aa:	3508      	adds	r5, #8
 80049ac:	e762      	b.n	8004874 <_dtoa_r+0x3a4>
 80049ae:	2602      	movs	r6, #2
 80049b0:	e765      	b.n	800487e <_dtoa_r+0x3ae>
 80049b2:	46b8      	mov	r8, r7
 80049b4:	9c08      	ldr	r4, [sp, #32]
 80049b6:	e784      	b.n	80048c2 <_dtoa_r+0x3f2>
 80049b8:	4b27      	ldr	r3, [pc, #156]	@ (8004a58 <_dtoa_r+0x588>)
 80049ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049c4:	4454      	add	r4, sl
 80049c6:	2900      	cmp	r1, #0
 80049c8:	d054      	beq.n	8004a74 <_dtoa_r+0x5a4>
 80049ca:	2000      	movs	r0, #0
 80049cc:	4928      	ldr	r1, [pc, #160]	@ (8004a70 <_dtoa_r+0x5a0>)
 80049ce:	f7fb fead 	bl	800072c <__aeabi_ddiv>
 80049d2:	4633      	mov	r3, r6
 80049d4:	462a      	mov	r2, r5
 80049d6:	f7fb fbc7 	bl	8000168 <__aeabi_dsub>
 80049da:	4656      	mov	r6, sl
 80049dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80049e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049e4:	f7fc f828 	bl	8000a38 <__aeabi_d2iz>
 80049e8:	4605      	mov	r5, r0
 80049ea:	f7fb fd0b 	bl	8000404 <__aeabi_i2d>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049f6:	f7fb fbb7 	bl	8000168 <__aeabi_dsub>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	3530      	adds	r5, #48	@ 0x30
 8004a00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a08:	f806 5b01 	strb.w	r5, [r6], #1
 8004a0c:	f7fb ffd6 	bl	80009bc <__aeabi_dcmplt>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d172      	bne.n	8004afa <_dtoa_r+0x62a>
 8004a14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a18:	2000      	movs	r0, #0
 8004a1a:	4911      	ldr	r1, [pc, #68]	@ (8004a60 <_dtoa_r+0x590>)
 8004a1c:	f7fb fba4 	bl	8000168 <__aeabi_dsub>
 8004a20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a24:	f7fb ffca 	bl	80009bc <__aeabi_dcmplt>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	f040 80b4 	bne.w	8004b96 <_dtoa_r+0x6c6>
 8004a2e:	42a6      	cmp	r6, r4
 8004a30:	f43f af70 	beq.w	8004914 <_dtoa_r+0x444>
 8004a34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <_dtoa_r+0x594>)
 8004a3c:	f7fb fd4c 	bl	80004d8 <__aeabi_dmul>
 8004a40:	2200      	movs	r2, #0
 8004a42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a4a:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <_dtoa_r+0x594>)
 8004a4c:	f7fb fd44 	bl	80004d8 <__aeabi_dmul>
 8004a50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004a54:	e7c4      	b.n	80049e0 <_dtoa_r+0x510>
 8004a56:	bf00      	nop
 8004a58:	08007c80 	.word	0x08007c80
 8004a5c:	08007c58 	.word	0x08007c58
 8004a60:	3ff00000 	.word	0x3ff00000
 8004a64:	40240000 	.word	0x40240000
 8004a68:	401c0000 	.word	0x401c0000
 8004a6c:	40140000 	.word	0x40140000
 8004a70:	3fe00000 	.word	0x3fe00000
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	f7fb fd2e 	bl	80004d8 <__aeabi_dmul>
 8004a7c:	4656      	mov	r6, sl
 8004a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a82:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a88:	f7fb ffd6 	bl	8000a38 <__aeabi_d2iz>
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	f7fb fcb9 	bl	8000404 <__aeabi_i2d>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a9a:	f7fb fb65 	bl	8000168 <__aeabi_dsub>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	3530      	adds	r5, #48	@ 0x30
 8004aa4:	f806 5b01 	strb.w	r5, [r6], #1
 8004aa8:	42a6      	cmp	r6, r4
 8004aaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	d124      	bne.n	8004afe <_dtoa_r+0x62e>
 8004ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ab8:	4bae      	ldr	r3, [pc, #696]	@ (8004d74 <_dtoa_r+0x8a4>)
 8004aba:	f7fb fb57 	bl	800016c <__adddf3>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ac6:	f7fb ff97 	bl	80009f8 <__aeabi_dcmpgt>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d163      	bne.n	8004b96 <_dtoa_r+0x6c6>
 8004ace:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	49a7      	ldr	r1, [pc, #668]	@ (8004d74 <_dtoa_r+0x8a4>)
 8004ad6:	f7fb fb47 	bl	8000168 <__aeabi_dsub>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ae2:	f7fb ff6b 	bl	80009bc <__aeabi_dcmplt>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	f43f af14 	beq.w	8004914 <_dtoa_r+0x444>
 8004aec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004aee:	1e73      	subs	r3, r6, #1
 8004af0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004af2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004af6:	2b30      	cmp	r3, #48	@ 0x30
 8004af8:	d0f8      	beq.n	8004aec <_dtoa_r+0x61c>
 8004afa:	4647      	mov	r7, r8
 8004afc:	e03b      	b.n	8004b76 <_dtoa_r+0x6a6>
 8004afe:	4b9e      	ldr	r3, [pc, #632]	@ (8004d78 <_dtoa_r+0x8a8>)
 8004b00:	f7fb fcea 	bl	80004d8 <__aeabi_dmul>
 8004b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b08:	e7bc      	b.n	8004a84 <_dtoa_r+0x5b4>
 8004b0a:	4656      	mov	r6, sl
 8004b0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb fe08 	bl	800072c <__aeabi_ddiv>
 8004b1c:	f7fb ff8c 	bl	8000a38 <__aeabi_d2iz>
 8004b20:	4680      	mov	r8, r0
 8004b22:	f7fb fc6f 	bl	8000404 <__aeabi_i2d>
 8004b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2a:	f7fb fcd5 	bl	80004d8 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb fb17 	bl	8000168 <__aeabi_dsub>
 8004b3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004b3e:	9d08      	ldr	r5, [sp, #32]
 8004b40:	f806 4b01 	strb.w	r4, [r6], #1
 8004b44:	eba6 040a 	sub.w	r4, r6, sl
 8004b48:	42a5      	cmp	r5, r4
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	d133      	bne.n	8004bb8 <_dtoa_r+0x6e8>
 8004b50:	f7fb fb0c 	bl	800016c <__adddf3>
 8004b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b58:	4604      	mov	r4, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	f7fb ff4c 	bl	80009f8 <__aeabi_dcmpgt>
 8004b60:	b9c0      	cbnz	r0, 8004b94 <_dtoa_r+0x6c4>
 8004b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b66:	4620      	mov	r0, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f7fb ff1d 	bl	80009a8 <__aeabi_dcmpeq>
 8004b6e:	b110      	cbz	r0, 8004b76 <_dtoa_r+0x6a6>
 8004b70:	f018 0f01 	tst.w	r8, #1
 8004b74:	d10e      	bne.n	8004b94 <_dtoa_r+0x6c4>
 8004b76:	4648      	mov	r0, r9
 8004b78:	9903      	ldr	r1, [sp, #12]
 8004b7a:	f000 fbbb 	bl	80052f4 <_Bfree>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	7033      	strb	r3, [r6, #0]
 8004b82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004b84:	3701      	adds	r7, #1
 8004b86:	601f      	str	r7, [r3, #0]
 8004b88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 824b 	beq.w	8005026 <_dtoa_r+0xb56>
 8004b90:	601e      	str	r6, [r3, #0]
 8004b92:	e248      	b.n	8005026 <_dtoa_r+0xb56>
 8004b94:	46b8      	mov	r8, r7
 8004b96:	4633      	mov	r3, r6
 8004b98:	461e      	mov	r6, r3
 8004b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b9e:	2a39      	cmp	r2, #57	@ 0x39
 8004ba0:	d106      	bne.n	8004bb0 <_dtoa_r+0x6e0>
 8004ba2:	459a      	cmp	sl, r3
 8004ba4:	d1f8      	bne.n	8004b98 <_dtoa_r+0x6c8>
 8004ba6:	2230      	movs	r2, #48	@ 0x30
 8004ba8:	f108 0801 	add.w	r8, r8, #1
 8004bac:	f88a 2000 	strb.w	r2, [sl]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	3201      	adds	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e7a0      	b.n	8004afa <_dtoa_r+0x62a>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b6f      	ldr	r3, [pc, #444]	@ (8004d78 <_dtoa_r+0x8a8>)
 8004bbc:	f7fb fc8c 	bl	80004d8 <__aeabi_dmul>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	460d      	mov	r5, r1
 8004bc8:	f7fb feee 	bl	80009a8 <__aeabi_dcmpeq>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d09f      	beq.n	8004b10 <_dtoa_r+0x640>
 8004bd0:	e7d1      	b.n	8004b76 <_dtoa_r+0x6a6>
 8004bd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	f000 80ea 	beq.w	8004dae <_dtoa_r+0x8de>
 8004bda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bdc:	2a01      	cmp	r2, #1
 8004bde:	f300 80cd 	bgt.w	8004d7c <_dtoa_r+0x8ac>
 8004be2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	f000 80c1 	beq.w	8004d6c <_dtoa_r+0x89c>
 8004bea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004bee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bf0:	9e04      	ldr	r6, [sp, #16]
 8004bf2:	9a04      	ldr	r2, [sp, #16]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	441a      	add	r2, r3
 8004bf8:	9204      	str	r2, [sp, #16]
 8004bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bfc:	4648      	mov	r0, r9
 8004bfe:	441a      	add	r2, r3
 8004c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c02:	f000 fc75 	bl	80054f0 <__i2b>
 8004c06:	4605      	mov	r5, r0
 8004c08:	b166      	cbz	r6, 8004c24 <_dtoa_r+0x754>
 8004c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dd09      	ble.n	8004c24 <_dtoa_r+0x754>
 8004c10:	42b3      	cmp	r3, r6
 8004c12:	bfa8      	it	ge
 8004c14:	4633      	movge	r3, r6
 8004c16:	9a04      	ldr	r2, [sp, #16]
 8004c18:	1af6      	subs	r6, r6, r3
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	9204      	str	r2, [sp, #16]
 8004c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c26:	b30b      	cbz	r3, 8004c6c <_dtoa_r+0x79c>
 8004c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80c6 	beq.w	8004dbc <_dtoa_r+0x8ec>
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	f000 80c0 	beq.w	8004db6 <_dtoa_r+0x8e6>
 8004c36:	4629      	mov	r1, r5
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4648      	mov	r0, r9
 8004c3c:	f000 fd10 	bl	8005660 <__pow5mult>
 8004c40:	9a03      	ldr	r2, [sp, #12]
 8004c42:	4601      	mov	r1, r0
 8004c44:	4605      	mov	r5, r0
 8004c46:	4648      	mov	r0, r9
 8004c48:	f000 fc68 	bl	800551c <__multiply>
 8004c4c:	9903      	ldr	r1, [sp, #12]
 8004c4e:	4680      	mov	r8, r0
 8004c50:	4648      	mov	r0, r9
 8004c52:	f000 fb4f 	bl	80052f4 <_Bfree>
 8004c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c58:	1b1b      	subs	r3, r3, r4
 8004c5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c5c:	f000 80b1 	beq.w	8004dc2 <_dtoa_r+0x8f2>
 8004c60:	4641      	mov	r1, r8
 8004c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c64:	4648      	mov	r0, r9
 8004c66:	f000 fcfb 	bl	8005660 <__pow5mult>
 8004c6a:	9003      	str	r0, [sp, #12]
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4648      	mov	r0, r9
 8004c70:	f000 fc3e 	bl	80054f0 <__i2b>
 8004c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c76:	4604      	mov	r4, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 81d8 	beq.w	800502e <_dtoa_r+0xb5e>
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4601      	mov	r1, r0
 8004c82:	4648      	mov	r0, r9
 8004c84:	f000 fcec 	bl	8005660 <__pow5mult>
 8004c88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f300 809f 	bgt.w	8004dd0 <_dtoa_r+0x900>
 8004c92:	9b06      	ldr	r3, [sp, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 8097 	bne.w	8004dc8 <_dtoa_r+0x8f8>
 8004c9a:	9b07      	ldr	r3, [sp, #28]
 8004c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f040 8093 	bne.w	8004dcc <_dtoa_r+0x8fc>
 8004ca6:	9b07      	ldr	r3, [sp, #28]
 8004ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cac:	0d1b      	lsrs	r3, r3, #20
 8004cae:	051b      	lsls	r3, r3, #20
 8004cb0:	b133      	cbz	r3, 8004cc0 <_dtoa_r+0x7f0>
 8004cb2:	9b04      	ldr	r3, [sp, #16]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	9304      	str	r3, [sp, #16]
 8004cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cba:	3301      	adds	r3, #1
 8004cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 81b8 	beq.w	800503a <_dtoa_r+0xb6a>
 8004cca:	6923      	ldr	r3, [r4, #16]
 8004ccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cd0:	6918      	ldr	r0, [r3, #16]
 8004cd2:	f000 fbc1 	bl	8005458 <__hi0bits>
 8004cd6:	f1c0 0020 	rsb	r0, r0, #32
 8004cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cdc:	4418      	add	r0, r3
 8004cde:	f010 001f 	ands.w	r0, r0, #31
 8004ce2:	f000 8082 	beq.w	8004dea <_dtoa_r+0x91a>
 8004ce6:	f1c0 0320 	rsb	r3, r0, #32
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	dd73      	ble.n	8004dd6 <_dtoa_r+0x906>
 8004cee:	9b04      	ldr	r3, [sp, #16]
 8004cf0:	f1c0 001c 	rsb	r0, r0, #28
 8004cf4:	4403      	add	r3, r0
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cfa:	4406      	add	r6, r0
 8004cfc:	4403      	add	r3, r0
 8004cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d00:	9b04      	ldr	r3, [sp, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	dd05      	ble.n	8004d12 <_dtoa_r+0x842>
 8004d06:	461a      	mov	r2, r3
 8004d08:	4648      	mov	r0, r9
 8004d0a:	9903      	ldr	r1, [sp, #12]
 8004d0c:	f000 fd02 	bl	8005714 <__lshift>
 8004d10:	9003      	str	r0, [sp, #12]
 8004d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dd05      	ble.n	8004d24 <_dtoa_r+0x854>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4648      	mov	r0, r9
 8004d1e:	f000 fcf9 	bl	8005714 <__lshift>
 8004d22:	4604      	mov	r4, r0
 8004d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d061      	beq.n	8004dee <_dtoa_r+0x91e>
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	9803      	ldr	r0, [sp, #12]
 8004d2e:	f000 fd5d 	bl	80057ec <__mcmp>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	da5b      	bge.n	8004dee <_dtoa_r+0x91e>
 8004d36:	2300      	movs	r3, #0
 8004d38:	220a      	movs	r2, #10
 8004d3a:	4648      	mov	r0, r9
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	f000 fafb 	bl	8005338 <__multadd>
 8004d42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d44:	f107 38ff 	add.w	r8, r7, #4294967295
 8004d48:	9003      	str	r0, [sp, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8177 	beq.w	800503e <_dtoa_r+0xb6e>
 8004d50:	4629      	mov	r1, r5
 8004d52:	2300      	movs	r3, #0
 8004d54:	220a      	movs	r2, #10
 8004d56:	4648      	mov	r0, r9
 8004d58:	f000 faee 	bl	8005338 <__multadd>
 8004d5c:	f1bb 0f00 	cmp.w	fp, #0
 8004d60:	4605      	mov	r5, r0
 8004d62:	dc6f      	bgt.n	8004e44 <_dtoa_r+0x974>
 8004d64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	dc49      	bgt.n	8004dfe <_dtoa_r+0x92e>
 8004d6a:	e06b      	b.n	8004e44 <_dtoa_r+0x974>
 8004d6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d72:	e73c      	b.n	8004bee <_dtoa_r+0x71e>
 8004d74:	3fe00000 	.word	0x3fe00000
 8004d78:	40240000 	.word	0x40240000
 8004d7c:	9b08      	ldr	r3, [sp, #32]
 8004d7e:	1e5c      	subs	r4, r3, #1
 8004d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d82:	42a3      	cmp	r3, r4
 8004d84:	db09      	blt.n	8004d9a <_dtoa_r+0x8ca>
 8004d86:	1b1c      	subs	r4, r3, r4
 8004d88:	9b08      	ldr	r3, [sp, #32]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f6bf af30 	bge.w	8004bf0 <_dtoa_r+0x720>
 8004d90:	9b04      	ldr	r3, [sp, #16]
 8004d92:	9a08      	ldr	r2, [sp, #32]
 8004d94:	1a9e      	subs	r6, r3, r2
 8004d96:	2300      	movs	r3, #0
 8004d98:	e72b      	b.n	8004bf2 <_dtoa_r+0x722>
 8004d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d9e:	1ae3      	subs	r3, r4, r3
 8004da0:	441a      	add	r2, r3
 8004da2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004da4:	9e04      	ldr	r6, [sp, #16]
 8004da6:	2400      	movs	r4, #0
 8004da8:	9b08      	ldr	r3, [sp, #32]
 8004daa:	920e      	str	r2, [sp, #56]	@ 0x38
 8004dac:	e721      	b.n	8004bf2 <_dtoa_r+0x722>
 8004dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004db0:	9e04      	ldr	r6, [sp, #16]
 8004db2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004db4:	e728      	b.n	8004c08 <_dtoa_r+0x738>
 8004db6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004dba:	e751      	b.n	8004c60 <_dtoa_r+0x790>
 8004dbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dbe:	9903      	ldr	r1, [sp, #12]
 8004dc0:	e750      	b.n	8004c64 <_dtoa_r+0x794>
 8004dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc6:	e751      	b.n	8004c6c <_dtoa_r+0x79c>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e779      	b.n	8004cc0 <_dtoa_r+0x7f0>
 8004dcc:	9b06      	ldr	r3, [sp, #24]
 8004dce:	e777      	b.n	8004cc0 <_dtoa_r+0x7f0>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dd4:	e779      	b.n	8004cca <_dtoa_r+0x7fa>
 8004dd6:	d093      	beq.n	8004d00 <_dtoa_r+0x830>
 8004dd8:	9a04      	ldr	r2, [sp, #16]
 8004dda:	331c      	adds	r3, #28
 8004ddc:	441a      	add	r2, r3
 8004dde:	9204      	str	r2, [sp, #16]
 8004de0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004de2:	441e      	add	r6, r3
 8004de4:	441a      	add	r2, r3
 8004de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004de8:	e78a      	b.n	8004d00 <_dtoa_r+0x830>
 8004dea:	4603      	mov	r3, r0
 8004dec:	e7f4      	b.n	8004dd8 <_dtoa_r+0x908>
 8004dee:	9b08      	ldr	r3, [sp, #32]
 8004df0:	46b8      	mov	r8, r7
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dc20      	bgt.n	8004e38 <_dtoa_r+0x968>
 8004df6:	469b      	mov	fp, r3
 8004df8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	dd1e      	ble.n	8004e3c <_dtoa_r+0x96c>
 8004dfe:	f1bb 0f00 	cmp.w	fp, #0
 8004e02:	f47f adb1 	bne.w	8004968 <_dtoa_r+0x498>
 8004e06:	4621      	mov	r1, r4
 8004e08:	465b      	mov	r3, fp
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	4648      	mov	r0, r9
 8004e0e:	f000 fa93 	bl	8005338 <__multadd>
 8004e12:	4601      	mov	r1, r0
 8004e14:	4604      	mov	r4, r0
 8004e16:	9803      	ldr	r0, [sp, #12]
 8004e18:	f000 fce8 	bl	80057ec <__mcmp>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f77f ada3 	ble.w	8004968 <_dtoa_r+0x498>
 8004e22:	4656      	mov	r6, sl
 8004e24:	2331      	movs	r3, #49	@ 0x31
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	f806 3b01 	strb.w	r3, [r6], #1
 8004e2e:	e59f      	b.n	8004970 <_dtoa_r+0x4a0>
 8004e30:	46b8      	mov	r8, r7
 8004e32:	9c08      	ldr	r4, [sp, #32]
 8004e34:	4625      	mov	r5, r4
 8004e36:	e7f4      	b.n	8004e22 <_dtoa_r+0x952>
 8004e38:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8101 	beq.w	8005046 <_dtoa_r+0xb76>
 8004e44:	2e00      	cmp	r6, #0
 8004e46:	dd05      	ble.n	8004e54 <_dtoa_r+0x984>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	4648      	mov	r0, r9
 8004e4e:	f000 fc61 	bl	8005714 <__lshift>
 8004e52:	4605      	mov	r5, r0
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05c      	beq.n	8004f14 <_dtoa_r+0xa44>
 8004e5a:	4648      	mov	r0, r9
 8004e5c:	6869      	ldr	r1, [r5, #4]
 8004e5e:	f000 fa09 	bl	8005274 <_Balloc>
 8004e62:	4606      	mov	r6, r0
 8004e64:	b928      	cbnz	r0, 8004e72 <_dtoa_r+0x9a2>
 8004e66:	4602      	mov	r2, r0
 8004e68:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e6c:	4b80      	ldr	r3, [pc, #512]	@ (8005070 <_dtoa_r+0xba0>)
 8004e6e:	f7ff bb43 	b.w	80044f8 <_dtoa_r+0x28>
 8004e72:	692a      	ldr	r2, [r5, #16]
 8004e74:	f105 010c 	add.w	r1, r5, #12
 8004e78:	3202      	adds	r2, #2
 8004e7a:	0092      	lsls	r2, r2, #2
 8004e7c:	300c      	adds	r0, #12
 8004e7e:	f001 ff51 	bl	8006d24 <memcpy>
 8004e82:	2201      	movs	r2, #1
 8004e84:	4631      	mov	r1, r6
 8004e86:	4648      	mov	r0, r9
 8004e88:	f000 fc44 	bl	8005714 <__lshift>
 8004e8c:	462f      	mov	r7, r5
 8004e8e:	4605      	mov	r5, r0
 8004e90:	f10a 0301 	add.w	r3, sl, #1
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	eb0a 030b 	add.w	r3, sl, fp
 8004e9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e9c:	9b06      	ldr	r3, [sp, #24]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea4:	9b04      	ldr	r3, [sp, #16]
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	9803      	ldr	r0, [sp, #12]
 8004eaa:	f103 3bff 	add.w	fp, r3, #4294967295
 8004eae:	f7ff fa85 	bl	80043bc <quorem>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4639      	mov	r1, r7
 8004eb6:	3330      	adds	r3, #48	@ 0x30
 8004eb8:	9006      	str	r0, [sp, #24]
 8004eba:	9803      	ldr	r0, [sp, #12]
 8004ebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ebe:	f000 fc95 	bl	80057ec <__mcmp>
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	9008      	str	r0, [sp, #32]
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4648      	mov	r0, r9
 8004eca:	f000 fcab 	bl	8005824 <__mdiff>
 8004ece:	68c2      	ldr	r2, [r0, #12]
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ed4:	bb02      	cbnz	r2, 8004f18 <_dtoa_r+0xa48>
 8004ed6:	4601      	mov	r1, r0
 8004ed8:	9803      	ldr	r0, [sp, #12]
 8004eda:	f000 fc87 	bl	80057ec <__mcmp>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4648      	mov	r0, r9
 8004ee6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004eea:	f000 fa03 	bl	80052f4 <_Bfree>
 8004eee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ef0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ef2:	9e04      	ldr	r6, [sp, #16]
 8004ef4:	ea42 0103 	orr.w	r1, r2, r3
 8004ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004efa:	4319      	orrs	r1, r3
 8004efc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004efe:	d10d      	bne.n	8004f1c <_dtoa_r+0xa4c>
 8004f00:	2b39      	cmp	r3, #57	@ 0x39
 8004f02:	d027      	beq.n	8004f54 <_dtoa_r+0xa84>
 8004f04:	9a08      	ldr	r2, [sp, #32]
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	dd01      	ble.n	8004f0e <_dtoa_r+0xa3e>
 8004f0a:	9b06      	ldr	r3, [sp, #24]
 8004f0c:	3331      	adds	r3, #49	@ 0x31
 8004f0e:	f88b 3000 	strb.w	r3, [fp]
 8004f12:	e52e      	b.n	8004972 <_dtoa_r+0x4a2>
 8004f14:	4628      	mov	r0, r5
 8004f16:	e7b9      	b.n	8004e8c <_dtoa_r+0x9bc>
 8004f18:	2201      	movs	r2, #1
 8004f1a:	e7e2      	b.n	8004ee2 <_dtoa_r+0xa12>
 8004f1c:	9908      	ldr	r1, [sp, #32]
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	db04      	blt.n	8004f2c <_dtoa_r+0xa5c>
 8004f22:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004f24:	4301      	orrs	r1, r0
 8004f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f28:	4301      	orrs	r1, r0
 8004f2a:	d120      	bne.n	8004f6e <_dtoa_r+0xa9e>
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	ddee      	ble.n	8004f0e <_dtoa_r+0xa3e>
 8004f30:	2201      	movs	r2, #1
 8004f32:	9903      	ldr	r1, [sp, #12]
 8004f34:	4648      	mov	r0, r9
 8004f36:	9304      	str	r3, [sp, #16]
 8004f38:	f000 fbec 	bl	8005714 <__lshift>
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	9003      	str	r0, [sp, #12]
 8004f40:	f000 fc54 	bl	80057ec <__mcmp>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	9b04      	ldr	r3, [sp, #16]
 8004f48:	dc02      	bgt.n	8004f50 <_dtoa_r+0xa80>
 8004f4a:	d1e0      	bne.n	8004f0e <_dtoa_r+0xa3e>
 8004f4c:	07da      	lsls	r2, r3, #31
 8004f4e:	d5de      	bpl.n	8004f0e <_dtoa_r+0xa3e>
 8004f50:	2b39      	cmp	r3, #57	@ 0x39
 8004f52:	d1da      	bne.n	8004f0a <_dtoa_r+0xa3a>
 8004f54:	2339      	movs	r3, #57	@ 0x39
 8004f56:	f88b 3000 	strb.w	r3, [fp]
 8004f5a:	4633      	mov	r3, r6
 8004f5c:	461e      	mov	r6, r3
 8004f5e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	2a39      	cmp	r2, #57	@ 0x39
 8004f66:	d04e      	beq.n	8005006 <_dtoa_r+0xb36>
 8004f68:	3201      	adds	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e501      	b.n	8004972 <_dtoa_r+0x4a2>
 8004f6e:	2a00      	cmp	r2, #0
 8004f70:	dd03      	ble.n	8004f7a <_dtoa_r+0xaaa>
 8004f72:	2b39      	cmp	r3, #57	@ 0x39
 8004f74:	d0ee      	beq.n	8004f54 <_dtoa_r+0xa84>
 8004f76:	3301      	adds	r3, #1
 8004f78:	e7c9      	b.n	8004f0e <_dtoa_r+0xa3e>
 8004f7a:	9a04      	ldr	r2, [sp, #16]
 8004f7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f82:	428a      	cmp	r2, r1
 8004f84:	d028      	beq.n	8004fd8 <_dtoa_r+0xb08>
 8004f86:	2300      	movs	r3, #0
 8004f88:	220a      	movs	r2, #10
 8004f8a:	9903      	ldr	r1, [sp, #12]
 8004f8c:	4648      	mov	r0, r9
 8004f8e:	f000 f9d3 	bl	8005338 <__multadd>
 8004f92:	42af      	cmp	r7, r5
 8004f94:	9003      	str	r0, [sp, #12]
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f04f 020a 	mov.w	r2, #10
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	4648      	mov	r0, r9
 8004fa2:	d107      	bne.n	8004fb4 <_dtoa_r+0xae4>
 8004fa4:	f000 f9c8 	bl	8005338 <__multadd>
 8004fa8:	4607      	mov	r7, r0
 8004faa:	4605      	mov	r5, r0
 8004fac:	9b04      	ldr	r3, [sp, #16]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	9304      	str	r3, [sp, #16]
 8004fb2:	e777      	b.n	8004ea4 <_dtoa_r+0x9d4>
 8004fb4:	f000 f9c0 	bl	8005338 <__multadd>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4607      	mov	r7, r0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	220a      	movs	r2, #10
 8004fc0:	4648      	mov	r0, r9
 8004fc2:	f000 f9b9 	bl	8005338 <__multadd>
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	e7f0      	b.n	8004fac <_dtoa_r+0xadc>
 8004fca:	f1bb 0f00 	cmp.w	fp, #0
 8004fce:	bfcc      	ite	gt
 8004fd0:	465e      	movgt	r6, fp
 8004fd2:	2601      	movle	r6, #1
 8004fd4:	2700      	movs	r7, #0
 8004fd6:	4456      	add	r6, sl
 8004fd8:	2201      	movs	r2, #1
 8004fda:	9903      	ldr	r1, [sp, #12]
 8004fdc:	4648      	mov	r0, r9
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	f000 fb98 	bl	8005714 <__lshift>
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	9003      	str	r0, [sp, #12]
 8004fe8:	f000 fc00 	bl	80057ec <__mcmp>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	dcb4      	bgt.n	8004f5a <_dtoa_r+0xa8a>
 8004ff0:	d102      	bne.n	8004ff8 <_dtoa_r+0xb28>
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	07db      	lsls	r3, r3, #31
 8004ff6:	d4b0      	bmi.n	8004f5a <_dtoa_r+0xa8a>
 8004ff8:	4633      	mov	r3, r6
 8004ffa:	461e      	mov	r6, r3
 8004ffc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005000:	2a30      	cmp	r2, #48	@ 0x30
 8005002:	d0fa      	beq.n	8004ffa <_dtoa_r+0xb2a>
 8005004:	e4b5      	b.n	8004972 <_dtoa_r+0x4a2>
 8005006:	459a      	cmp	sl, r3
 8005008:	d1a8      	bne.n	8004f5c <_dtoa_r+0xa8c>
 800500a:	2331      	movs	r3, #49	@ 0x31
 800500c:	f108 0801 	add.w	r8, r8, #1
 8005010:	f88a 3000 	strb.w	r3, [sl]
 8005014:	e4ad      	b.n	8004972 <_dtoa_r+0x4a2>
 8005016:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005018:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005074 <_dtoa_r+0xba4>
 800501c:	b11b      	cbz	r3, 8005026 <_dtoa_r+0xb56>
 800501e:	f10a 0308 	add.w	r3, sl, #8
 8005022:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	4650      	mov	r0, sl
 8005028:	b017      	add	sp, #92	@ 0x5c
 800502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005030:	2b01      	cmp	r3, #1
 8005032:	f77f ae2e 	ble.w	8004c92 <_dtoa_r+0x7c2>
 8005036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005038:	930a      	str	r3, [sp, #40]	@ 0x28
 800503a:	2001      	movs	r0, #1
 800503c:	e64d      	b.n	8004cda <_dtoa_r+0x80a>
 800503e:	f1bb 0f00 	cmp.w	fp, #0
 8005042:	f77f aed9 	ble.w	8004df8 <_dtoa_r+0x928>
 8005046:	4656      	mov	r6, sl
 8005048:	4621      	mov	r1, r4
 800504a:	9803      	ldr	r0, [sp, #12]
 800504c:	f7ff f9b6 	bl	80043bc <quorem>
 8005050:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005054:	f806 3b01 	strb.w	r3, [r6], #1
 8005058:	eba6 020a 	sub.w	r2, r6, sl
 800505c:	4593      	cmp	fp, r2
 800505e:	ddb4      	ble.n	8004fca <_dtoa_r+0xafa>
 8005060:	2300      	movs	r3, #0
 8005062:	220a      	movs	r2, #10
 8005064:	4648      	mov	r0, r9
 8005066:	9903      	ldr	r1, [sp, #12]
 8005068:	f000 f966 	bl	8005338 <__multadd>
 800506c:	9003      	str	r0, [sp, #12]
 800506e:	e7eb      	b.n	8005048 <_dtoa_r+0xb78>
 8005070:	08007b27 	.word	0x08007b27
 8005074:	08007aab 	.word	0x08007aab

08005078 <_free_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4605      	mov	r5, r0
 800507c:	2900      	cmp	r1, #0
 800507e:	d040      	beq.n	8005102 <_free_r+0x8a>
 8005080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005084:	1f0c      	subs	r4, r1, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	bfb8      	it	lt
 800508a:	18e4      	addlt	r4, r4, r3
 800508c:	f000 f8e6 	bl	800525c <__malloc_lock>
 8005090:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <_free_r+0x8c>)
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	b933      	cbnz	r3, 80050a4 <_free_r+0x2c>
 8005096:	6063      	str	r3, [r4, #4]
 8005098:	6014      	str	r4, [r2, #0]
 800509a:	4628      	mov	r0, r5
 800509c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050a0:	f000 b8e2 	b.w	8005268 <__malloc_unlock>
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d908      	bls.n	80050ba <_free_r+0x42>
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	1821      	adds	r1, r4, r0
 80050ac:	428b      	cmp	r3, r1
 80050ae:	bf01      	itttt	eq
 80050b0:	6819      	ldreq	r1, [r3, #0]
 80050b2:	685b      	ldreq	r3, [r3, #4]
 80050b4:	1809      	addeq	r1, r1, r0
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	e7ed      	b.n	8005096 <_free_r+0x1e>
 80050ba:	461a      	mov	r2, r3
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b10b      	cbz	r3, 80050c4 <_free_r+0x4c>
 80050c0:	42a3      	cmp	r3, r4
 80050c2:	d9fa      	bls.n	80050ba <_free_r+0x42>
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	1850      	adds	r0, r2, r1
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d10b      	bne.n	80050e4 <_free_r+0x6c>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	4401      	add	r1, r0
 80050d0:	1850      	adds	r0, r2, r1
 80050d2:	4283      	cmp	r3, r0
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	d1e0      	bne.n	800509a <_free_r+0x22>
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4408      	add	r0, r1
 80050de:	6010      	str	r0, [r2, #0]
 80050e0:	6053      	str	r3, [r2, #4]
 80050e2:	e7da      	b.n	800509a <_free_r+0x22>
 80050e4:	d902      	bls.n	80050ec <_free_r+0x74>
 80050e6:	230c      	movs	r3, #12
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	e7d6      	b.n	800509a <_free_r+0x22>
 80050ec:	6820      	ldr	r0, [r4, #0]
 80050ee:	1821      	adds	r1, r4, r0
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf01      	itttt	eq
 80050f4:	6819      	ldreq	r1, [r3, #0]
 80050f6:	685b      	ldreq	r3, [r3, #4]
 80050f8:	1809      	addeq	r1, r1, r0
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	6054      	str	r4, [r2, #4]
 8005100:	e7cb      	b.n	800509a <_free_r+0x22>
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200003c4 	.word	0x200003c4

08005108 <malloc>:
 8005108:	4b02      	ldr	r3, [pc, #8]	@ (8005114 <malloc+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f000 b825 	b.w	800515c <_malloc_r>
 8005112:	bf00      	nop
 8005114:	20000040 	.word	0x20000040

08005118 <sbrk_aligned>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4e0f      	ldr	r6, [pc, #60]	@ (8005158 <sbrk_aligned+0x40>)
 800511c:	460c      	mov	r4, r1
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	4605      	mov	r5, r0
 8005122:	b911      	cbnz	r1, 800512a <sbrk_aligned+0x12>
 8005124:	f001 fdee 	bl	8006d04 <_sbrk_r>
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	4621      	mov	r1, r4
 800512c:	4628      	mov	r0, r5
 800512e:	f001 fde9 	bl	8006d04 <_sbrk_r>
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	d103      	bne.n	800513e <sbrk_aligned+0x26>
 8005136:	f04f 34ff 	mov.w	r4, #4294967295
 800513a:	4620      	mov	r0, r4
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	1cc4      	adds	r4, r0, #3
 8005140:	f024 0403 	bic.w	r4, r4, #3
 8005144:	42a0      	cmp	r0, r4
 8005146:	d0f8      	beq.n	800513a <sbrk_aligned+0x22>
 8005148:	1a21      	subs	r1, r4, r0
 800514a:	4628      	mov	r0, r5
 800514c:	f001 fdda 	bl	8006d04 <_sbrk_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d1f2      	bne.n	800513a <sbrk_aligned+0x22>
 8005154:	e7ef      	b.n	8005136 <sbrk_aligned+0x1e>
 8005156:	bf00      	nop
 8005158:	200003c0 	.word	0x200003c0

0800515c <_malloc_r>:
 800515c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005160:	1ccd      	adds	r5, r1, #3
 8005162:	f025 0503 	bic.w	r5, r5, #3
 8005166:	3508      	adds	r5, #8
 8005168:	2d0c      	cmp	r5, #12
 800516a:	bf38      	it	cc
 800516c:	250c      	movcc	r5, #12
 800516e:	2d00      	cmp	r5, #0
 8005170:	4606      	mov	r6, r0
 8005172:	db01      	blt.n	8005178 <_malloc_r+0x1c>
 8005174:	42a9      	cmp	r1, r5
 8005176:	d904      	bls.n	8005182 <_malloc_r+0x26>
 8005178:	230c      	movs	r3, #12
 800517a:	6033      	str	r3, [r6, #0]
 800517c:	2000      	movs	r0, #0
 800517e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005258 <_malloc_r+0xfc>
 8005186:	f000 f869 	bl	800525c <__malloc_lock>
 800518a:	f8d8 3000 	ldr.w	r3, [r8]
 800518e:	461c      	mov	r4, r3
 8005190:	bb44      	cbnz	r4, 80051e4 <_malloc_r+0x88>
 8005192:	4629      	mov	r1, r5
 8005194:	4630      	mov	r0, r6
 8005196:	f7ff ffbf 	bl	8005118 <sbrk_aligned>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	4604      	mov	r4, r0
 800519e:	d158      	bne.n	8005252 <_malloc_r+0xf6>
 80051a0:	f8d8 4000 	ldr.w	r4, [r8]
 80051a4:	4627      	mov	r7, r4
 80051a6:	2f00      	cmp	r7, #0
 80051a8:	d143      	bne.n	8005232 <_malloc_r+0xd6>
 80051aa:	2c00      	cmp	r4, #0
 80051ac:	d04b      	beq.n	8005246 <_malloc_r+0xea>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	4639      	mov	r1, r7
 80051b2:	4630      	mov	r0, r6
 80051b4:	eb04 0903 	add.w	r9, r4, r3
 80051b8:	f001 fda4 	bl	8006d04 <_sbrk_r>
 80051bc:	4581      	cmp	r9, r0
 80051be:	d142      	bne.n	8005246 <_malloc_r+0xea>
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	4630      	mov	r0, r6
 80051c4:	1a6d      	subs	r5, r5, r1
 80051c6:	4629      	mov	r1, r5
 80051c8:	f7ff ffa6 	bl	8005118 <sbrk_aligned>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d03a      	beq.n	8005246 <_malloc_r+0xea>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	442b      	add	r3, r5
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	f8d8 3000 	ldr.w	r3, [r8]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	bb62      	cbnz	r2, 8005238 <_malloc_r+0xdc>
 80051de:	f8c8 7000 	str.w	r7, [r8]
 80051e2:	e00f      	b.n	8005204 <_malloc_r+0xa8>
 80051e4:	6822      	ldr	r2, [r4, #0]
 80051e6:	1b52      	subs	r2, r2, r5
 80051e8:	d420      	bmi.n	800522c <_malloc_r+0xd0>
 80051ea:	2a0b      	cmp	r2, #11
 80051ec:	d917      	bls.n	800521e <_malloc_r+0xc2>
 80051ee:	1961      	adds	r1, r4, r5
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	6025      	str	r5, [r4, #0]
 80051f4:	bf18      	it	ne
 80051f6:	6059      	strne	r1, [r3, #4]
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	bf08      	it	eq
 80051fc:	f8c8 1000 	streq.w	r1, [r8]
 8005200:	5162      	str	r2, [r4, r5]
 8005202:	604b      	str	r3, [r1, #4]
 8005204:	4630      	mov	r0, r6
 8005206:	f000 f82f 	bl	8005268 <__malloc_unlock>
 800520a:	f104 000b 	add.w	r0, r4, #11
 800520e:	1d23      	adds	r3, r4, #4
 8005210:	f020 0007 	bic.w	r0, r0, #7
 8005214:	1ac2      	subs	r2, r0, r3
 8005216:	bf1c      	itt	ne
 8005218:	1a1b      	subne	r3, r3, r0
 800521a:	50a3      	strne	r3, [r4, r2]
 800521c:	e7af      	b.n	800517e <_malloc_r+0x22>
 800521e:	6862      	ldr	r2, [r4, #4]
 8005220:	42a3      	cmp	r3, r4
 8005222:	bf0c      	ite	eq
 8005224:	f8c8 2000 	streq.w	r2, [r8]
 8005228:	605a      	strne	r2, [r3, #4]
 800522a:	e7eb      	b.n	8005204 <_malloc_r+0xa8>
 800522c:	4623      	mov	r3, r4
 800522e:	6864      	ldr	r4, [r4, #4]
 8005230:	e7ae      	b.n	8005190 <_malloc_r+0x34>
 8005232:	463c      	mov	r4, r7
 8005234:	687f      	ldr	r7, [r7, #4]
 8005236:	e7b6      	b.n	80051a6 <_malloc_r+0x4a>
 8005238:	461a      	mov	r2, r3
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	42a3      	cmp	r3, r4
 800523e:	d1fb      	bne.n	8005238 <_malloc_r+0xdc>
 8005240:	2300      	movs	r3, #0
 8005242:	6053      	str	r3, [r2, #4]
 8005244:	e7de      	b.n	8005204 <_malloc_r+0xa8>
 8005246:	230c      	movs	r3, #12
 8005248:	4630      	mov	r0, r6
 800524a:	6033      	str	r3, [r6, #0]
 800524c:	f000 f80c 	bl	8005268 <__malloc_unlock>
 8005250:	e794      	b.n	800517c <_malloc_r+0x20>
 8005252:	6005      	str	r5, [r0, #0]
 8005254:	e7d6      	b.n	8005204 <_malloc_r+0xa8>
 8005256:	bf00      	nop
 8005258:	200003c4 	.word	0x200003c4

0800525c <__malloc_lock>:
 800525c:	4801      	ldr	r0, [pc, #4]	@ (8005264 <__malloc_lock+0x8>)
 800525e:	f7ff b898 	b.w	8004392 <__retarget_lock_acquire_recursive>
 8005262:	bf00      	nop
 8005264:	200003bc 	.word	0x200003bc

08005268 <__malloc_unlock>:
 8005268:	4801      	ldr	r0, [pc, #4]	@ (8005270 <__malloc_unlock+0x8>)
 800526a:	f7ff b893 	b.w	8004394 <__retarget_lock_release_recursive>
 800526e:	bf00      	nop
 8005270:	200003bc 	.word	0x200003bc

08005274 <_Balloc>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	69c6      	ldr	r6, [r0, #28]
 8005278:	4604      	mov	r4, r0
 800527a:	460d      	mov	r5, r1
 800527c:	b976      	cbnz	r6, 800529c <_Balloc+0x28>
 800527e:	2010      	movs	r0, #16
 8005280:	f7ff ff42 	bl	8005108 <malloc>
 8005284:	4602      	mov	r2, r0
 8005286:	61e0      	str	r0, [r4, #28]
 8005288:	b920      	cbnz	r0, 8005294 <_Balloc+0x20>
 800528a:	216b      	movs	r1, #107	@ 0x6b
 800528c:	4b17      	ldr	r3, [pc, #92]	@ (80052ec <_Balloc+0x78>)
 800528e:	4818      	ldr	r0, [pc, #96]	@ (80052f0 <_Balloc+0x7c>)
 8005290:	f001 fd5c 	bl	8006d4c <__assert_func>
 8005294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005298:	6006      	str	r6, [r0, #0]
 800529a:	60c6      	str	r6, [r0, #12]
 800529c:	69e6      	ldr	r6, [r4, #28]
 800529e:	68f3      	ldr	r3, [r6, #12]
 80052a0:	b183      	cbz	r3, 80052c4 <_Balloc+0x50>
 80052a2:	69e3      	ldr	r3, [r4, #28]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052aa:	b9b8      	cbnz	r0, 80052dc <_Balloc+0x68>
 80052ac:	2101      	movs	r1, #1
 80052ae:	fa01 f605 	lsl.w	r6, r1, r5
 80052b2:	1d72      	adds	r2, r6, #5
 80052b4:	4620      	mov	r0, r4
 80052b6:	0092      	lsls	r2, r2, #2
 80052b8:	f001 fd66 	bl	8006d88 <_calloc_r>
 80052bc:	b160      	cbz	r0, 80052d8 <_Balloc+0x64>
 80052be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052c2:	e00e      	b.n	80052e2 <_Balloc+0x6e>
 80052c4:	2221      	movs	r2, #33	@ 0x21
 80052c6:	2104      	movs	r1, #4
 80052c8:	4620      	mov	r0, r4
 80052ca:	f001 fd5d 	bl	8006d88 <_calloc_r>
 80052ce:	69e3      	ldr	r3, [r4, #28]
 80052d0:	60f0      	str	r0, [r6, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e4      	bne.n	80052a2 <_Balloc+0x2e>
 80052d8:	2000      	movs	r0, #0
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	6802      	ldr	r2, [r0, #0]
 80052de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052e2:	2300      	movs	r3, #0
 80052e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052e8:	e7f7      	b.n	80052da <_Balloc+0x66>
 80052ea:	bf00      	nop
 80052ec:	08007ab8 	.word	0x08007ab8
 80052f0:	08007b38 	.word	0x08007b38

080052f4 <_Bfree>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	69c6      	ldr	r6, [r0, #28]
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	b976      	cbnz	r6, 800531c <_Bfree+0x28>
 80052fe:	2010      	movs	r0, #16
 8005300:	f7ff ff02 	bl	8005108 <malloc>
 8005304:	4602      	mov	r2, r0
 8005306:	61e8      	str	r0, [r5, #28]
 8005308:	b920      	cbnz	r0, 8005314 <_Bfree+0x20>
 800530a:	218f      	movs	r1, #143	@ 0x8f
 800530c:	4b08      	ldr	r3, [pc, #32]	@ (8005330 <_Bfree+0x3c>)
 800530e:	4809      	ldr	r0, [pc, #36]	@ (8005334 <_Bfree+0x40>)
 8005310:	f001 fd1c 	bl	8006d4c <__assert_func>
 8005314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005318:	6006      	str	r6, [r0, #0]
 800531a:	60c6      	str	r6, [r0, #12]
 800531c:	b13c      	cbz	r4, 800532e <_Bfree+0x3a>
 800531e:	69eb      	ldr	r3, [r5, #28]
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005328:	6021      	str	r1, [r4, #0]
 800532a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	08007ab8 	.word	0x08007ab8
 8005334:	08007b38 	.word	0x08007b38

08005338 <__multadd>:
 8005338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533c:	4607      	mov	r7, r0
 800533e:	460c      	mov	r4, r1
 8005340:	461e      	mov	r6, r3
 8005342:	2000      	movs	r0, #0
 8005344:	690d      	ldr	r5, [r1, #16]
 8005346:	f101 0c14 	add.w	ip, r1, #20
 800534a:	f8dc 3000 	ldr.w	r3, [ip]
 800534e:	3001      	adds	r0, #1
 8005350:	b299      	uxth	r1, r3
 8005352:	fb02 6101 	mla	r1, r2, r1, r6
 8005356:	0c1e      	lsrs	r6, r3, #16
 8005358:	0c0b      	lsrs	r3, r1, #16
 800535a:	fb02 3306 	mla	r3, r2, r6, r3
 800535e:	b289      	uxth	r1, r1
 8005360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005364:	4285      	cmp	r5, r0
 8005366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800536a:	f84c 1b04 	str.w	r1, [ip], #4
 800536e:	dcec      	bgt.n	800534a <__multadd+0x12>
 8005370:	b30e      	cbz	r6, 80053b6 <__multadd+0x7e>
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	42ab      	cmp	r3, r5
 8005376:	dc19      	bgt.n	80053ac <__multadd+0x74>
 8005378:	6861      	ldr	r1, [r4, #4]
 800537a:	4638      	mov	r0, r7
 800537c:	3101      	adds	r1, #1
 800537e:	f7ff ff79 	bl	8005274 <_Balloc>
 8005382:	4680      	mov	r8, r0
 8005384:	b928      	cbnz	r0, 8005392 <__multadd+0x5a>
 8005386:	4602      	mov	r2, r0
 8005388:	21ba      	movs	r1, #186	@ 0xba
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <__multadd+0x84>)
 800538c:	480c      	ldr	r0, [pc, #48]	@ (80053c0 <__multadd+0x88>)
 800538e:	f001 fcdd 	bl	8006d4c <__assert_func>
 8005392:	6922      	ldr	r2, [r4, #16]
 8005394:	f104 010c 	add.w	r1, r4, #12
 8005398:	3202      	adds	r2, #2
 800539a:	0092      	lsls	r2, r2, #2
 800539c:	300c      	adds	r0, #12
 800539e:	f001 fcc1 	bl	8006d24 <memcpy>
 80053a2:	4621      	mov	r1, r4
 80053a4:	4638      	mov	r0, r7
 80053a6:	f7ff ffa5 	bl	80052f4 <_Bfree>
 80053aa:	4644      	mov	r4, r8
 80053ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053b0:	3501      	adds	r5, #1
 80053b2:	615e      	str	r6, [r3, #20]
 80053b4:	6125      	str	r5, [r4, #16]
 80053b6:	4620      	mov	r0, r4
 80053b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053bc:	08007b27 	.word	0x08007b27
 80053c0:	08007b38 	.word	0x08007b38

080053c4 <__s2b>:
 80053c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c8:	4615      	mov	r5, r2
 80053ca:	2209      	movs	r2, #9
 80053cc:	461f      	mov	r7, r3
 80053ce:	3308      	adds	r3, #8
 80053d0:	460c      	mov	r4, r1
 80053d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d6:	4606      	mov	r6, r0
 80053d8:	2201      	movs	r2, #1
 80053da:	2100      	movs	r1, #0
 80053dc:	429a      	cmp	r2, r3
 80053de:	db09      	blt.n	80053f4 <__s2b+0x30>
 80053e0:	4630      	mov	r0, r6
 80053e2:	f7ff ff47 	bl	8005274 <_Balloc>
 80053e6:	b940      	cbnz	r0, 80053fa <__s2b+0x36>
 80053e8:	4602      	mov	r2, r0
 80053ea:	21d3      	movs	r1, #211	@ 0xd3
 80053ec:	4b18      	ldr	r3, [pc, #96]	@ (8005450 <__s2b+0x8c>)
 80053ee:	4819      	ldr	r0, [pc, #100]	@ (8005454 <__s2b+0x90>)
 80053f0:	f001 fcac 	bl	8006d4c <__assert_func>
 80053f4:	0052      	lsls	r2, r2, #1
 80053f6:	3101      	adds	r1, #1
 80053f8:	e7f0      	b.n	80053dc <__s2b+0x18>
 80053fa:	9b08      	ldr	r3, [sp, #32]
 80053fc:	2d09      	cmp	r5, #9
 80053fe:	6143      	str	r3, [r0, #20]
 8005400:	f04f 0301 	mov.w	r3, #1
 8005404:	6103      	str	r3, [r0, #16]
 8005406:	dd16      	ble.n	8005436 <__s2b+0x72>
 8005408:	f104 0909 	add.w	r9, r4, #9
 800540c:	46c8      	mov	r8, r9
 800540e:	442c      	add	r4, r5
 8005410:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005414:	4601      	mov	r1, r0
 8005416:	220a      	movs	r2, #10
 8005418:	4630      	mov	r0, r6
 800541a:	3b30      	subs	r3, #48	@ 0x30
 800541c:	f7ff ff8c 	bl	8005338 <__multadd>
 8005420:	45a0      	cmp	r8, r4
 8005422:	d1f5      	bne.n	8005410 <__s2b+0x4c>
 8005424:	f1a5 0408 	sub.w	r4, r5, #8
 8005428:	444c      	add	r4, r9
 800542a:	1b2d      	subs	r5, r5, r4
 800542c:	1963      	adds	r3, r4, r5
 800542e:	42bb      	cmp	r3, r7
 8005430:	db04      	blt.n	800543c <__s2b+0x78>
 8005432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005436:	2509      	movs	r5, #9
 8005438:	340a      	adds	r4, #10
 800543a:	e7f6      	b.n	800542a <__s2b+0x66>
 800543c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005440:	4601      	mov	r1, r0
 8005442:	220a      	movs	r2, #10
 8005444:	4630      	mov	r0, r6
 8005446:	3b30      	subs	r3, #48	@ 0x30
 8005448:	f7ff ff76 	bl	8005338 <__multadd>
 800544c:	e7ee      	b.n	800542c <__s2b+0x68>
 800544e:	bf00      	nop
 8005450:	08007b27 	.word	0x08007b27
 8005454:	08007b38 	.word	0x08007b38

08005458 <__hi0bits>:
 8005458:	4603      	mov	r3, r0
 800545a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800545e:	bf3a      	itte	cc
 8005460:	0403      	lslcc	r3, r0, #16
 8005462:	2010      	movcc	r0, #16
 8005464:	2000      	movcs	r0, #0
 8005466:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800546a:	bf3c      	itt	cc
 800546c:	021b      	lslcc	r3, r3, #8
 800546e:	3008      	addcc	r0, #8
 8005470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005474:	bf3c      	itt	cc
 8005476:	011b      	lslcc	r3, r3, #4
 8005478:	3004      	addcc	r0, #4
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547e:	bf3c      	itt	cc
 8005480:	009b      	lslcc	r3, r3, #2
 8005482:	3002      	addcc	r0, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	db05      	blt.n	8005494 <__hi0bits+0x3c>
 8005488:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800548c:	f100 0001 	add.w	r0, r0, #1
 8005490:	bf08      	it	eq
 8005492:	2020      	moveq	r0, #32
 8005494:	4770      	bx	lr

08005496 <__lo0bits>:
 8005496:	6803      	ldr	r3, [r0, #0]
 8005498:	4602      	mov	r2, r0
 800549a:	f013 0007 	ands.w	r0, r3, #7
 800549e:	d00b      	beq.n	80054b8 <__lo0bits+0x22>
 80054a0:	07d9      	lsls	r1, r3, #31
 80054a2:	d421      	bmi.n	80054e8 <__lo0bits+0x52>
 80054a4:	0798      	lsls	r0, r3, #30
 80054a6:	bf49      	itett	mi
 80054a8:	085b      	lsrmi	r3, r3, #1
 80054aa:	089b      	lsrpl	r3, r3, #2
 80054ac:	2001      	movmi	r0, #1
 80054ae:	6013      	strmi	r3, [r2, #0]
 80054b0:	bf5c      	itt	pl
 80054b2:	2002      	movpl	r0, #2
 80054b4:	6013      	strpl	r3, [r2, #0]
 80054b6:	4770      	bx	lr
 80054b8:	b299      	uxth	r1, r3
 80054ba:	b909      	cbnz	r1, 80054c0 <__lo0bits+0x2a>
 80054bc:	2010      	movs	r0, #16
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	b2d9      	uxtb	r1, r3
 80054c2:	b909      	cbnz	r1, 80054c8 <__lo0bits+0x32>
 80054c4:	3008      	adds	r0, #8
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	0719      	lsls	r1, r3, #28
 80054ca:	bf04      	itt	eq
 80054cc:	091b      	lsreq	r3, r3, #4
 80054ce:	3004      	addeq	r0, #4
 80054d0:	0799      	lsls	r1, r3, #30
 80054d2:	bf04      	itt	eq
 80054d4:	089b      	lsreq	r3, r3, #2
 80054d6:	3002      	addeq	r0, #2
 80054d8:	07d9      	lsls	r1, r3, #31
 80054da:	d403      	bmi.n	80054e4 <__lo0bits+0x4e>
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	f100 0001 	add.w	r0, r0, #1
 80054e2:	d003      	beq.n	80054ec <__lo0bits+0x56>
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	4770      	bx	lr
 80054e8:	2000      	movs	r0, #0
 80054ea:	4770      	bx	lr
 80054ec:	2020      	movs	r0, #32
 80054ee:	4770      	bx	lr

080054f0 <__i2b>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	460c      	mov	r4, r1
 80054f4:	2101      	movs	r1, #1
 80054f6:	f7ff febd 	bl	8005274 <_Balloc>
 80054fa:	4602      	mov	r2, r0
 80054fc:	b928      	cbnz	r0, 800550a <__i2b+0x1a>
 80054fe:	f240 1145 	movw	r1, #325	@ 0x145
 8005502:	4b04      	ldr	r3, [pc, #16]	@ (8005514 <__i2b+0x24>)
 8005504:	4804      	ldr	r0, [pc, #16]	@ (8005518 <__i2b+0x28>)
 8005506:	f001 fc21 	bl	8006d4c <__assert_func>
 800550a:	2301      	movs	r3, #1
 800550c:	6144      	str	r4, [r0, #20]
 800550e:	6103      	str	r3, [r0, #16]
 8005510:	bd10      	pop	{r4, pc}
 8005512:	bf00      	nop
 8005514:	08007b27 	.word	0x08007b27
 8005518:	08007b38 	.word	0x08007b38

0800551c <__multiply>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	4617      	mov	r7, r2
 8005522:	690a      	ldr	r2, [r1, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4689      	mov	r9, r1
 8005528:	429a      	cmp	r2, r3
 800552a:	bfa2      	ittt	ge
 800552c:	463b      	movge	r3, r7
 800552e:	460f      	movge	r7, r1
 8005530:	4699      	movge	r9, r3
 8005532:	693d      	ldr	r5, [r7, #16]
 8005534:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	eb05 060a 	add.w	r6, r5, sl
 8005540:	42b3      	cmp	r3, r6
 8005542:	b085      	sub	sp, #20
 8005544:	bfb8      	it	lt
 8005546:	3101      	addlt	r1, #1
 8005548:	f7ff fe94 	bl	8005274 <_Balloc>
 800554c:	b930      	cbnz	r0, 800555c <__multiply+0x40>
 800554e:	4602      	mov	r2, r0
 8005550:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005554:	4b40      	ldr	r3, [pc, #256]	@ (8005658 <__multiply+0x13c>)
 8005556:	4841      	ldr	r0, [pc, #260]	@ (800565c <__multiply+0x140>)
 8005558:	f001 fbf8 	bl	8006d4c <__assert_func>
 800555c:	f100 0414 	add.w	r4, r0, #20
 8005560:	4623      	mov	r3, r4
 8005562:	2200      	movs	r2, #0
 8005564:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005568:	4573      	cmp	r3, lr
 800556a:	d320      	bcc.n	80055ae <__multiply+0x92>
 800556c:	f107 0814 	add.w	r8, r7, #20
 8005570:	f109 0114 	add.w	r1, r9, #20
 8005574:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005578:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800557c:	9302      	str	r3, [sp, #8]
 800557e:	1beb      	subs	r3, r5, r7
 8005580:	3b15      	subs	r3, #21
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	3304      	adds	r3, #4
 8005588:	3715      	adds	r7, #21
 800558a:	42bd      	cmp	r5, r7
 800558c:	bf38      	it	cc
 800558e:	2304      	movcc	r3, #4
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	9b02      	ldr	r3, [sp, #8]
 8005594:	9103      	str	r1, [sp, #12]
 8005596:	428b      	cmp	r3, r1
 8005598:	d80c      	bhi.n	80055b4 <__multiply+0x98>
 800559a:	2e00      	cmp	r6, #0
 800559c:	dd03      	ble.n	80055a6 <__multiply+0x8a>
 800559e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d055      	beq.n	8005652 <__multiply+0x136>
 80055a6:	6106      	str	r6, [r0, #16]
 80055a8:	b005      	add	sp, #20
 80055aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ae:	f843 2b04 	str.w	r2, [r3], #4
 80055b2:	e7d9      	b.n	8005568 <__multiply+0x4c>
 80055b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80055b8:	f1ba 0f00 	cmp.w	sl, #0
 80055bc:	d01f      	beq.n	80055fe <__multiply+0xe2>
 80055be:	46c4      	mov	ip, r8
 80055c0:	46a1      	mov	r9, r4
 80055c2:	2700      	movs	r7, #0
 80055c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80055c8:	f8d9 3000 	ldr.w	r3, [r9]
 80055cc:	fa1f fb82 	uxth.w	fp, r2
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	fb0a 330b 	mla	r3, sl, fp, r3
 80055d6:	443b      	add	r3, r7
 80055d8:	f8d9 7000 	ldr.w	r7, [r9]
 80055dc:	0c12      	lsrs	r2, r2, #16
 80055de:	0c3f      	lsrs	r7, r7, #16
 80055e0:	fb0a 7202 	mla	r2, sl, r2, r7
 80055e4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ee:	4565      	cmp	r5, ip
 80055f0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80055f4:	f849 3b04 	str.w	r3, [r9], #4
 80055f8:	d8e4      	bhi.n	80055c4 <__multiply+0xa8>
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	50e7      	str	r7, [r4, r3]
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	3104      	adds	r1, #4
 8005602:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005606:	f1b9 0f00 	cmp.w	r9, #0
 800560a:	d020      	beq.n	800564e <__multiply+0x132>
 800560c:	4647      	mov	r7, r8
 800560e:	46a4      	mov	ip, r4
 8005610:	f04f 0a00 	mov.w	sl, #0
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	f8b7 b000 	ldrh.w	fp, [r7]
 800561a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800561e:	b29b      	uxth	r3, r3
 8005620:	fb09 220b 	mla	r2, r9, fp, r2
 8005624:	4452      	add	r2, sl
 8005626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800562a:	f84c 3b04 	str.w	r3, [ip], #4
 800562e:	f857 3b04 	ldr.w	r3, [r7], #4
 8005632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005636:	f8bc 3000 	ldrh.w	r3, [ip]
 800563a:	42bd      	cmp	r5, r7
 800563c:	fb09 330a 	mla	r3, r9, sl, r3
 8005640:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005648:	d8e5      	bhi.n	8005616 <__multiply+0xfa>
 800564a:	9a01      	ldr	r2, [sp, #4]
 800564c:	50a3      	str	r3, [r4, r2]
 800564e:	3404      	adds	r4, #4
 8005650:	e79f      	b.n	8005592 <__multiply+0x76>
 8005652:	3e01      	subs	r6, #1
 8005654:	e7a1      	b.n	800559a <__multiply+0x7e>
 8005656:	bf00      	nop
 8005658:	08007b27 	.word	0x08007b27
 800565c:	08007b38 	.word	0x08007b38

08005660 <__pow5mult>:
 8005660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005664:	4615      	mov	r5, r2
 8005666:	f012 0203 	ands.w	r2, r2, #3
 800566a:	4607      	mov	r7, r0
 800566c:	460e      	mov	r6, r1
 800566e:	d007      	beq.n	8005680 <__pow5mult+0x20>
 8005670:	4c25      	ldr	r4, [pc, #148]	@ (8005708 <__pow5mult+0xa8>)
 8005672:	3a01      	subs	r2, #1
 8005674:	2300      	movs	r3, #0
 8005676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800567a:	f7ff fe5d 	bl	8005338 <__multadd>
 800567e:	4606      	mov	r6, r0
 8005680:	10ad      	asrs	r5, r5, #2
 8005682:	d03d      	beq.n	8005700 <__pow5mult+0xa0>
 8005684:	69fc      	ldr	r4, [r7, #28]
 8005686:	b97c      	cbnz	r4, 80056a8 <__pow5mult+0x48>
 8005688:	2010      	movs	r0, #16
 800568a:	f7ff fd3d 	bl	8005108 <malloc>
 800568e:	4602      	mov	r2, r0
 8005690:	61f8      	str	r0, [r7, #28]
 8005692:	b928      	cbnz	r0, 80056a0 <__pow5mult+0x40>
 8005694:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005698:	4b1c      	ldr	r3, [pc, #112]	@ (800570c <__pow5mult+0xac>)
 800569a:	481d      	ldr	r0, [pc, #116]	@ (8005710 <__pow5mult+0xb0>)
 800569c:	f001 fb56 	bl	8006d4c <__assert_func>
 80056a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056a4:	6004      	str	r4, [r0, #0]
 80056a6:	60c4      	str	r4, [r0, #12]
 80056a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80056ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80056b0:	b94c      	cbnz	r4, 80056c6 <__pow5mult+0x66>
 80056b2:	f240 2171 	movw	r1, #625	@ 0x271
 80056b6:	4638      	mov	r0, r7
 80056b8:	f7ff ff1a 	bl	80054f0 <__i2b>
 80056bc:	2300      	movs	r3, #0
 80056be:	4604      	mov	r4, r0
 80056c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80056c4:	6003      	str	r3, [r0, #0]
 80056c6:	f04f 0900 	mov.w	r9, #0
 80056ca:	07eb      	lsls	r3, r5, #31
 80056cc:	d50a      	bpl.n	80056e4 <__pow5mult+0x84>
 80056ce:	4631      	mov	r1, r6
 80056d0:	4622      	mov	r2, r4
 80056d2:	4638      	mov	r0, r7
 80056d4:	f7ff ff22 	bl	800551c <__multiply>
 80056d8:	4680      	mov	r8, r0
 80056da:	4631      	mov	r1, r6
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff fe09 	bl	80052f4 <_Bfree>
 80056e2:	4646      	mov	r6, r8
 80056e4:	106d      	asrs	r5, r5, #1
 80056e6:	d00b      	beq.n	8005700 <__pow5mult+0xa0>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	b938      	cbnz	r0, 80056fc <__pow5mult+0x9c>
 80056ec:	4622      	mov	r2, r4
 80056ee:	4621      	mov	r1, r4
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ff13 	bl	800551c <__multiply>
 80056f6:	6020      	str	r0, [r4, #0]
 80056f8:	f8c0 9000 	str.w	r9, [r0]
 80056fc:	4604      	mov	r4, r0
 80056fe:	e7e4      	b.n	80056ca <__pow5mult+0x6a>
 8005700:	4630      	mov	r0, r6
 8005702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005706:	bf00      	nop
 8005708:	08007c48 	.word	0x08007c48
 800570c:	08007ab8 	.word	0x08007ab8
 8005710:	08007b38 	.word	0x08007b38

08005714 <__lshift>:
 8005714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	460c      	mov	r4, r1
 800571a:	4607      	mov	r7, r0
 800571c:	4691      	mov	r9, r2
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6849      	ldr	r1, [r1, #4]
 8005722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800572c:	f108 0601 	add.w	r6, r8, #1
 8005730:	42b3      	cmp	r3, r6
 8005732:	db0b      	blt.n	800574c <__lshift+0x38>
 8005734:	4638      	mov	r0, r7
 8005736:	f7ff fd9d 	bl	8005274 <_Balloc>
 800573a:	4605      	mov	r5, r0
 800573c:	b948      	cbnz	r0, 8005752 <__lshift+0x3e>
 800573e:	4602      	mov	r2, r0
 8005740:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005744:	4b27      	ldr	r3, [pc, #156]	@ (80057e4 <__lshift+0xd0>)
 8005746:	4828      	ldr	r0, [pc, #160]	@ (80057e8 <__lshift+0xd4>)
 8005748:	f001 fb00 	bl	8006d4c <__assert_func>
 800574c:	3101      	adds	r1, #1
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	e7ee      	b.n	8005730 <__lshift+0x1c>
 8005752:	2300      	movs	r3, #0
 8005754:	f100 0114 	add.w	r1, r0, #20
 8005758:	f100 0210 	add.w	r2, r0, #16
 800575c:	4618      	mov	r0, r3
 800575e:	4553      	cmp	r3, sl
 8005760:	db33      	blt.n	80057ca <__lshift+0xb6>
 8005762:	6920      	ldr	r0, [r4, #16]
 8005764:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005768:	f104 0314 	add.w	r3, r4, #20
 800576c:	f019 091f 	ands.w	r9, r9, #31
 8005770:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005774:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005778:	d02b      	beq.n	80057d2 <__lshift+0xbe>
 800577a:	468a      	mov	sl, r1
 800577c:	2200      	movs	r2, #0
 800577e:	f1c9 0e20 	rsb	lr, r9, #32
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	fa00 f009 	lsl.w	r0, r0, r9
 8005788:	4310      	orrs	r0, r2
 800578a:	f84a 0b04 	str.w	r0, [sl], #4
 800578e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005792:	459c      	cmp	ip, r3
 8005794:	fa22 f20e 	lsr.w	r2, r2, lr
 8005798:	d8f3      	bhi.n	8005782 <__lshift+0x6e>
 800579a:	ebac 0304 	sub.w	r3, ip, r4
 800579e:	3b15      	subs	r3, #21
 80057a0:	f023 0303 	bic.w	r3, r3, #3
 80057a4:	3304      	adds	r3, #4
 80057a6:	f104 0015 	add.w	r0, r4, #21
 80057aa:	4560      	cmp	r0, ip
 80057ac:	bf88      	it	hi
 80057ae:	2304      	movhi	r3, #4
 80057b0:	50ca      	str	r2, [r1, r3]
 80057b2:	b10a      	cbz	r2, 80057b8 <__lshift+0xa4>
 80057b4:	f108 0602 	add.w	r6, r8, #2
 80057b8:	3e01      	subs	r6, #1
 80057ba:	4638      	mov	r0, r7
 80057bc:	4621      	mov	r1, r4
 80057be:	612e      	str	r6, [r5, #16]
 80057c0:	f7ff fd98 	bl	80052f4 <_Bfree>
 80057c4:	4628      	mov	r0, r5
 80057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80057ce:	3301      	adds	r3, #1
 80057d0:	e7c5      	b.n	800575e <__lshift+0x4a>
 80057d2:	3904      	subs	r1, #4
 80057d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d8:	459c      	cmp	ip, r3
 80057da:	f841 2f04 	str.w	r2, [r1, #4]!
 80057de:	d8f9      	bhi.n	80057d4 <__lshift+0xc0>
 80057e0:	e7ea      	b.n	80057b8 <__lshift+0xa4>
 80057e2:	bf00      	nop
 80057e4:	08007b27 	.word	0x08007b27
 80057e8:	08007b38 	.word	0x08007b38

080057ec <__mcmp>:
 80057ec:	4603      	mov	r3, r0
 80057ee:	690a      	ldr	r2, [r1, #16]
 80057f0:	6900      	ldr	r0, [r0, #16]
 80057f2:	b530      	push	{r4, r5, lr}
 80057f4:	1a80      	subs	r0, r0, r2
 80057f6:	d10e      	bne.n	8005816 <__mcmp+0x2a>
 80057f8:	3314      	adds	r3, #20
 80057fa:	3114      	adds	r1, #20
 80057fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005800:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005804:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005808:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800580c:	4295      	cmp	r5, r2
 800580e:	d003      	beq.n	8005818 <__mcmp+0x2c>
 8005810:	d205      	bcs.n	800581e <__mcmp+0x32>
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	bd30      	pop	{r4, r5, pc}
 8005818:	42a3      	cmp	r3, r4
 800581a:	d3f3      	bcc.n	8005804 <__mcmp+0x18>
 800581c:	e7fb      	b.n	8005816 <__mcmp+0x2a>
 800581e:	2001      	movs	r0, #1
 8005820:	e7f9      	b.n	8005816 <__mcmp+0x2a>
	...

08005824 <__mdiff>:
 8005824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005828:	4689      	mov	r9, r1
 800582a:	4606      	mov	r6, r0
 800582c:	4611      	mov	r1, r2
 800582e:	4648      	mov	r0, r9
 8005830:	4614      	mov	r4, r2
 8005832:	f7ff ffdb 	bl	80057ec <__mcmp>
 8005836:	1e05      	subs	r5, r0, #0
 8005838:	d112      	bne.n	8005860 <__mdiff+0x3c>
 800583a:	4629      	mov	r1, r5
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff fd19 	bl	8005274 <_Balloc>
 8005842:	4602      	mov	r2, r0
 8005844:	b928      	cbnz	r0, 8005852 <__mdiff+0x2e>
 8005846:	f240 2137 	movw	r1, #567	@ 0x237
 800584a:	4b3e      	ldr	r3, [pc, #248]	@ (8005944 <__mdiff+0x120>)
 800584c:	483e      	ldr	r0, [pc, #248]	@ (8005948 <__mdiff+0x124>)
 800584e:	f001 fa7d 	bl	8006d4c <__assert_func>
 8005852:	2301      	movs	r3, #1
 8005854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005858:	4610      	mov	r0, r2
 800585a:	b003      	add	sp, #12
 800585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005860:	bfbc      	itt	lt
 8005862:	464b      	movlt	r3, r9
 8005864:	46a1      	movlt	r9, r4
 8005866:	4630      	mov	r0, r6
 8005868:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800586c:	bfba      	itte	lt
 800586e:	461c      	movlt	r4, r3
 8005870:	2501      	movlt	r5, #1
 8005872:	2500      	movge	r5, #0
 8005874:	f7ff fcfe 	bl	8005274 <_Balloc>
 8005878:	4602      	mov	r2, r0
 800587a:	b918      	cbnz	r0, 8005884 <__mdiff+0x60>
 800587c:	f240 2145 	movw	r1, #581	@ 0x245
 8005880:	4b30      	ldr	r3, [pc, #192]	@ (8005944 <__mdiff+0x120>)
 8005882:	e7e3      	b.n	800584c <__mdiff+0x28>
 8005884:	f100 0b14 	add.w	fp, r0, #20
 8005888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800588c:	f109 0310 	add.w	r3, r9, #16
 8005890:	60c5      	str	r5, [r0, #12]
 8005892:	f04f 0c00 	mov.w	ip, #0
 8005896:	f109 0514 	add.w	r5, r9, #20
 800589a:	46d9      	mov	r9, fp
 800589c:	6926      	ldr	r6, [r4, #16]
 800589e:	f104 0e14 	add.w	lr, r4, #20
 80058a2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80058a6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80058aa:	9301      	str	r3, [sp, #4]
 80058ac:	9b01      	ldr	r3, [sp, #4]
 80058ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80058b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80058b6:	b281      	uxth	r1, r0
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	fa1f f38a 	uxth.w	r3, sl
 80058be:	1a5b      	subs	r3, r3, r1
 80058c0:	0c00      	lsrs	r0, r0, #16
 80058c2:	4463      	add	r3, ip
 80058c4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80058c8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058d2:	4576      	cmp	r6, lr
 80058d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058d8:	f849 3b04 	str.w	r3, [r9], #4
 80058dc:	d8e6      	bhi.n	80058ac <__mdiff+0x88>
 80058de:	1b33      	subs	r3, r6, r4
 80058e0:	3b15      	subs	r3, #21
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	3415      	adds	r4, #21
 80058e8:	3304      	adds	r3, #4
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	bf38      	it	cc
 80058ee:	2304      	movcc	r3, #4
 80058f0:	441d      	add	r5, r3
 80058f2:	445b      	add	r3, fp
 80058f4:	461e      	mov	r6, r3
 80058f6:	462c      	mov	r4, r5
 80058f8:	4544      	cmp	r4, r8
 80058fa:	d30e      	bcc.n	800591a <__mdiff+0xf6>
 80058fc:	f108 0103 	add.w	r1, r8, #3
 8005900:	1b49      	subs	r1, r1, r5
 8005902:	f021 0103 	bic.w	r1, r1, #3
 8005906:	3d03      	subs	r5, #3
 8005908:	45a8      	cmp	r8, r5
 800590a:	bf38      	it	cc
 800590c:	2100      	movcc	r1, #0
 800590e:	440b      	add	r3, r1
 8005910:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005914:	b199      	cbz	r1, 800593e <__mdiff+0x11a>
 8005916:	6117      	str	r7, [r2, #16]
 8005918:	e79e      	b.n	8005858 <__mdiff+0x34>
 800591a:	46e6      	mov	lr, ip
 800591c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005920:	fa1f fc81 	uxth.w	ip, r1
 8005924:	44f4      	add	ip, lr
 8005926:	0c08      	lsrs	r0, r1, #16
 8005928:	4471      	add	r1, lr
 800592a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800592e:	b289      	uxth	r1, r1
 8005930:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005934:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005938:	f846 1b04 	str.w	r1, [r6], #4
 800593c:	e7dc      	b.n	80058f8 <__mdiff+0xd4>
 800593e:	3f01      	subs	r7, #1
 8005940:	e7e6      	b.n	8005910 <__mdiff+0xec>
 8005942:	bf00      	nop
 8005944:	08007b27 	.word	0x08007b27
 8005948:	08007b38 	.word	0x08007b38

0800594c <__ulp>:
 800594c:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <__ulp+0x3c>)
 800594e:	400b      	ands	r3, r1
 8005950:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005954:	2b00      	cmp	r3, #0
 8005956:	dc08      	bgt.n	800596a <__ulp+0x1e>
 8005958:	425b      	negs	r3, r3
 800595a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800595e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005962:	da04      	bge.n	800596e <__ulp+0x22>
 8005964:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005968:	4113      	asrs	r3, r2
 800596a:	2200      	movs	r2, #0
 800596c:	e008      	b.n	8005980 <__ulp+0x34>
 800596e:	f1a2 0314 	sub.w	r3, r2, #20
 8005972:	2b1e      	cmp	r3, #30
 8005974:	bfd6      	itet	le
 8005976:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800597a:	2201      	movgt	r2, #1
 800597c:	40da      	lsrle	r2, r3
 800597e:	2300      	movs	r3, #0
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	7ff00000 	.word	0x7ff00000

0800598c <__b2d>:
 800598c:	6902      	ldr	r2, [r0, #16]
 800598e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005990:	f100 0614 	add.w	r6, r0, #20
 8005994:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005998:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800599c:	4f1e      	ldr	r7, [pc, #120]	@ (8005a18 <__b2d+0x8c>)
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff fd5a 	bl	8005458 <__hi0bits>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f1c0 0020 	rsb	r0, r0, #32
 80059aa:	2b0a      	cmp	r3, #10
 80059ac:	f1a2 0504 	sub.w	r5, r2, #4
 80059b0:	6008      	str	r0, [r1, #0]
 80059b2:	dc12      	bgt.n	80059da <__b2d+0x4e>
 80059b4:	42ae      	cmp	r6, r5
 80059b6:	bf2c      	ite	cs
 80059b8:	2200      	movcs	r2, #0
 80059ba:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80059be:	f1c3 0c0b 	rsb	ip, r3, #11
 80059c2:	3315      	adds	r3, #21
 80059c4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80059c8:	fa04 f303 	lsl.w	r3, r4, r3
 80059cc:	fa22 f20c 	lsr.w	r2, r2, ip
 80059d0:	ea4e 0107 	orr.w	r1, lr, r7
 80059d4:	431a      	orrs	r2, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	42ae      	cmp	r6, r5
 80059dc:	bf36      	itet	cc
 80059de:	f1a2 0508 	subcc.w	r5, r2, #8
 80059e2:	2200      	movcs	r2, #0
 80059e4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80059e8:	3b0b      	subs	r3, #11
 80059ea:	d012      	beq.n	8005a12 <__b2d+0x86>
 80059ec:	f1c3 0720 	rsb	r7, r3, #32
 80059f0:	fa22 f107 	lsr.w	r1, r2, r7
 80059f4:	409c      	lsls	r4, r3
 80059f6:	430c      	orrs	r4, r1
 80059f8:	42b5      	cmp	r5, r6
 80059fa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80059fe:	bf94      	ite	ls
 8005a00:	2400      	movls	r4, #0
 8005a02:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005a06:	409a      	lsls	r2, r3
 8005a08:	40fc      	lsrs	r4, r7
 8005a0a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005a0e:	4322      	orrs	r2, r4
 8005a10:	e7e1      	b.n	80059d6 <__b2d+0x4a>
 8005a12:	ea44 0107 	orr.w	r1, r4, r7
 8005a16:	e7de      	b.n	80059d6 <__b2d+0x4a>
 8005a18:	3ff00000 	.word	0x3ff00000

08005a1c <__d2b>:
 8005a1c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005a20:	2101      	movs	r1, #1
 8005a22:	4690      	mov	r8, r2
 8005a24:	4699      	mov	r9, r3
 8005a26:	9e08      	ldr	r6, [sp, #32]
 8005a28:	f7ff fc24 	bl	8005274 <_Balloc>
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	b930      	cbnz	r0, 8005a3e <__d2b+0x22>
 8005a30:	4602      	mov	r2, r0
 8005a32:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a36:	4b23      	ldr	r3, [pc, #140]	@ (8005ac4 <__d2b+0xa8>)
 8005a38:	4823      	ldr	r0, [pc, #140]	@ (8005ac8 <__d2b+0xac>)
 8005a3a:	f001 f987 	bl	8006d4c <__assert_func>
 8005a3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a46:	b10d      	cbz	r5, 8005a4c <__d2b+0x30>
 8005a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	f1b8 0300 	subs.w	r3, r8, #0
 8005a52:	d024      	beq.n	8005a9e <__d2b+0x82>
 8005a54:	4668      	mov	r0, sp
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f7ff fd1d 	bl	8005496 <__lo0bits>
 8005a5c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a60:	b1d8      	cbz	r0, 8005a9a <__d2b+0x7e>
 8005a62:	f1c0 0320 	rsb	r3, r0, #32
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	430b      	orrs	r3, r1
 8005a6c:	40c2      	lsrs	r2, r0
 8005a6e:	6163      	str	r3, [r4, #20]
 8005a70:	9201      	str	r2, [sp, #4]
 8005a72:	9b01      	ldr	r3, [sp, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2201      	moveq	r2, #1
 8005a7a:	2202      	movne	r2, #2
 8005a7c:	61a3      	str	r3, [r4, #24]
 8005a7e:	6122      	str	r2, [r4, #16]
 8005a80:	b1ad      	cbz	r5, 8005aae <__d2b+0x92>
 8005a82:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a86:	4405      	add	r5, r0
 8005a88:	6035      	str	r5, [r6, #0]
 8005a8a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a90:	6018      	str	r0, [r3, #0]
 8005a92:	4620      	mov	r0, r4
 8005a94:	b002      	add	sp, #8
 8005a96:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005a9a:	6161      	str	r1, [r4, #20]
 8005a9c:	e7e9      	b.n	8005a72 <__d2b+0x56>
 8005a9e:	a801      	add	r0, sp, #4
 8005aa0:	f7ff fcf9 	bl	8005496 <__lo0bits>
 8005aa4:	9b01      	ldr	r3, [sp, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	6163      	str	r3, [r4, #20]
 8005aaa:	3020      	adds	r0, #32
 8005aac:	e7e7      	b.n	8005a7e <__d2b+0x62>
 8005aae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ab2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ab6:	6030      	str	r0, [r6, #0]
 8005ab8:	6918      	ldr	r0, [r3, #16]
 8005aba:	f7ff fccd 	bl	8005458 <__hi0bits>
 8005abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ac2:	e7e4      	b.n	8005a8e <__d2b+0x72>
 8005ac4:	08007b27 	.word	0x08007b27
 8005ac8:	08007b38 	.word	0x08007b38

08005acc <__ratio>:
 8005acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	e9cd 1000 	strd	r1, r0, [sp]
 8005ad6:	a902      	add	r1, sp, #8
 8005ad8:	f7ff ff58 	bl	800598c <__b2d>
 8005adc:	468b      	mov	fp, r1
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	9800      	ldr	r0, [sp, #0]
 8005ae4:	a903      	add	r1, sp, #12
 8005ae6:	f7ff ff51 	bl	800598c <__b2d>
 8005aea:	460d      	mov	r5, r1
 8005aec:	9b01      	ldr	r3, [sp, #4]
 8005aee:	4689      	mov	r9, r1
 8005af0:	6919      	ldr	r1, [r3, #16]
 8005af2:	9b00      	ldr	r3, [sp, #0]
 8005af4:	4604      	mov	r4, r0
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	4630      	mov	r0, r6
 8005afa:	1ac9      	subs	r1, r1, r3
 8005afc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bfcd      	iteet	gt
 8005b0a:	463a      	movgt	r2, r7
 8005b0c:	462a      	movle	r2, r5
 8005b0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005b12:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005b16:	bfd8      	it	le
 8005b18:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	4622      	mov	r2, r4
 8005b20:	4659      	mov	r1, fp
 8005b22:	f7fa fe03 	bl	800072c <__aeabi_ddiv>
 8005b26:	b005      	add	sp, #20
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b2c <__copybits>:
 8005b2c:	3901      	subs	r1, #1
 8005b2e:	b570      	push	{r4, r5, r6, lr}
 8005b30:	1149      	asrs	r1, r1, #5
 8005b32:	6914      	ldr	r4, [r2, #16]
 8005b34:	3101      	adds	r1, #1
 8005b36:	f102 0314 	add.w	r3, r2, #20
 8005b3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b42:	1f05      	subs	r5, r0, #4
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d30c      	bcc.n	8005b62 <__copybits+0x36>
 8005b48:	1aa3      	subs	r3, r4, r2
 8005b4a:	3b11      	subs	r3, #17
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	3211      	adds	r2, #17
 8005b52:	42a2      	cmp	r2, r4
 8005b54:	bf88      	it	hi
 8005b56:	2300      	movhi	r3, #0
 8005b58:	4418      	add	r0, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4288      	cmp	r0, r1
 8005b5e:	d305      	bcc.n	8005b6c <__copybits+0x40>
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b66:	f845 6f04 	str.w	r6, [r5, #4]!
 8005b6a:	e7eb      	b.n	8005b44 <__copybits+0x18>
 8005b6c:	f840 3b04 	str.w	r3, [r0], #4
 8005b70:	e7f4      	b.n	8005b5c <__copybits+0x30>

08005b72 <__any_on>:
 8005b72:	f100 0214 	add.w	r2, r0, #20
 8005b76:	6900      	ldr	r0, [r0, #16]
 8005b78:	114b      	asrs	r3, r1, #5
 8005b7a:	4298      	cmp	r0, r3
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	db11      	blt.n	8005ba4 <__any_on+0x32>
 8005b80:	dd0a      	ble.n	8005b98 <__any_on+0x26>
 8005b82:	f011 011f 	ands.w	r1, r1, #31
 8005b86:	d007      	beq.n	8005b98 <__any_on+0x26>
 8005b88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b8c:	fa24 f001 	lsr.w	r0, r4, r1
 8005b90:	fa00 f101 	lsl.w	r1, r0, r1
 8005b94:	428c      	cmp	r4, r1
 8005b96:	d10b      	bne.n	8005bb0 <__any_on+0x3e>
 8005b98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d803      	bhi.n	8005ba8 <__any_on+0x36>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	bd10      	pop	{r4, pc}
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	e7f7      	b.n	8005b98 <__any_on+0x26>
 8005ba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bac:	2900      	cmp	r1, #0
 8005bae:	d0f5      	beq.n	8005b9c <__any_on+0x2a>
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	e7f6      	b.n	8005ba2 <__any_on+0x30>

08005bb4 <sulp>:
 8005bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb8:	460f      	mov	r7, r1
 8005bba:	4690      	mov	r8, r2
 8005bbc:	f7ff fec6 	bl	800594c <__ulp>
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	460d      	mov	r5, r1
 8005bc4:	f1b8 0f00 	cmp.w	r8, #0
 8005bc8:	d011      	beq.n	8005bee <sulp+0x3a>
 8005bca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005bce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd0b      	ble.n	8005bee <sulp+0x3a>
 8005bd6:	2400      	movs	r4, #0
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005bde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005be2:	4622      	mov	r2, r4
 8005be4:	462b      	mov	r3, r5
 8005be6:	f7fa fc77 	bl	80004d8 <__aeabi_dmul>
 8005bea:	4604      	mov	r4, r0
 8005bec:	460d      	mov	r5, r1
 8005bee:	4620      	mov	r0, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005bf8 <_strtod_l>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	b09f      	sub	sp, #124	@ 0x7c
 8005bfe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005c00:	2200      	movs	r2, #0
 8005c02:	460c      	mov	r4, r1
 8005c04:	921a      	str	r2, [sp, #104]	@ 0x68
 8005c06:	f04f 0a00 	mov.w	sl, #0
 8005c0a:	f04f 0b00 	mov.w	fp, #0
 8005c0e:	460a      	mov	r2, r1
 8005c10:	9005      	str	r0, [sp, #20]
 8005c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c14:	7811      	ldrb	r1, [r2, #0]
 8005c16:	292b      	cmp	r1, #43	@ 0x2b
 8005c18:	d048      	beq.n	8005cac <_strtod_l+0xb4>
 8005c1a:	d836      	bhi.n	8005c8a <_strtod_l+0x92>
 8005c1c:	290d      	cmp	r1, #13
 8005c1e:	d830      	bhi.n	8005c82 <_strtod_l+0x8a>
 8005c20:	2908      	cmp	r1, #8
 8005c22:	d830      	bhi.n	8005c86 <_strtod_l+0x8e>
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d039      	beq.n	8005c9c <_strtod_l+0xa4>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005c2e:	782a      	ldrb	r2, [r5, #0]
 8005c30:	2a30      	cmp	r2, #48	@ 0x30
 8005c32:	f040 80b0 	bne.w	8005d96 <_strtod_l+0x19e>
 8005c36:	786a      	ldrb	r2, [r5, #1]
 8005c38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c3c:	2a58      	cmp	r2, #88	@ 0x58
 8005c3e:	d16c      	bne.n	8005d1a <_strtod_l+0x122>
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c44:	4a8f      	ldr	r2, [pc, #572]	@ (8005e84 <_strtod_l+0x28c>)
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	ab1a      	add	r3, sp, #104	@ 0x68
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	9805      	ldr	r0, [sp, #20]
 8005c4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005c50:	a919      	add	r1, sp, #100	@ 0x64
 8005c52:	f001 f915 	bl	8006e80 <__gethex>
 8005c56:	f010 060f 	ands.w	r6, r0, #15
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	d005      	beq.n	8005c6a <_strtod_l+0x72>
 8005c5e:	2e06      	cmp	r6, #6
 8005c60:	d126      	bne.n	8005cb0 <_strtod_l+0xb8>
 8005c62:	2300      	movs	r3, #0
 8005c64:	3501      	adds	r5, #1
 8005c66:	9519      	str	r5, [sp, #100]	@ 0x64
 8005c68:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 8582 	bne.w	8006776 <_strtod_l+0xb7e>
 8005c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c74:	b1bb      	cbz	r3, 8005ca6 <_strtod_l+0xae>
 8005c76:	4650      	mov	r0, sl
 8005c78:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005c7c:	b01f      	add	sp, #124	@ 0x7c
 8005c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c82:	2920      	cmp	r1, #32
 8005c84:	d1d0      	bne.n	8005c28 <_strtod_l+0x30>
 8005c86:	3201      	adds	r2, #1
 8005c88:	e7c3      	b.n	8005c12 <_strtod_l+0x1a>
 8005c8a:	292d      	cmp	r1, #45	@ 0x2d
 8005c8c:	d1cc      	bne.n	8005c28 <_strtod_l+0x30>
 8005c8e:	2101      	movs	r1, #1
 8005c90:	910e      	str	r1, [sp, #56]	@ 0x38
 8005c92:	1c51      	adds	r1, r2, #1
 8005c94:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c96:	7852      	ldrb	r2, [r2, #1]
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d1c7      	bne.n	8005c2c <_strtod_l+0x34>
 8005c9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c9e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 8566 	bne.w	8006772 <_strtod_l+0xb7a>
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	4659      	mov	r1, fp
 8005caa:	e7e7      	b.n	8005c7c <_strtod_l+0x84>
 8005cac:	2100      	movs	r1, #0
 8005cae:	e7ef      	b.n	8005c90 <_strtod_l+0x98>
 8005cb0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005cb2:	b13a      	cbz	r2, 8005cc4 <_strtod_l+0xcc>
 8005cb4:	2135      	movs	r1, #53	@ 0x35
 8005cb6:	a81c      	add	r0, sp, #112	@ 0x70
 8005cb8:	f7ff ff38 	bl	8005b2c <__copybits>
 8005cbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cbe:	9805      	ldr	r0, [sp, #20]
 8005cc0:	f7ff fb18 	bl	80052f4 <_Bfree>
 8005cc4:	3e01      	subs	r6, #1
 8005cc6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005cc8:	2e04      	cmp	r6, #4
 8005cca:	d806      	bhi.n	8005cda <_strtod_l+0xe2>
 8005ccc:	e8df f006 	tbb	[pc, r6]
 8005cd0:	201d0314 	.word	0x201d0314
 8005cd4:	14          	.byte	0x14
 8005cd5:	00          	.byte	0x00
 8005cd6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005cda:	05e1      	lsls	r1, r4, #23
 8005cdc:	bf48      	it	mi
 8005cde:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005ce2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ce6:	0d1b      	lsrs	r3, r3, #20
 8005ce8:	051b      	lsls	r3, r3, #20
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1bd      	bne.n	8005c6a <_strtod_l+0x72>
 8005cee:	f7fe fb25 	bl	800433c <__errno>
 8005cf2:	2322      	movs	r3, #34	@ 0x22
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	e7b8      	b.n	8005c6a <_strtod_l+0x72>
 8005cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005cfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005d00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d04:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d08:	e7e7      	b.n	8005cda <_strtod_l+0xe2>
 8005d0a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005e88 <_strtod_l+0x290>
 8005d0e:	e7e4      	b.n	8005cda <_strtod_l+0xe2>
 8005d10:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005d14:	f04f 3aff 	mov.w	sl, #4294967295
 8005d18:	e7df      	b.n	8005cda <_strtod_l+0xe2>
 8005d1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b30      	cmp	r3, #48	@ 0x30
 8005d24:	d0f9      	beq.n	8005d1a <_strtod_l+0x122>
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d09f      	beq.n	8005c6a <_strtod_l+0x72>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	2700      	movs	r7, #0
 8005d2e:	220a      	movs	r2, #10
 8005d30:	46b9      	mov	r9, r7
 8005d32:	9308      	str	r3, [sp, #32]
 8005d34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d36:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005d38:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d3a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005d3c:	7805      	ldrb	r5, [r0, #0]
 8005d3e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005d42:	b2d9      	uxtb	r1, r3
 8005d44:	2909      	cmp	r1, #9
 8005d46:	d928      	bls.n	8005d9a <_strtod_l+0x1a2>
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4950      	ldr	r1, [pc, #320]	@ (8005e8c <_strtod_l+0x294>)
 8005d4c:	f000 ffc8 	bl	8006ce0 <strncmp>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d032      	beq.n	8005dba <_strtod_l+0x1c2>
 8005d54:	2000      	movs	r0, #0
 8005d56:	462a      	mov	r2, r5
 8005d58:	4603      	mov	r3, r0
 8005d5a:	464d      	mov	r5, r9
 8005d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d5e:	2a65      	cmp	r2, #101	@ 0x65
 8005d60:	d001      	beq.n	8005d66 <_strtod_l+0x16e>
 8005d62:	2a45      	cmp	r2, #69	@ 0x45
 8005d64:	d114      	bne.n	8005d90 <_strtod_l+0x198>
 8005d66:	b91d      	cbnz	r5, 8005d70 <_strtod_l+0x178>
 8005d68:	9a08      	ldr	r2, [sp, #32]
 8005d6a:	4302      	orrs	r2, r0
 8005d6c:	d096      	beq.n	8005c9c <_strtod_l+0xa4>
 8005d6e:	2500      	movs	r5, #0
 8005d70:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005d72:	1c62      	adds	r2, r4, #1
 8005d74:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d76:	7862      	ldrb	r2, [r4, #1]
 8005d78:	2a2b      	cmp	r2, #43	@ 0x2b
 8005d7a:	d07a      	beq.n	8005e72 <_strtod_l+0x27a>
 8005d7c:	2a2d      	cmp	r2, #45	@ 0x2d
 8005d7e:	d07e      	beq.n	8005e7e <_strtod_l+0x286>
 8005d80:	f04f 0c00 	mov.w	ip, #0
 8005d84:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005d88:	2909      	cmp	r1, #9
 8005d8a:	f240 8085 	bls.w	8005e98 <_strtod_l+0x2a0>
 8005d8e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d90:	f04f 0800 	mov.w	r8, #0
 8005d94:	e0a5      	b.n	8005ee2 <_strtod_l+0x2ea>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e7c8      	b.n	8005d2c <_strtod_l+0x134>
 8005d9a:	f1b9 0f08 	cmp.w	r9, #8
 8005d9e:	bfd8      	it	le
 8005da0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005da2:	f100 0001 	add.w	r0, r0, #1
 8005da6:	bfd6      	itet	le
 8005da8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005dac:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005db0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005db2:	f109 0901 	add.w	r9, r9, #1
 8005db6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005db8:	e7bf      	b.n	8005d3a <_strtod_l+0x142>
 8005dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dc0:	785a      	ldrb	r2, [r3, #1]
 8005dc2:	f1b9 0f00 	cmp.w	r9, #0
 8005dc6:	d03b      	beq.n	8005e40 <_strtod_l+0x248>
 8005dc8:	464d      	mov	r5, r9
 8005dca:	900a      	str	r0, [sp, #40]	@ 0x28
 8005dcc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d912      	bls.n	8005dfa <_strtod_l+0x202>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e7c2      	b.n	8005d5e <_strtod_l+0x166>
 8005dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dda:	3001      	adds	r0, #1
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	9219      	str	r2, [sp, #100]	@ 0x64
 8005de0:	785a      	ldrb	r2, [r3, #1]
 8005de2:	2a30      	cmp	r2, #48	@ 0x30
 8005de4:	d0f8      	beq.n	8005dd8 <_strtod_l+0x1e0>
 8005de6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	f200 84c8 	bhi.w	8006780 <_strtod_l+0xb88>
 8005df0:	900a      	str	r0, [sp, #40]	@ 0x28
 8005df2:	2000      	movs	r0, #0
 8005df4:	4605      	mov	r5, r0
 8005df6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005df8:	930c      	str	r3, [sp, #48]	@ 0x30
 8005dfa:	3a30      	subs	r2, #48	@ 0x30
 8005dfc:	f100 0301 	add.w	r3, r0, #1
 8005e00:	d018      	beq.n	8005e34 <_strtod_l+0x23c>
 8005e02:	462e      	mov	r6, r5
 8005e04:	f04f 0e0a 	mov.w	lr, #10
 8005e08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e0a:	4419      	add	r1, r3
 8005e0c:	910a      	str	r1, [sp, #40]	@ 0x28
 8005e0e:	1c71      	adds	r1, r6, #1
 8005e10:	eba1 0c05 	sub.w	ip, r1, r5
 8005e14:	4563      	cmp	r3, ip
 8005e16:	dc15      	bgt.n	8005e44 <_strtod_l+0x24c>
 8005e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005e1c:	182b      	adds	r3, r5, r0
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	f105 0501 	add.w	r5, r5, #1
 8005e24:	4405      	add	r5, r0
 8005e26:	dc1a      	bgt.n	8005e5e <_strtod_l+0x266>
 8005e28:	230a      	movs	r3, #10
 8005e2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e2c:	fb03 2301 	mla	r3, r3, r1, r2
 8005e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e32:	2300      	movs	r3, #0
 8005e34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e36:	4618      	mov	r0, r3
 8005e38:	1c51      	adds	r1, r2, #1
 8005e3a:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e3c:	7852      	ldrb	r2, [r2, #1]
 8005e3e:	e7c5      	b.n	8005dcc <_strtod_l+0x1d4>
 8005e40:	4648      	mov	r0, r9
 8005e42:	e7ce      	b.n	8005de2 <_strtod_l+0x1ea>
 8005e44:	2e08      	cmp	r6, #8
 8005e46:	dc05      	bgt.n	8005e54 <_strtod_l+0x25c>
 8005e48:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005e4a:	fb0e f606 	mul.w	r6, lr, r6
 8005e4e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005e50:	460e      	mov	r6, r1
 8005e52:	e7dc      	b.n	8005e0e <_strtod_l+0x216>
 8005e54:	2910      	cmp	r1, #16
 8005e56:	bfd8      	it	le
 8005e58:	fb0e f707 	mulle.w	r7, lr, r7
 8005e5c:	e7f8      	b.n	8005e50 <_strtod_l+0x258>
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	bfdc      	itt	le
 8005e62:	230a      	movle	r3, #10
 8005e64:	fb03 2707 	mlale	r7, r3, r7, r2
 8005e68:	e7e3      	b.n	8005e32 <_strtod_l+0x23a>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e77a      	b.n	8005d68 <_strtod_l+0x170>
 8005e72:	f04f 0c00 	mov.w	ip, #0
 8005e76:	1ca2      	adds	r2, r4, #2
 8005e78:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e7a:	78a2      	ldrb	r2, [r4, #2]
 8005e7c:	e782      	b.n	8005d84 <_strtod_l+0x18c>
 8005e7e:	f04f 0c01 	mov.w	ip, #1
 8005e82:	e7f8      	b.n	8005e76 <_strtod_l+0x27e>
 8005e84:	08007d5c 	.word	0x08007d5c
 8005e88:	7ff00000 	.word	0x7ff00000
 8005e8c:	08007b91 	.word	0x08007b91
 8005e90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e92:	1c51      	adds	r1, r2, #1
 8005e94:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e96:	7852      	ldrb	r2, [r2, #1]
 8005e98:	2a30      	cmp	r2, #48	@ 0x30
 8005e9a:	d0f9      	beq.n	8005e90 <_strtod_l+0x298>
 8005e9c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005ea0:	2908      	cmp	r1, #8
 8005ea2:	f63f af75 	bhi.w	8005d90 <_strtod_l+0x198>
 8005ea6:	f04f 080a 	mov.w	r8, #10
 8005eaa:	3a30      	subs	r2, #48	@ 0x30
 8005eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005eb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005eb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005eb4:	1c56      	adds	r6, r2, #1
 8005eb6:	9619      	str	r6, [sp, #100]	@ 0x64
 8005eb8:	7852      	ldrb	r2, [r2, #1]
 8005eba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005ebe:	f1be 0f09 	cmp.w	lr, #9
 8005ec2:	d939      	bls.n	8005f38 <_strtod_l+0x340>
 8005ec4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ec6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005eca:	1a76      	subs	r6, r6, r1
 8005ecc:	2e08      	cmp	r6, #8
 8005ece:	dc03      	bgt.n	8005ed8 <_strtod_l+0x2e0>
 8005ed0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ed2:	4588      	cmp	r8, r1
 8005ed4:	bfa8      	it	ge
 8005ed6:	4688      	movge	r8, r1
 8005ed8:	f1bc 0f00 	cmp.w	ip, #0
 8005edc:	d001      	beq.n	8005ee2 <_strtod_l+0x2ea>
 8005ede:	f1c8 0800 	rsb	r8, r8, #0
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	d14e      	bne.n	8005f84 <_strtod_l+0x38c>
 8005ee6:	9908      	ldr	r1, [sp, #32]
 8005ee8:	4308      	orrs	r0, r1
 8005eea:	f47f aebe 	bne.w	8005c6a <_strtod_l+0x72>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f47f aed4 	bne.w	8005c9c <_strtod_l+0xa4>
 8005ef4:	2a69      	cmp	r2, #105	@ 0x69
 8005ef6:	d028      	beq.n	8005f4a <_strtod_l+0x352>
 8005ef8:	dc25      	bgt.n	8005f46 <_strtod_l+0x34e>
 8005efa:	2a49      	cmp	r2, #73	@ 0x49
 8005efc:	d025      	beq.n	8005f4a <_strtod_l+0x352>
 8005efe:	2a4e      	cmp	r2, #78	@ 0x4e
 8005f00:	f47f aecc 	bne.w	8005c9c <_strtod_l+0xa4>
 8005f04:	4999      	ldr	r1, [pc, #612]	@ (800616c <_strtod_l+0x574>)
 8005f06:	a819      	add	r0, sp, #100	@ 0x64
 8005f08:	f001 f9dc 	bl	80072c4 <__match>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f43f aec5 	beq.w	8005c9c <_strtod_l+0xa4>
 8005f12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b28      	cmp	r3, #40	@ 0x28
 8005f18:	d12e      	bne.n	8005f78 <_strtod_l+0x380>
 8005f1a:	4995      	ldr	r1, [pc, #596]	@ (8006170 <_strtod_l+0x578>)
 8005f1c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005f1e:	a819      	add	r0, sp, #100	@ 0x64
 8005f20:	f001 f9e4 	bl	80072ec <__hexnan>
 8005f24:	2805      	cmp	r0, #5
 8005f26:	d127      	bne.n	8005f78 <_strtod_l+0x380>
 8005f28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005f2a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005f2e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005f32:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005f36:	e698      	b.n	8005c6a <_strtod_l+0x72>
 8005f38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f3a:	fb08 2101 	mla	r1, r8, r1, r2
 8005f3e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005f42:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f44:	e7b5      	b.n	8005eb2 <_strtod_l+0x2ba>
 8005f46:	2a6e      	cmp	r2, #110	@ 0x6e
 8005f48:	e7da      	b.n	8005f00 <_strtod_l+0x308>
 8005f4a:	498a      	ldr	r1, [pc, #552]	@ (8006174 <_strtod_l+0x57c>)
 8005f4c:	a819      	add	r0, sp, #100	@ 0x64
 8005f4e:	f001 f9b9 	bl	80072c4 <__match>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	f43f aea2 	beq.w	8005c9c <_strtod_l+0xa4>
 8005f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f5a:	4987      	ldr	r1, [pc, #540]	@ (8006178 <_strtod_l+0x580>)
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	a819      	add	r0, sp, #100	@ 0x64
 8005f60:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f62:	f001 f9af 	bl	80072c4 <__match>
 8005f66:	b910      	cbnz	r0, 8005f6e <_strtod_l+0x376>
 8005f68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f6e:	f04f 0a00 	mov.w	sl, #0
 8005f72:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800617c <_strtod_l+0x584>
 8005f76:	e678      	b.n	8005c6a <_strtod_l+0x72>
 8005f78:	4881      	ldr	r0, [pc, #516]	@ (8006180 <_strtod_l+0x588>)
 8005f7a:	f000 fee1 	bl	8006d40 <nan>
 8005f7e:	4682      	mov	sl, r0
 8005f80:	468b      	mov	fp, r1
 8005f82:	e672      	b.n	8005c6a <_strtod_l+0x72>
 8005f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f86:	f1b9 0f00 	cmp.w	r9, #0
 8005f8a:	bf08      	it	eq
 8005f8c:	46a9      	moveq	r9, r5
 8005f8e:	eba8 0303 	sub.w	r3, r8, r3
 8005f92:	2d10      	cmp	r5, #16
 8005f94:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005f96:	462c      	mov	r4, r5
 8005f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f9a:	bfa8      	it	ge
 8005f9c:	2410      	movge	r4, #16
 8005f9e:	f7fa fa21 	bl	80003e4 <__aeabi_ui2d>
 8005fa2:	2d09      	cmp	r5, #9
 8005fa4:	4682      	mov	sl, r0
 8005fa6:	468b      	mov	fp, r1
 8005fa8:	dc11      	bgt.n	8005fce <_strtod_l+0x3d6>
 8005faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f43f ae5c 	beq.w	8005c6a <_strtod_l+0x72>
 8005fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb4:	dd76      	ble.n	80060a4 <_strtod_l+0x4ac>
 8005fb6:	2b16      	cmp	r3, #22
 8005fb8:	dc5d      	bgt.n	8006076 <_strtod_l+0x47e>
 8005fba:	4972      	ldr	r1, [pc, #456]	@ (8006184 <_strtod_l+0x58c>)
 8005fbc:	4652      	mov	r2, sl
 8005fbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fc2:	465b      	mov	r3, fp
 8005fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fc8:	f7fa fa86 	bl	80004d8 <__aeabi_dmul>
 8005fcc:	e7d7      	b.n	8005f7e <_strtod_l+0x386>
 8005fce:	4b6d      	ldr	r3, [pc, #436]	@ (8006184 <_strtod_l+0x58c>)
 8005fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005fd8:	f7fa fa7e 	bl	80004d8 <__aeabi_dmul>
 8005fdc:	4682      	mov	sl, r0
 8005fde:	4638      	mov	r0, r7
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	f7fa f9ff 	bl	80003e4 <__aeabi_ui2d>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4650      	mov	r0, sl
 8005fec:	4659      	mov	r1, fp
 8005fee:	f7fa f8bd 	bl	800016c <__adddf3>
 8005ff2:	2d0f      	cmp	r5, #15
 8005ff4:	4682      	mov	sl, r0
 8005ff6:	468b      	mov	fp, r1
 8005ff8:	ddd7      	ble.n	8005faa <_strtod_l+0x3b2>
 8005ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffc:	1b2c      	subs	r4, r5, r4
 8005ffe:	441c      	add	r4, r3
 8006000:	2c00      	cmp	r4, #0
 8006002:	f340 8093 	ble.w	800612c <_strtod_l+0x534>
 8006006:	f014 030f 	ands.w	r3, r4, #15
 800600a:	d00a      	beq.n	8006022 <_strtod_l+0x42a>
 800600c:	495d      	ldr	r1, [pc, #372]	@ (8006184 <_strtod_l+0x58c>)
 800600e:	4652      	mov	r2, sl
 8006010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006018:	465b      	mov	r3, fp
 800601a:	f7fa fa5d 	bl	80004d8 <__aeabi_dmul>
 800601e:	4682      	mov	sl, r0
 8006020:	468b      	mov	fp, r1
 8006022:	f034 040f 	bics.w	r4, r4, #15
 8006026:	d073      	beq.n	8006110 <_strtod_l+0x518>
 8006028:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800602c:	dd49      	ble.n	80060c2 <_strtod_l+0x4ca>
 800602e:	2400      	movs	r4, #0
 8006030:	46a0      	mov	r8, r4
 8006032:	46a1      	mov	r9, r4
 8006034:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006036:	2322      	movs	r3, #34	@ 0x22
 8006038:	f04f 0a00 	mov.w	sl, #0
 800603c:	9a05      	ldr	r2, [sp, #20]
 800603e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800617c <_strtod_l+0x584>
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006046:	2b00      	cmp	r3, #0
 8006048:	f43f ae0f 	beq.w	8005c6a <_strtod_l+0x72>
 800604c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800604e:	9805      	ldr	r0, [sp, #20]
 8006050:	f7ff f950 	bl	80052f4 <_Bfree>
 8006054:	4649      	mov	r1, r9
 8006056:	9805      	ldr	r0, [sp, #20]
 8006058:	f7ff f94c 	bl	80052f4 <_Bfree>
 800605c:	4641      	mov	r1, r8
 800605e:	9805      	ldr	r0, [sp, #20]
 8006060:	f7ff f948 	bl	80052f4 <_Bfree>
 8006064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006066:	9805      	ldr	r0, [sp, #20]
 8006068:	f7ff f944 	bl	80052f4 <_Bfree>
 800606c:	4621      	mov	r1, r4
 800606e:	9805      	ldr	r0, [sp, #20]
 8006070:	f7ff f940 	bl	80052f4 <_Bfree>
 8006074:	e5f9      	b.n	8005c6a <_strtod_l+0x72>
 8006076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006078:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800607c:	4293      	cmp	r3, r2
 800607e:	dbbc      	blt.n	8005ffa <_strtod_l+0x402>
 8006080:	4c40      	ldr	r4, [pc, #256]	@ (8006184 <_strtod_l+0x58c>)
 8006082:	f1c5 050f 	rsb	r5, r5, #15
 8006086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800608a:	4652      	mov	r2, sl
 800608c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006090:	465b      	mov	r3, fp
 8006092:	f7fa fa21 	bl	80004d8 <__aeabi_dmul>
 8006096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006098:	1b5d      	subs	r5, r3, r5
 800609a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800609e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060a2:	e791      	b.n	8005fc8 <_strtod_l+0x3d0>
 80060a4:	3316      	adds	r3, #22
 80060a6:	dba8      	blt.n	8005ffa <_strtod_l+0x402>
 80060a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060aa:	4650      	mov	r0, sl
 80060ac:	eba3 0808 	sub.w	r8, r3, r8
 80060b0:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <_strtod_l+0x58c>)
 80060b2:	4659      	mov	r1, fp
 80060b4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80060b8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80060bc:	f7fa fb36 	bl	800072c <__aeabi_ddiv>
 80060c0:	e75d      	b.n	8005f7e <_strtod_l+0x386>
 80060c2:	2300      	movs	r3, #0
 80060c4:	4650      	mov	r0, sl
 80060c6:	4659      	mov	r1, fp
 80060c8:	461e      	mov	r6, r3
 80060ca:	4f2f      	ldr	r7, [pc, #188]	@ (8006188 <_strtod_l+0x590>)
 80060cc:	1124      	asrs	r4, r4, #4
 80060ce:	2c01      	cmp	r4, #1
 80060d0:	dc21      	bgt.n	8006116 <_strtod_l+0x51e>
 80060d2:	b10b      	cbz	r3, 80060d8 <_strtod_l+0x4e0>
 80060d4:	4682      	mov	sl, r0
 80060d6:	468b      	mov	fp, r1
 80060d8:	492b      	ldr	r1, [pc, #172]	@ (8006188 <_strtod_l+0x590>)
 80060da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80060de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80060e2:	4652      	mov	r2, sl
 80060e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060e8:	465b      	mov	r3, fp
 80060ea:	f7fa f9f5 	bl	80004d8 <__aeabi_dmul>
 80060ee:	4b23      	ldr	r3, [pc, #140]	@ (800617c <_strtod_l+0x584>)
 80060f0:	460a      	mov	r2, r1
 80060f2:	400b      	ands	r3, r1
 80060f4:	4925      	ldr	r1, [pc, #148]	@ (800618c <_strtod_l+0x594>)
 80060f6:	4682      	mov	sl, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	d898      	bhi.n	800602e <_strtod_l+0x436>
 80060fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006100:	428b      	cmp	r3, r1
 8006102:	bf86      	itte	hi
 8006104:	f04f 3aff 	movhi.w	sl, #4294967295
 8006108:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006190 <_strtod_l+0x598>
 800610c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006110:	2300      	movs	r3, #0
 8006112:	9308      	str	r3, [sp, #32]
 8006114:	e076      	b.n	8006204 <_strtod_l+0x60c>
 8006116:	07e2      	lsls	r2, r4, #31
 8006118:	d504      	bpl.n	8006124 <_strtod_l+0x52c>
 800611a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611e:	f7fa f9db 	bl	80004d8 <__aeabi_dmul>
 8006122:	2301      	movs	r3, #1
 8006124:	3601      	adds	r6, #1
 8006126:	1064      	asrs	r4, r4, #1
 8006128:	3708      	adds	r7, #8
 800612a:	e7d0      	b.n	80060ce <_strtod_l+0x4d6>
 800612c:	d0f0      	beq.n	8006110 <_strtod_l+0x518>
 800612e:	4264      	negs	r4, r4
 8006130:	f014 020f 	ands.w	r2, r4, #15
 8006134:	d00a      	beq.n	800614c <_strtod_l+0x554>
 8006136:	4b13      	ldr	r3, [pc, #76]	@ (8006184 <_strtod_l+0x58c>)
 8006138:	4650      	mov	r0, sl
 800613a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800613e:	4659      	mov	r1, fp
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa faf2 	bl	800072c <__aeabi_ddiv>
 8006148:	4682      	mov	sl, r0
 800614a:	468b      	mov	fp, r1
 800614c:	1124      	asrs	r4, r4, #4
 800614e:	d0df      	beq.n	8006110 <_strtod_l+0x518>
 8006150:	2c1f      	cmp	r4, #31
 8006152:	dd1f      	ble.n	8006194 <_strtod_l+0x59c>
 8006154:	2400      	movs	r4, #0
 8006156:	46a0      	mov	r8, r4
 8006158:	46a1      	mov	r9, r4
 800615a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800615c:	2322      	movs	r3, #34	@ 0x22
 800615e:	9a05      	ldr	r2, [sp, #20]
 8006160:	f04f 0a00 	mov.w	sl, #0
 8006164:	f04f 0b00 	mov.w	fp, #0
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e76b      	b.n	8006044 <_strtod_l+0x44c>
 800616c:	08007a7f 	.word	0x08007a7f
 8006170:	08007d48 	.word	0x08007d48
 8006174:	08007a77 	.word	0x08007a77
 8006178:	08007aae 	.word	0x08007aae
 800617c:	7ff00000 	.word	0x7ff00000
 8006180:	08007be7 	.word	0x08007be7
 8006184:	08007c80 	.word	0x08007c80
 8006188:	08007c58 	.word	0x08007c58
 800618c:	7ca00000 	.word	0x7ca00000
 8006190:	7fefffff 	.word	0x7fefffff
 8006194:	f014 0310 	ands.w	r3, r4, #16
 8006198:	bf18      	it	ne
 800619a:	236a      	movne	r3, #106	@ 0x6a
 800619c:	4650      	mov	r0, sl
 800619e:	9308      	str	r3, [sp, #32]
 80061a0:	4659      	mov	r1, fp
 80061a2:	2300      	movs	r3, #0
 80061a4:	4e77      	ldr	r6, [pc, #476]	@ (8006384 <_strtod_l+0x78c>)
 80061a6:	07e7      	lsls	r7, r4, #31
 80061a8:	d504      	bpl.n	80061b4 <_strtod_l+0x5bc>
 80061aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061ae:	f7fa f993 	bl	80004d8 <__aeabi_dmul>
 80061b2:	2301      	movs	r3, #1
 80061b4:	1064      	asrs	r4, r4, #1
 80061b6:	f106 0608 	add.w	r6, r6, #8
 80061ba:	d1f4      	bne.n	80061a6 <_strtod_l+0x5ae>
 80061bc:	b10b      	cbz	r3, 80061c2 <_strtod_l+0x5ca>
 80061be:	4682      	mov	sl, r0
 80061c0:	468b      	mov	fp, r1
 80061c2:	9b08      	ldr	r3, [sp, #32]
 80061c4:	b1b3      	cbz	r3, 80061f4 <_strtod_l+0x5fc>
 80061c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80061ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	4659      	mov	r1, fp
 80061d2:	dd0f      	ble.n	80061f4 <_strtod_l+0x5fc>
 80061d4:	2b1f      	cmp	r3, #31
 80061d6:	dd58      	ble.n	800628a <_strtod_l+0x692>
 80061d8:	2b34      	cmp	r3, #52	@ 0x34
 80061da:	bfd8      	it	le
 80061dc:	f04f 33ff 	movle.w	r3, #4294967295
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	bfcf      	iteee	gt
 80061e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80061ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80061ee:	4093      	lslle	r3, r2
 80061f0:	ea03 0b01 	andle.w	fp, r3, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	2300      	movs	r3, #0
 80061f8:	4650      	mov	r0, sl
 80061fa:	4659      	mov	r1, fp
 80061fc:	f7fa fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8006200:	2800      	cmp	r0, #0
 8006202:	d1a7      	bne.n	8006154 <_strtod_l+0x55c>
 8006204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006206:	464a      	mov	r2, r9
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800620c:	462b      	mov	r3, r5
 800620e:	9805      	ldr	r0, [sp, #20]
 8006210:	f7ff f8d8 	bl	80053c4 <__s2b>
 8006214:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f af09 	beq.w	800602e <_strtod_l+0x436>
 800621c:	2400      	movs	r4, #0
 800621e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006222:	2a00      	cmp	r2, #0
 8006224:	eba3 0308 	sub.w	r3, r3, r8
 8006228:	bfa8      	it	ge
 800622a:	2300      	movge	r3, #0
 800622c:	46a0      	mov	r8, r4
 800622e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006230:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006234:	9316      	str	r3, [sp, #88]	@ 0x58
 8006236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006238:	9805      	ldr	r0, [sp, #20]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	f7ff f81a 	bl	8005274 <_Balloc>
 8006240:	4681      	mov	r9, r0
 8006242:	2800      	cmp	r0, #0
 8006244:	f43f aef7 	beq.w	8006036 <_strtod_l+0x43e>
 8006248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800624a:	300c      	adds	r0, #12
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	f103 010c 	add.w	r1, r3, #12
 8006252:	3202      	adds	r2, #2
 8006254:	0092      	lsls	r2, r2, #2
 8006256:	f000 fd65 	bl	8006d24 <memcpy>
 800625a:	ab1c      	add	r3, sp, #112	@ 0x70
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	4652      	mov	r2, sl
 8006264:	465b      	mov	r3, fp
 8006266:	9805      	ldr	r0, [sp, #20]
 8006268:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800626c:	f7ff fbd6 	bl	8005a1c <__d2b>
 8006270:	901a      	str	r0, [sp, #104]	@ 0x68
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aedf 	beq.w	8006036 <_strtod_l+0x43e>
 8006278:	2101      	movs	r1, #1
 800627a:	9805      	ldr	r0, [sp, #20]
 800627c:	f7ff f938 	bl	80054f0 <__i2b>
 8006280:	4680      	mov	r8, r0
 8006282:	b948      	cbnz	r0, 8006298 <_strtod_l+0x6a0>
 8006284:	f04f 0800 	mov.w	r8, #0
 8006288:	e6d5      	b.n	8006036 <_strtod_l+0x43e>
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	ea03 0a0a 	and.w	sl, r3, sl
 8006296:	e7ad      	b.n	80061f4 <_strtod_l+0x5fc>
 8006298:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800629a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800629c:	2d00      	cmp	r5, #0
 800629e:	bfab      	itete	ge
 80062a0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80062a2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80062a4:	18ef      	addge	r7, r5, r3
 80062a6:	1b5e      	sublt	r6, r3, r5
 80062a8:	9b08      	ldr	r3, [sp, #32]
 80062aa:	bfa8      	it	ge
 80062ac:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80062ae:	eba5 0503 	sub.w	r5, r5, r3
 80062b2:	4415      	add	r5, r2
 80062b4:	4b34      	ldr	r3, [pc, #208]	@ (8006388 <_strtod_l+0x790>)
 80062b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80062ba:	bfb8      	it	lt
 80062bc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80062be:	429d      	cmp	r5, r3
 80062c0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80062c4:	da50      	bge.n	8006368 <_strtod_l+0x770>
 80062c6:	1b5b      	subs	r3, r3, r5
 80062c8:	2b1f      	cmp	r3, #31
 80062ca:	f04f 0101 	mov.w	r1, #1
 80062ce:	eba2 0203 	sub.w	r2, r2, r3
 80062d2:	dc3d      	bgt.n	8006350 <_strtod_l+0x758>
 80062d4:	fa01 f303 	lsl.w	r3, r1, r3
 80062d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062da:	2300      	movs	r3, #0
 80062dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80062de:	18bd      	adds	r5, r7, r2
 80062e0:	9b08      	ldr	r3, [sp, #32]
 80062e2:	42af      	cmp	r7, r5
 80062e4:	4416      	add	r6, r2
 80062e6:	441e      	add	r6, r3
 80062e8:	463b      	mov	r3, r7
 80062ea:	bfa8      	it	ge
 80062ec:	462b      	movge	r3, r5
 80062ee:	42b3      	cmp	r3, r6
 80062f0:	bfa8      	it	ge
 80062f2:	4633      	movge	r3, r6
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bfc2      	ittt	gt
 80062f8:	1aed      	subgt	r5, r5, r3
 80062fa:	1af6      	subgt	r6, r6, r3
 80062fc:	1aff      	subgt	r7, r7, r3
 80062fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd16      	ble.n	8006332 <_strtod_l+0x73a>
 8006304:	4641      	mov	r1, r8
 8006306:	461a      	mov	r2, r3
 8006308:	9805      	ldr	r0, [sp, #20]
 800630a:	f7ff f9a9 	bl	8005660 <__pow5mult>
 800630e:	4680      	mov	r8, r0
 8006310:	2800      	cmp	r0, #0
 8006312:	d0b7      	beq.n	8006284 <_strtod_l+0x68c>
 8006314:	4601      	mov	r1, r0
 8006316:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006318:	9805      	ldr	r0, [sp, #20]
 800631a:	f7ff f8ff 	bl	800551c <__multiply>
 800631e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006320:	2800      	cmp	r0, #0
 8006322:	f43f ae88 	beq.w	8006036 <_strtod_l+0x43e>
 8006326:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006328:	9805      	ldr	r0, [sp, #20]
 800632a:	f7fe ffe3 	bl	80052f4 <_Bfree>
 800632e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006330:	931a      	str	r3, [sp, #104]	@ 0x68
 8006332:	2d00      	cmp	r5, #0
 8006334:	dc1d      	bgt.n	8006372 <_strtod_l+0x77a>
 8006336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	dd27      	ble.n	800638c <_strtod_l+0x794>
 800633c:	4649      	mov	r1, r9
 800633e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006340:	9805      	ldr	r0, [sp, #20]
 8006342:	f7ff f98d 	bl	8005660 <__pow5mult>
 8006346:	4681      	mov	r9, r0
 8006348:	bb00      	cbnz	r0, 800638c <_strtod_l+0x794>
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	e672      	b.n	8006036 <_strtod_l+0x43e>
 8006350:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006354:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006358:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800635c:	35e2      	adds	r5, #226	@ 0xe2
 800635e:	fa01 f305 	lsl.w	r3, r1, r5
 8006362:	9310      	str	r3, [sp, #64]	@ 0x40
 8006364:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006366:	e7ba      	b.n	80062de <_strtod_l+0x6e6>
 8006368:	2300      	movs	r3, #0
 800636a:	9310      	str	r3, [sp, #64]	@ 0x40
 800636c:	2301      	movs	r3, #1
 800636e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006370:	e7b5      	b.n	80062de <_strtod_l+0x6e6>
 8006372:	462a      	mov	r2, r5
 8006374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006376:	9805      	ldr	r0, [sp, #20]
 8006378:	f7ff f9cc 	bl	8005714 <__lshift>
 800637c:	901a      	str	r0, [sp, #104]	@ 0x68
 800637e:	2800      	cmp	r0, #0
 8006380:	d1d9      	bne.n	8006336 <_strtod_l+0x73e>
 8006382:	e658      	b.n	8006036 <_strtod_l+0x43e>
 8006384:	08007d70 	.word	0x08007d70
 8006388:	fffffc02 	.word	0xfffffc02
 800638c:	2e00      	cmp	r6, #0
 800638e:	dd07      	ble.n	80063a0 <_strtod_l+0x7a8>
 8006390:	4649      	mov	r1, r9
 8006392:	4632      	mov	r2, r6
 8006394:	9805      	ldr	r0, [sp, #20]
 8006396:	f7ff f9bd 	bl	8005714 <__lshift>
 800639a:	4681      	mov	r9, r0
 800639c:	2800      	cmp	r0, #0
 800639e:	d0d4      	beq.n	800634a <_strtod_l+0x752>
 80063a0:	2f00      	cmp	r7, #0
 80063a2:	dd08      	ble.n	80063b6 <_strtod_l+0x7be>
 80063a4:	4641      	mov	r1, r8
 80063a6:	463a      	mov	r2, r7
 80063a8:	9805      	ldr	r0, [sp, #20]
 80063aa:	f7ff f9b3 	bl	8005714 <__lshift>
 80063ae:	4680      	mov	r8, r0
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f43f ae40 	beq.w	8006036 <_strtod_l+0x43e>
 80063b6:	464a      	mov	r2, r9
 80063b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063ba:	9805      	ldr	r0, [sp, #20]
 80063bc:	f7ff fa32 	bl	8005824 <__mdiff>
 80063c0:	4604      	mov	r4, r0
 80063c2:	2800      	cmp	r0, #0
 80063c4:	f43f ae37 	beq.w	8006036 <_strtod_l+0x43e>
 80063c8:	68c3      	ldr	r3, [r0, #12]
 80063ca:	4641      	mov	r1, r8
 80063cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063ce:	2300      	movs	r3, #0
 80063d0:	60c3      	str	r3, [r0, #12]
 80063d2:	f7ff fa0b 	bl	80057ec <__mcmp>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	da3d      	bge.n	8006456 <_strtod_l+0x85e>
 80063da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063dc:	ea53 030a 	orrs.w	r3, r3, sl
 80063e0:	d163      	bne.n	80064aa <_strtod_l+0x8b2>
 80063e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d15f      	bne.n	80064aa <_strtod_l+0x8b2>
 80063ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063ee:	0d1b      	lsrs	r3, r3, #20
 80063f0:	051b      	lsls	r3, r3, #20
 80063f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80063f6:	d958      	bls.n	80064aa <_strtod_l+0x8b2>
 80063f8:	6963      	ldr	r3, [r4, #20]
 80063fa:	b913      	cbnz	r3, 8006402 <_strtod_l+0x80a>
 80063fc:	6923      	ldr	r3, [r4, #16]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	dd53      	ble.n	80064aa <_strtod_l+0x8b2>
 8006402:	4621      	mov	r1, r4
 8006404:	2201      	movs	r2, #1
 8006406:	9805      	ldr	r0, [sp, #20]
 8006408:	f7ff f984 	bl	8005714 <__lshift>
 800640c:	4641      	mov	r1, r8
 800640e:	4604      	mov	r4, r0
 8006410:	f7ff f9ec 	bl	80057ec <__mcmp>
 8006414:	2800      	cmp	r0, #0
 8006416:	dd48      	ble.n	80064aa <_strtod_l+0x8b2>
 8006418:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800641c:	9a08      	ldr	r2, [sp, #32]
 800641e:	0d1b      	lsrs	r3, r3, #20
 8006420:	051b      	lsls	r3, r3, #20
 8006422:	2a00      	cmp	r2, #0
 8006424:	d062      	beq.n	80064ec <_strtod_l+0x8f4>
 8006426:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800642a:	d85f      	bhi.n	80064ec <_strtod_l+0x8f4>
 800642c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006430:	f67f ae94 	bls.w	800615c <_strtod_l+0x564>
 8006434:	4650      	mov	r0, sl
 8006436:	4659      	mov	r1, fp
 8006438:	4ba3      	ldr	r3, [pc, #652]	@ (80066c8 <_strtod_l+0xad0>)
 800643a:	2200      	movs	r2, #0
 800643c:	f7fa f84c 	bl	80004d8 <__aeabi_dmul>
 8006440:	4ba2      	ldr	r3, [pc, #648]	@ (80066cc <_strtod_l+0xad4>)
 8006442:	4682      	mov	sl, r0
 8006444:	400b      	ands	r3, r1
 8006446:	468b      	mov	fp, r1
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f adff 	bne.w	800604c <_strtod_l+0x454>
 800644e:	2322      	movs	r3, #34	@ 0x22
 8006450:	9a05      	ldr	r2, [sp, #20]
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	e5fa      	b.n	800604c <_strtod_l+0x454>
 8006456:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800645a:	d165      	bne.n	8006528 <_strtod_l+0x930>
 800645c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800645e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006462:	b35a      	cbz	r2, 80064bc <_strtod_l+0x8c4>
 8006464:	4a9a      	ldr	r2, [pc, #616]	@ (80066d0 <_strtod_l+0xad8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d12b      	bne.n	80064c2 <_strtod_l+0x8ca>
 800646a:	9b08      	ldr	r3, [sp, #32]
 800646c:	4651      	mov	r1, sl
 800646e:	b303      	cbz	r3, 80064b2 <_strtod_l+0x8ba>
 8006470:	465a      	mov	r2, fp
 8006472:	4b96      	ldr	r3, [pc, #600]	@ (80066cc <_strtod_l+0xad4>)
 8006474:	4013      	ands	r3, r2
 8006476:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800647a:	f04f 32ff 	mov.w	r2, #4294967295
 800647e:	d81b      	bhi.n	80064b8 <_strtod_l+0x8c0>
 8006480:	0d1b      	lsrs	r3, r3, #20
 8006482:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	4299      	cmp	r1, r3
 800648c:	d119      	bne.n	80064c2 <_strtod_l+0x8ca>
 800648e:	4b91      	ldr	r3, [pc, #580]	@ (80066d4 <_strtod_l+0xadc>)
 8006490:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006492:	429a      	cmp	r2, r3
 8006494:	d102      	bne.n	800649c <_strtod_l+0x8a4>
 8006496:	3101      	adds	r1, #1
 8006498:	f43f adcd 	beq.w	8006036 <_strtod_l+0x43e>
 800649c:	f04f 0a00 	mov.w	sl, #0
 80064a0:	4b8a      	ldr	r3, [pc, #552]	@ (80066cc <_strtod_l+0xad4>)
 80064a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064a4:	401a      	ands	r2, r3
 80064a6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1c1      	bne.n	8006434 <_strtod_l+0x83c>
 80064b0:	e5cc      	b.n	800604c <_strtod_l+0x454>
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295
 80064b6:	e7e8      	b.n	800648a <_strtod_l+0x892>
 80064b8:	4613      	mov	r3, r2
 80064ba:	e7e6      	b.n	800648a <_strtod_l+0x892>
 80064bc:	ea53 030a 	orrs.w	r3, r3, sl
 80064c0:	d0aa      	beq.n	8006418 <_strtod_l+0x820>
 80064c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064c4:	b1db      	cbz	r3, 80064fe <_strtod_l+0x906>
 80064c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064c8:	4213      	tst	r3, r2
 80064ca:	d0ee      	beq.n	80064aa <_strtod_l+0x8b2>
 80064cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ce:	4650      	mov	r0, sl
 80064d0:	4659      	mov	r1, fp
 80064d2:	9a08      	ldr	r2, [sp, #32]
 80064d4:	b1bb      	cbz	r3, 8006506 <_strtod_l+0x90e>
 80064d6:	f7ff fb6d 	bl	8005bb4 <sulp>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e2:	f7f9 fe43 	bl	800016c <__adddf3>
 80064e6:	4682      	mov	sl, r0
 80064e8:	468b      	mov	fp, r1
 80064ea:	e7de      	b.n	80064aa <_strtod_l+0x8b2>
 80064ec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80064f0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064f4:	f04f 3aff 	mov.w	sl, #4294967295
 80064f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80064fc:	e7d5      	b.n	80064aa <_strtod_l+0x8b2>
 80064fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006500:	ea13 0f0a 	tst.w	r3, sl
 8006504:	e7e1      	b.n	80064ca <_strtod_l+0x8d2>
 8006506:	f7ff fb55 	bl	8005bb4 <sulp>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006512:	f7f9 fe29 	bl	8000168 <__aeabi_dsub>
 8006516:	2200      	movs	r2, #0
 8006518:	2300      	movs	r3, #0
 800651a:	4682      	mov	sl, r0
 800651c:	468b      	mov	fp, r1
 800651e:	f7fa fa43 	bl	80009a8 <__aeabi_dcmpeq>
 8006522:	2800      	cmp	r0, #0
 8006524:	d0c1      	beq.n	80064aa <_strtod_l+0x8b2>
 8006526:	e619      	b.n	800615c <_strtod_l+0x564>
 8006528:	4641      	mov	r1, r8
 800652a:	4620      	mov	r0, r4
 800652c:	f7ff face 	bl	8005acc <__ratio>
 8006530:	2200      	movs	r2, #0
 8006532:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006536:	4606      	mov	r6, r0
 8006538:	460f      	mov	r7, r1
 800653a:	f7fa fa49 	bl	80009d0 <__aeabi_dcmple>
 800653e:	2800      	cmp	r0, #0
 8006540:	d06d      	beq.n	800661e <_strtod_l+0xa26>
 8006542:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d178      	bne.n	800663a <_strtod_l+0xa42>
 8006548:	f1ba 0f00 	cmp.w	sl, #0
 800654c:	d156      	bne.n	80065fc <_strtod_l+0xa04>
 800654e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006554:	2b00      	cmp	r3, #0
 8006556:	d158      	bne.n	800660a <_strtod_l+0xa12>
 8006558:	2200      	movs	r2, #0
 800655a:	4630      	mov	r0, r6
 800655c:	4639      	mov	r1, r7
 800655e:	4b5e      	ldr	r3, [pc, #376]	@ (80066d8 <_strtod_l+0xae0>)
 8006560:	f7fa fa2c 	bl	80009bc <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	d157      	bne.n	8006618 <_strtod_l+0xa20>
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	2200      	movs	r2, #0
 800656e:	4b5b      	ldr	r3, [pc, #364]	@ (80066dc <_strtod_l+0xae4>)
 8006570:	f7f9 ffb2 	bl	80004d8 <__aeabi_dmul>
 8006574:	4606      	mov	r6, r0
 8006576:	460f      	mov	r7, r1
 8006578:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800657c:	9606      	str	r6, [sp, #24]
 800657e:	9307      	str	r3, [sp, #28]
 8006580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006584:	4d51      	ldr	r5, [pc, #324]	@ (80066cc <_strtod_l+0xad4>)
 8006586:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800658a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658c:	401d      	ands	r5, r3
 800658e:	4b54      	ldr	r3, [pc, #336]	@ (80066e0 <_strtod_l+0xae8>)
 8006590:	429d      	cmp	r5, r3
 8006592:	f040 80ab 	bne.w	80066ec <_strtod_l+0xaf4>
 8006596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006598:	4650      	mov	r0, sl
 800659a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800659e:	4659      	mov	r1, fp
 80065a0:	f7ff f9d4 	bl	800594c <__ulp>
 80065a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065a8:	f7f9 ff96 	bl	80004d8 <__aeabi_dmul>
 80065ac:	4652      	mov	r2, sl
 80065ae:	465b      	mov	r3, fp
 80065b0:	f7f9 fddc 	bl	800016c <__adddf3>
 80065b4:	460b      	mov	r3, r1
 80065b6:	4945      	ldr	r1, [pc, #276]	@ (80066cc <_strtod_l+0xad4>)
 80065b8:	4a4a      	ldr	r2, [pc, #296]	@ (80066e4 <_strtod_l+0xaec>)
 80065ba:	4019      	ands	r1, r3
 80065bc:	4291      	cmp	r1, r2
 80065be:	4682      	mov	sl, r0
 80065c0:	d942      	bls.n	8006648 <_strtod_l+0xa50>
 80065c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065c4:	4b43      	ldr	r3, [pc, #268]	@ (80066d4 <_strtod_l+0xadc>)
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d103      	bne.n	80065d2 <_strtod_l+0x9da>
 80065ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065cc:	3301      	adds	r3, #1
 80065ce:	f43f ad32 	beq.w	8006036 <_strtod_l+0x43e>
 80065d2:	f04f 3aff 	mov.w	sl, #4294967295
 80065d6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 80066d4 <_strtod_l+0xadc>
 80065da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065dc:	9805      	ldr	r0, [sp, #20]
 80065de:	f7fe fe89 	bl	80052f4 <_Bfree>
 80065e2:	4649      	mov	r1, r9
 80065e4:	9805      	ldr	r0, [sp, #20]
 80065e6:	f7fe fe85 	bl	80052f4 <_Bfree>
 80065ea:	4641      	mov	r1, r8
 80065ec:	9805      	ldr	r0, [sp, #20]
 80065ee:	f7fe fe81 	bl	80052f4 <_Bfree>
 80065f2:	4621      	mov	r1, r4
 80065f4:	9805      	ldr	r0, [sp, #20]
 80065f6:	f7fe fe7d 	bl	80052f4 <_Bfree>
 80065fa:	e61c      	b.n	8006236 <_strtod_l+0x63e>
 80065fc:	f1ba 0f01 	cmp.w	sl, #1
 8006600:	d103      	bne.n	800660a <_strtod_l+0xa12>
 8006602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	f43f ada9 	beq.w	800615c <_strtod_l+0x564>
 800660a:	2200      	movs	r2, #0
 800660c:	4b36      	ldr	r3, [pc, #216]	@ (80066e8 <_strtod_l+0xaf0>)
 800660e:	2600      	movs	r6, #0
 8006610:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006614:	4f30      	ldr	r7, [pc, #192]	@ (80066d8 <_strtod_l+0xae0>)
 8006616:	e7b3      	b.n	8006580 <_strtod_l+0x988>
 8006618:	2600      	movs	r6, #0
 800661a:	4f30      	ldr	r7, [pc, #192]	@ (80066dc <_strtod_l+0xae4>)
 800661c:	e7ac      	b.n	8006578 <_strtod_l+0x980>
 800661e:	4630      	mov	r0, r6
 8006620:	4639      	mov	r1, r7
 8006622:	4b2e      	ldr	r3, [pc, #184]	@ (80066dc <_strtod_l+0xae4>)
 8006624:	2200      	movs	r2, #0
 8006626:	f7f9 ff57 	bl	80004d8 <__aeabi_dmul>
 800662a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0a1      	beq.n	8006578 <_strtod_l+0x980>
 8006634:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006638:	e7a2      	b.n	8006580 <_strtod_l+0x988>
 800663a:	2200      	movs	r2, #0
 800663c:	4b26      	ldr	r3, [pc, #152]	@ (80066d8 <_strtod_l+0xae0>)
 800663e:	4616      	mov	r6, r2
 8006640:	461f      	mov	r7, r3
 8006642:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006646:	e79b      	b.n	8006580 <_strtod_l+0x988>
 8006648:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800664c:	9b08      	ldr	r3, [sp, #32]
 800664e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1c1      	bne.n	80065da <_strtod_l+0x9e2>
 8006656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800665a:	0d1b      	lsrs	r3, r3, #20
 800665c:	051b      	lsls	r3, r3, #20
 800665e:	429d      	cmp	r5, r3
 8006660:	d1bb      	bne.n	80065da <_strtod_l+0x9e2>
 8006662:	4630      	mov	r0, r6
 8006664:	4639      	mov	r1, r7
 8006666:	f7fa fa7f 	bl	8000b68 <__aeabi_d2lz>
 800666a:	f7f9 ff07 	bl	800047c <__aeabi_l2d>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	f7f9 fd77 	bl	8000168 <__aeabi_dsub>
 800667a:	460b      	mov	r3, r1
 800667c:	4602      	mov	r2, r0
 800667e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006682:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006688:	ea46 060a 	orr.w	r6, r6, sl
 800668c:	431e      	orrs	r6, r3
 800668e:	d06a      	beq.n	8006766 <_strtod_l+0xb6e>
 8006690:	a309      	add	r3, pc, #36	@ (adr r3, 80066b8 <_strtod_l+0xac0>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7fa f991 	bl	80009bc <__aeabi_dcmplt>
 800669a:	2800      	cmp	r0, #0
 800669c:	f47f acd6 	bne.w	800604c <_strtod_l+0x454>
 80066a0:	a307      	add	r3, pc, #28	@ (adr r3, 80066c0 <_strtod_l+0xac8>)
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066aa:	f7fa f9a5 	bl	80009f8 <__aeabi_dcmpgt>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d093      	beq.n	80065da <_strtod_l+0x9e2>
 80066b2:	e4cb      	b.n	800604c <_strtod_l+0x454>
 80066b4:	f3af 8000 	nop.w
 80066b8:	94a03595 	.word	0x94a03595
 80066bc:	3fdfffff 	.word	0x3fdfffff
 80066c0:	35afe535 	.word	0x35afe535
 80066c4:	3fe00000 	.word	0x3fe00000
 80066c8:	39500000 	.word	0x39500000
 80066cc:	7ff00000 	.word	0x7ff00000
 80066d0:	000fffff 	.word	0x000fffff
 80066d4:	7fefffff 	.word	0x7fefffff
 80066d8:	3ff00000 	.word	0x3ff00000
 80066dc:	3fe00000 	.word	0x3fe00000
 80066e0:	7fe00000 	.word	0x7fe00000
 80066e4:	7c9fffff 	.word	0x7c9fffff
 80066e8:	bff00000 	.word	0xbff00000
 80066ec:	9b08      	ldr	r3, [sp, #32]
 80066ee:	b323      	cbz	r3, 800673a <_strtod_l+0xb42>
 80066f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80066f4:	d821      	bhi.n	800673a <_strtod_l+0xb42>
 80066f6:	a328      	add	r3, pc, #160	@ (adr r3, 8006798 <_strtod_l+0xba0>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	4630      	mov	r0, r6
 80066fe:	4639      	mov	r1, r7
 8006700:	f7fa f966 	bl	80009d0 <__aeabi_dcmple>
 8006704:	b1a0      	cbz	r0, 8006730 <_strtod_l+0xb38>
 8006706:	4639      	mov	r1, r7
 8006708:	4630      	mov	r0, r6
 800670a:	f7fa f9bd 	bl	8000a88 <__aeabi_d2uiz>
 800670e:	2801      	cmp	r0, #1
 8006710:	bf38      	it	cc
 8006712:	2001      	movcc	r0, #1
 8006714:	f7f9 fe66 	bl	80003e4 <__aeabi_ui2d>
 8006718:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800671a:	4606      	mov	r6, r0
 800671c:	460f      	mov	r7, r1
 800671e:	b9fb      	cbnz	r3, 8006760 <_strtod_l+0xb68>
 8006720:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006724:	9014      	str	r0, [sp, #80]	@ 0x50
 8006726:	9315      	str	r3, [sp, #84]	@ 0x54
 8006728:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800672c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006730:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006732:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006736:	1b5b      	subs	r3, r3, r5
 8006738:	9311      	str	r3, [sp, #68]	@ 0x44
 800673a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800673e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006742:	f7ff f903 	bl	800594c <__ulp>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	f7f9 fec3 	bl	80004d8 <__aeabi_dmul>
 8006752:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006756:	f7f9 fd09 	bl	800016c <__adddf3>
 800675a:	4682      	mov	sl, r0
 800675c:	468b      	mov	fp, r1
 800675e:	e775      	b.n	800664c <_strtod_l+0xa54>
 8006760:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006764:	e7e0      	b.n	8006728 <_strtod_l+0xb30>
 8006766:	a30e      	add	r3, pc, #56	@ (adr r3, 80067a0 <_strtod_l+0xba8>)
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f7fa f926 	bl	80009bc <__aeabi_dcmplt>
 8006770:	e79d      	b.n	80066ae <_strtod_l+0xab6>
 8006772:	2300      	movs	r3, #0
 8006774:	930e      	str	r3, [sp, #56]	@ 0x38
 8006776:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006778:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	f7ff ba79 	b.w	8005c72 <_strtod_l+0x7a>
 8006780:	2a65      	cmp	r2, #101	@ 0x65
 8006782:	f43f ab72 	beq.w	8005e6a <_strtod_l+0x272>
 8006786:	2a45      	cmp	r2, #69	@ 0x45
 8006788:	f43f ab6f 	beq.w	8005e6a <_strtod_l+0x272>
 800678c:	2301      	movs	r3, #1
 800678e:	f7ff bbaa 	b.w	8005ee6 <_strtod_l+0x2ee>
 8006792:	bf00      	nop
 8006794:	f3af 8000 	nop.w
 8006798:	ffc00000 	.word	0xffc00000
 800679c:	41dfffff 	.word	0x41dfffff
 80067a0:	94a03595 	.word	0x94a03595
 80067a4:	3fcfffff 	.word	0x3fcfffff

080067a8 <_strtod_r>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	@ (80067b0 <_strtod_r+0x8>)
 80067aa:	f7ff ba25 	b.w	8005bf8 <_strtod_l>
 80067ae:	bf00      	nop
 80067b0:	20000090 	.word	0x20000090

080067b4 <_strtol_l.isra.0>:
 80067b4:	2b24      	cmp	r3, #36	@ 0x24
 80067b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067ba:	4686      	mov	lr, r0
 80067bc:	4690      	mov	r8, r2
 80067be:	d801      	bhi.n	80067c4 <_strtol_l.isra.0+0x10>
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d106      	bne.n	80067d2 <_strtol_l.isra.0+0x1e>
 80067c4:	f7fd fdba 	bl	800433c <__errno>
 80067c8:	2316      	movs	r3, #22
 80067ca:	6003      	str	r3, [r0, #0]
 80067cc:	2000      	movs	r0, #0
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	460d      	mov	r5, r1
 80067d4:	4833      	ldr	r0, [pc, #204]	@ (80068a4 <_strtol_l.isra.0+0xf0>)
 80067d6:	462a      	mov	r2, r5
 80067d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067dc:	5d06      	ldrb	r6, [r0, r4]
 80067de:	f016 0608 	ands.w	r6, r6, #8
 80067e2:	d1f8      	bne.n	80067d6 <_strtol_l.isra.0+0x22>
 80067e4:	2c2d      	cmp	r4, #45	@ 0x2d
 80067e6:	d110      	bne.n	800680a <_strtol_l.isra.0+0x56>
 80067e8:	2601      	movs	r6, #1
 80067ea:	782c      	ldrb	r4, [r5, #0]
 80067ec:	1c95      	adds	r5, r2, #2
 80067ee:	f033 0210 	bics.w	r2, r3, #16
 80067f2:	d115      	bne.n	8006820 <_strtol_l.isra.0+0x6c>
 80067f4:	2c30      	cmp	r4, #48	@ 0x30
 80067f6:	d10d      	bne.n	8006814 <_strtol_l.isra.0+0x60>
 80067f8:	782a      	ldrb	r2, [r5, #0]
 80067fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80067fe:	2a58      	cmp	r2, #88	@ 0x58
 8006800:	d108      	bne.n	8006814 <_strtol_l.isra.0+0x60>
 8006802:	786c      	ldrb	r4, [r5, #1]
 8006804:	3502      	adds	r5, #2
 8006806:	2310      	movs	r3, #16
 8006808:	e00a      	b.n	8006820 <_strtol_l.isra.0+0x6c>
 800680a:	2c2b      	cmp	r4, #43	@ 0x2b
 800680c:	bf04      	itt	eq
 800680e:	782c      	ldrbeq	r4, [r5, #0]
 8006810:	1c95      	addeq	r5, r2, #2
 8006812:	e7ec      	b.n	80067ee <_strtol_l.isra.0+0x3a>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f6      	bne.n	8006806 <_strtol_l.isra.0+0x52>
 8006818:	2c30      	cmp	r4, #48	@ 0x30
 800681a:	bf14      	ite	ne
 800681c:	230a      	movne	r3, #10
 800681e:	2308      	moveq	r3, #8
 8006820:	2200      	movs	r2, #0
 8006822:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006826:	f10c 3cff 	add.w	ip, ip, #4294967295
 800682a:	fbbc f9f3 	udiv	r9, ip, r3
 800682e:	4610      	mov	r0, r2
 8006830:	fb03 ca19 	mls	sl, r3, r9, ip
 8006834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006838:	2f09      	cmp	r7, #9
 800683a:	d80f      	bhi.n	800685c <_strtol_l.isra.0+0xa8>
 800683c:	463c      	mov	r4, r7
 800683e:	42a3      	cmp	r3, r4
 8006840:	dd1b      	ble.n	800687a <_strtol_l.isra.0+0xc6>
 8006842:	1c57      	adds	r7, r2, #1
 8006844:	d007      	beq.n	8006856 <_strtol_l.isra.0+0xa2>
 8006846:	4581      	cmp	r9, r0
 8006848:	d314      	bcc.n	8006874 <_strtol_l.isra.0+0xc0>
 800684a:	d101      	bne.n	8006850 <_strtol_l.isra.0+0x9c>
 800684c:	45a2      	cmp	sl, r4
 800684e:	db11      	blt.n	8006874 <_strtol_l.isra.0+0xc0>
 8006850:	2201      	movs	r2, #1
 8006852:	fb00 4003 	mla	r0, r0, r3, r4
 8006856:	f815 4b01 	ldrb.w	r4, [r5], #1
 800685a:	e7eb      	b.n	8006834 <_strtol_l.isra.0+0x80>
 800685c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006860:	2f19      	cmp	r7, #25
 8006862:	d801      	bhi.n	8006868 <_strtol_l.isra.0+0xb4>
 8006864:	3c37      	subs	r4, #55	@ 0x37
 8006866:	e7ea      	b.n	800683e <_strtol_l.isra.0+0x8a>
 8006868:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800686c:	2f19      	cmp	r7, #25
 800686e:	d804      	bhi.n	800687a <_strtol_l.isra.0+0xc6>
 8006870:	3c57      	subs	r4, #87	@ 0x57
 8006872:	e7e4      	b.n	800683e <_strtol_l.isra.0+0x8a>
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	e7ed      	b.n	8006856 <_strtol_l.isra.0+0xa2>
 800687a:	1c53      	adds	r3, r2, #1
 800687c:	d108      	bne.n	8006890 <_strtol_l.isra.0+0xdc>
 800687e:	2322      	movs	r3, #34	@ 0x22
 8006880:	4660      	mov	r0, ip
 8006882:	f8ce 3000 	str.w	r3, [lr]
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	d0a0      	beq.n	80067ce <_strtol_l.isra.0+0x1a>
 800688c:	1e69      	subs	r1, r5, #1
 800688e:	e006      	b.n	800689e <_strtol_l.isra.0+0xea>
 8006890:	b106      	cbz	r6, 8006894 <_strtol_l.isra.0+0xe0>
 8006892:	4240      	negs	r0, r0
 8006894:	f1b8 0f00 	cmp.w	r8, #0
 8006898:	d099      	beq.n	80067ce <_strtol_l.isra.0+0x1a>
 800689a:	2a00      	cmp	r2, #0
 800689c:	d1f6      	bne.n	800688c <_strtol_l.isra.0+0xd8>
 800689e:	f8c8 1000 	str.w	r1, [r8]
 80068a2:	e794      	b.n	80067ce <_strtol_l.isra.0+0x1a>
 80068a4:	08007d99 	.word	0x08007d99

080068a8 <_strtol_r>:
 80068a8:	f7ff bf84 	b.w	80067b4 <_strtol_l.isra.0>

080068ac <__ssputs_r>:
 80068ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	461f      	mov	r7, r3
 80068b2:	688e      	ldr	r6, [r1, #8]
 80068b4:	4682      	mov	sl, r0
 80068b6:	42be      	cmp	r6, r7
 80068b8:	460c      	mov	r4, r1
 80068ba:	4690      	mov	r8, r2
 80068bc:	680b      	ldr	r3, [r1, #0]
 80068be:	d82d      	bhi.n	800691c <__ssputs_r+0x70>
 80068c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068c8:	d026      	beq.n	8006918 <__ssputs_r+0x6c>
 80068ca:	6965      	ldr	r5, [r4, #20]
 80068cc:	6909      	ldr	r1, [r1, #16]
 80068ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068d2:	eba3 0901 	sub.w	r9, r3, r1
 80068d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068da:	1c7b      	adds	r3, r7, #1
 80068dc:	444b      	add	r3, r9
 80068de:	106d      	asrs	r5, r5, #1
 80068e0:	429d      	cmp	r5, r3
 80068e2:	bf38      	it	cc
 80068e4:	461d      	movcc	r5, r3
 80068e6:	0553      	lsls	r3, r2, #21
 80068e8:	d527      	bpl.n	800693a <__ssputs_r+0x8e>
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7fe fc36 	bl	800515c <_malloc_r>
 80068f0:	4606      	mov	r6, r0
 80068f2:	b360      	cbz	r0, 800694e <__ssputs_r+0xa2>
 80068f4:	464a      	mov	r2, r9
 80068f6:	6921      	ldr	r1, [r4, #16]
 80068f8:	f000 fa14 	bl	8006d24 <memcpy>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	6126      	str	r6, [r4, #16]
 800690a:	444e      	add	r6, r9
 800690c:	6026      	str	r6, [r4, #0]
 800690e:	463e      	mov	r6, r7
 8006910:	6165      	str	r5, [r4, #20]
 8006912:	eba5 0509 	sub.w	r5, r5, r9
 8006916:	60a5      	str	r5, [r4, #8]
 8006918:	42be      	cmp	r6, r7
 800691a:	d900      	bls.n	800691e <__ssputs_r+0x72>
 800691c:	463e      	mov	r6, r7
 800691e:	4632      	mov	r2, r6
 8006920:	4641      	mov	r1, r8
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	f000 f9c2 	bl	8006cac <memmove>
 8006928:	2000      	movs	r0, #0
 800692a:	68a3      	ldr	r3, [r4, #8]
 800692c:	1b9b      	subs	r3, r3, r6
 800692e:	60a3      	str	r3, [r4, #8]
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	4433      	add	r3, r6
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693a:	462a      	mov	r2, r5
 800693c:	f000 fd83 	bl	8007446 <_realloc_r>
 8006940:	4606      	mov	r6, r0
 8006942:	2800      	cmp	r0, #0
 8006944:	d1e0      	bne.n	8006908 <__ssputs_r+0x5c>
 8006946:	4650      	mov	r0, sl
 8006948:	6921      	ldr	r1, [r4, #16]
 800694a:	f7fe fb95 	bl	8005078 <_free_r>
 800694e:	230c      	movs	r3, #12
 8006950:	f8ca 3000 	str.w	r3, [sl]
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800695e:	81a3      	strh	r3, [r4, #12]
 8006960:	e7e9      	b.n	8006936 <__ssputs_r+0x8a>
	...

08006964 <_svfiprintf_r>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	4698      	mov	r8, r3
 800696a:	898b      	ldrh	r3, [r1, #12]
 800696c:	4607      	mov	r7, r0
 800696e:	061b      	lsls	r3, r3, #24
 8006970:	460d      	mov	r5, r1
 8006972:	4614      	mov	r4, r2
 8006974:	b09d      	sub	sp, #116	@ 0x74
 8006976:	d510      	bpl.n	800699a <_svfiprintf_r+0x36>
 8006978:	690b      	ldr	r3, [r1, #16]
 800697a:	b973      	cbnz	r3, 800699a <_svfiprintf_r+0x36>
 800697c:	2140      	movs	r1, #64	@ 0x40
 800697e:	f7fe fbed 	bl	800515c <_malloc_r>
 8006982:	6028      	str	r0, [r5, #0]
 8006984:	6128      	str	r0, [r5, #16]
 8006986:	b930      	cbnz	r0, 8006996 <_svfiprintf_r+0x32>
 8006988:	230c      	movs	r3, #12
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	b01d      	add	sp, #116	@ 0x74
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	2340      	movs	r3, #64	@ 0x40
 8006998:	616b      	str	r3, [r5, #20]
 800699a:	2300      	movs	r3, #0
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	2320      	movs	r3, #32
 80069a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069a4:	2330      	movs	r3, #48	@ 0x30
 80069a6:	f04f 0901 	mov.w	r9, #1
 80069aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006b48 <_svfiprintf_r+0x1e4>
 80069b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069b6:	4623      	mov	r3, r4
 80069b8:	469a      	mov	sl, r3
 80069ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069be:	b10a      	cbz	r2, 80069c4 <_svfiprintf_r+0x60>
 80069c0:	2a25      	cmp	r2, #37	@ 0x25
 80069c2:	d1f9      	bne.n	80069b8 <_svfiprintf_r+0x54>
 80069c4:	ebba 0b04 	subs.w	fp, sl, r4
 80069c8:	d00b      	beq.n	80069e2 <_svfiprintf_r+0x7e>
 80069ca:	465b      	mov	r3, fp
 80069cc:	4622      	mov	r2, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ff6b 	bl	80068ac <__ssputs_r>
 80069d6:	3001      	adds	r0, #1
 80069d8:	f000 80a7 	beq.w	8006b2a <_svfiprintf_r+0x1c6>
 80069dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069de:	445a      	add	r2, fp
 80069e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80069e2:	f89a 3000 	ldrb.w	r3, [sl]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 809f 	beq.w	8006b2a <_svfiprintf_r+0x1c6>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f6:	f10a 0a01 	add.w	sl, sl, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a04:	4654      	mov	r4, sl
 8006a06:	2205      	movs	r2, #5
 8006a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0c:	484e      	ldr	r0, [pc, #312]	@ (8006b48 <_svfiprintf_r+0x1e4>)
 8006a0e:	f7fd fcc2 	bl	8004396 <memchr>
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	b9d8      	cbnz	r0, 8006a4e <_svfiprintf_r+0xea>
 8006a16:	06d0      	lsls	r0, r2, #27
 8006a18:	bf44      	itt	mi
 8006a1a:	2320      	movmi	r3, #32
 8006a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a20:	0711      	lsls	r1, r2, #28
 8006a22:	bf44      	itt	mi
 8006a24:	232b      	movmi	r3, #43	@ 0x2b
 8006a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a30:	d015      	beq.n	8006a5e <_svfiprintf_r+0xfa>
 8006a32:	4654      	mov	r4, sl
 8006a34:	2000      	movs	r0, #0
 8006a36:	f04f 0c0a 	mov.w	ip, #10
 8006a3a:	9a07      	ldr	r2, [sp, #28]
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a42:	3b30      	subs	r3, #48	@ 0x30
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d94b      	bls.n	8006ae0 <_svfiprintf_r+0x17c>
 8006a48:	b1b0      	cbz	r0, 8006a78 <_svfiprintf_r+0x114>
 8006a4a:	9207      	str	r2, [sp, #28]
 8006a4c:	e014      	b.n	8006a78 <_svfiprintf_r+0x114>
 8006a4e:	eba0 0308 	sub.w	r3, r0, r8
 8006a52:	fa09 f303 	lsl.w	r3, r9, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	46a2      	mov	sl, r4
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	e7d2      	b.n	8006a04 <_svfiprintf_r+0xa0>
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	1d19      	adds	r1, r3, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	9103      	str	r1, [sp, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfbb      	ittet	lt
 8006a6a:	425b      	neglt	r3, r3
 8006a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a70:	9307      	strge	r3, [sp, #28]
 8006a72:	9307      	strlt	r3, [sp, #28]
 8006a74:	bfb8      	it	lt
 8006a76:	9204      	strlt	r2, [sp, #16]
 8006a78:	7823      	ldrb	r3, [r4, #0]
 8006a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a7c:	d10a      	bne.n	8006a94 <_svfiprintf_r+0x130>
 8006a7e:	7863      	ldrb	r3, [r4, #1]
 8006a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a82:	d132      	bne.n	8006aea <_svfiprintf_r+0x186>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	3402      	adds	r4, #2
 8006a88:	1d1a      	adds	r2, r3, #4
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	9203      	str	r2, [sp, #12]
 8006a8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006b4c <_svfiprintf_r+0x1e8>
 8006a98:	2203      	movs	r2, #3
 8006a9a:	4650      	mov	r0, sl
 8006a9c:	7821      	ldrb	r1, [r4, #0]
 8006a9e:	f7fd fc7a 	bl	8004396 <memchr>
 8006aa2:	b138      	cbz	r0, 8006ab4 <_svfiprintf_r+0x150>
 8006aa4:	2240      	movs	r2, #64	@ 0x40
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	eba0 000a 	sub.w	r0, r0, sl
 8006aac:	4082      	lsls	r2, r0
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab8:	2206      	movs	r2, #6
 8006aba:	4825      	ldr	r0, [pc, #148]	@ (8006b50 <_svfiprintf_r+0x1ec>)
 8006abc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ac0:	f7fd fc69 	bl	8004396 <memchr>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d036      	beq.n	8006b36 <_svfiprintf_r+0x1d2>
 8006ac8:	4b22      	ldr	r3, [pc, #136]	@ (8006b54 <_svfiprintf_r+0x1f0>)
 8006aca:	bb1b      	cbnz	r3, 8006b14 <_svfiprintf_r+0x1b0>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	3307      	adds	r3, #7
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ada:	4433      	add	r3, r6
 8006adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ade:	e76a      	b.n	80069b6 <_svfiprintf_r+0x52>
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae8:	e7a8      	b.n	8006a3c <_svfiprintf_r+0xd8>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f04f 0c0a 	mov.w	ip, #10
 8006af0:	4619      	mov	r1, r3
 8006af2:	3401      	adds	r4, #1
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	4620      	mov	r0, r4
 8006af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afc:	3a30      	subs	r2, #48	@ 0x30
 8006afe:	2a09      	cmp	r2, #9
 8006b00:	d903      	bls.n	8006b0a <_svfiprintf_r+0x1a6>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c6      	beq.n	8006a94 <_svfiprintf_r+0x130>
 8006b06:	9105      	str	r1, [sp, #20]
 8006b08:	e7c4      	b.n	8006a94 <_svfiprintf_r+0x130>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b12:	e7f0      	b.n	8006af6 <_svfiprintf_r+0x192>
 8006b14:	ab03      	add	r3, sp, #12
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <_svfiprintf_r+0x1f4>)
 8006b1e:	a904      	add	r1, sp, #16
 8006b20:	f7fc fccc 	bl	80034bc <_printf_float>
 8006b24:	1c42      	adds	r2, r0, #1
 8006b26:	4606      	mov	r6, r0
 8006b28:	d1d6      	bne.n	8006ad8 <_svfiprintf_r+0x174>
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	065b      	lsls	r3, r3, #25
 8006b2e:	f53f af2d 	bmi.w	800698c <_svfiprintf_r+0x28>
 8006b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b34:	e72c      	b.n	8006990 <_svfiprintf_r+0x2c>
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	4b06      	ldr	r3, [pc, #24]	@ (8006b58 <_svfiprintf_r+0x1f4>)
 8006b40:	a904      	add	r1, sp, #16
 8006b42:	f7fc ff59 	bl	80039f8 <_printf_i>
 8006b46:	e7ed      	b.n	8006b24 <_svfiprintf_r+0x1c0>
 8006b48:	08007b93 	.word	0x08007b93
 8006b4c:	08007b99 	.word	0x08007b99
 8006b50:	08007b9d 	.word	0x08007b9d
 8006b54:	080034bd 	.word	0x080034bd
 8006b58:	080068ad 	.word	0x080068ad

08006b5c <__sflush_r>:
 8006b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	0716      	lsls	r6, r2, #28
 8006b64:	4605      	mov	r5, r0
 8006b66:	460c      	mov	r4, r1
 8006b68:	d454      	bmi.n	8006c14 <__sflush_r+0xb8>
 8006b6a:	684b      	ldr	r3, [r1, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dc02      	bgt.n	8006b76 <__sflush_r+0x1a>
 8006b70:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dd48      	ble.n	8006c08 <__sflush_r+0xac>
 8006b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b78:	2e00      	cmp	r6, #0
 8006b7a:	d045      	beq.n	8006c08 <__sflush_r+0xac>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b82:	682f      	ldr	r7, [r5, #0]
 8006b84:	6a21      	ldr	r1, [r4, #32]
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	d030      	beq.n	8006bec <__sflush_r+0x90>
 8006b8a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	0759      	lsls	r1, r3, #29
 8006b90:	d505      	bpl.n	8006b9e <__sflush_r+0x42>
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	1ad2      	subs	r2, r2, r3
 8006b96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b98:	b10b      	cbz	r3, 8006b9e <__sflush_r+0x42>
 8006b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b9c:	1ad2      	subs	r2, r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba4:	6a21      	ldr	r1, [r4, #32]
 8006ba6:	47b0      	blx	r6
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	d106      	bne.n	8006bbc <__sflush_r+0x60>
 8006bae:	6829      	ldr	r1, [r5, #0]
 8006bb0:	291d      	cmp	r1, #29
 8006bb2:	d82b      	bhi.n	8006c0c <__sflush_r+0xb0>
 8006bb4:	4a28      	ldr	r2, [pc, #160]	@ (8006c58 <__sflush_r+0xfc>)
 8006bb6:	40ca      	lsrs	r2, r1
 8006bb8:	07d6      	lsls	r6, r2, #31
 8006bba:	d527      	bpl.n	8006c0c <__sflush_r+0xb0>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6062      	str	r2, [r4, #4]
 8006bc0:	6922      	ldr	r2, [r4, #16]
 8006bc2:	04d9      	lsls	r1, r3, #19
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	d504      	bpl.n	8006bd2 <__sflush_r+0x76>
 8006bc8:	1c42      	adds	r2, r0, #1
 8006bca:	d101      	bne.n	8006bd0 <__sflush_r+0x74>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b903      	cbnz	r3, 8006bd2 <__sflush_r+0x76>
 8006bd0:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bd4:	602f      	str	r7, [r5, #0]
 8006bd6:	b1b9      	cbz	r1, 8006c08 <__sflush_r+0xac>
 8006bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d002      	beq.n	8006be6 <__sflush_r+0x8a>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f7fe fa49 	bl	8005078 <_free_r>
 8006be6:	2300      	movs	r3, #0
 8006be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bea:	e00d      	b.n	8006c08 <__sflush_r+0xac>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4628      	mov	r0, r5
 8006bf0:	47b0      	blx	r6
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	1c50      	adds	r0, r2, #1
 8006bf6:	d1c9      	bne.n	8006b8c <__sflush_r+0x30>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0c6      	beq.n	8006b8c <__sflush_r+0x30>
 8006bfe:	2b1d      	cmp	r3, #29
 8006c00:	d001      	beq.n	8006c06 <__sflush_r+0xaa>
 8006c02:	2b16      	cmp	r3, #22
 8006c04:	d11d      	bne.n	8006c42 <__sflush_r+0xe6>
 8006c06:	602f      	str	r7, [r5, #0]
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e021      	b.n	8006c50 <__sflush_r+0xf4>
 8006c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c10:	b21b      	sxth	r3, r3
 8006c12:	e01a      	b.n	8006c4a <__sflush_r+0xee>
 8006c14:	690f      	ldr	r7, [r1, #16]
 8006c16:	2f00      	cmp	r7, #0
 8006c18:	d0f6      	beq.n	8006c08 <__sflush_r+0xac>
 8006c1a:	0793      	lsls	r3, r2, #30
 8006c1c:	bf18      	it	ne
 8006c1e:	2300      	movne	r3, #0
 8006c20:	680e      	ldr	r6, [r1, #0]
 8006c22:	bf08      	it	eq
 8006c24:	694b      	ldreq	r3, [r1, #20]
 8006c26:	1bf6      	subs	r6, r6, r7
 8006c28:	600f      	str	r7, [r1, #0]
 8006c2a:	608b      	str	r3, [r1, #8]
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	ddeb      	ble.n	8006c08 <__sflush_r+0xac>
 8006c30:	4633      	mov	r3, r6
 8006c32:	463a      	mov	r2, r7
 8006c34:	4628      	mov	r0, r5
 8006c36:	6a21      	ldr	r1, [r4, #32]
 8006c38:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006c3c:	47e0      	blx	ip
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	dc07      	bgt.n	8006c52 <__sflush_r+0xf6>
 8006c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c52:	4407      	add	r7, r0
 8006c54:	1a36      	subs	r6, r6, r0
 8006c56:	e7e9      	b.n	8006c2c <__sflush_r+0xd0>
 8006c58:	20400001 	.word	0x20400001

08006c5c <_fflush_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	690b      	ldr	r3, [r1, #16]
 8006c60:	4605      	mov	r5, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	b913      	cbnz	r3, 8006c6c <_fflush_r+0x10>
 8006c66:	2500      	movs	r5, #0
 8006c68:	4628      	mov	r0, r5
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	b118      	cbz	r0, 8006c76 <_fflush_r+0x1a>
 8006c6e:	6a03      	ldr	r3, [r0, #32]
 8006c70:	b90b      	cbnz	r3, 8006c76 <_fflush_r+0x1a>
 8006c72:	f7fd fa75 	bl	8004160 <__sinit>
 8006c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f3      	beq.n	8006c66 <_fflush_r+0xa>
 8006c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c80:	07d0      	lsls	r0, r2, #31
 8006c82:	d404      	bmi.n	8006c8e <_fflush_r+0x32>
 8006c84:	0599      	lsls	r1, r3, #22
 8006c86:	d402      	bmi.n	8006c8e <_fflush_r+0x32>
 8006c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c8a:	f7fd fb82 	bl	8004392 <__retarget_lock_acquire_recursive>
 8006c8e:	4628      	mov	r0, r5
 8006c90:	4621      	mov	r1, r4
 8006c92:	f7ff ff63 	bl	8006b5c <__sflush_r>
 8006c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c98:	4605      	mov	r5, r0
 8006c9a:	07da      	lsls	r2, r3, #31
 8006c9c:	d4e4      	bmi.n	8006c68 <_fflush_r+0xc>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	059b      	lsls	r3, r3, #22
 8006ca2:	d4e1      	bmi.n	8006c68 <_fflush_r+0xc>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca6:	f7fd fb75 	bl	8004394 <__retarget_lock_release_recursive>
 8006caa:	e7dd      	b.n	8006c68 <_fflush_r+0xc>

08006cac <memmove>:
 8006cac:	4288      	cmp	r0, r1
 8006cae:	b510      	push	{r4, lr}
 8006cb0:	eb01 0402 	add.w	r4, r1, r2
 8006cb4:	d902      	bls.n	8006cbc <memmove+0x10>
 8006cb6:	4284      	cmp	r4, r0
 8006cb8:	4623      	mov	r3, r4
 8006cba:	d807      	bhi.n	8006ccc <memmove+0x20>
 8006cbc:	1e43      	subs	r3, r0, #1
 8006cbe:	42a1      	cmp	r1, r4
 8006cc0:	d008      	beq.n	8006cd4 <memmove+0x28>
 8006cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cca:	e7f8      	b.n	8006cbe <memmove+0x12>
 8006ccc:	4601      	mov	r1, r0
 8006cce:	4402      	add	r2, r0
 8006cd0:	428a      	cmp	r2, r1
 8006cd2:	d100      	bne.n	8006cd6 <memmove+0x2a>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cde:	e7f7      	b.n	8006cd0 <memmove+0x24>

08006ce0 <strncmp>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	b16a      	cbz	r2, 8006d00 <strncmp+0x20>
 8006ce4:	3901      	subs	r1, #1
 8006ce6:	1884      	adds	r4, r0, r2
 8006ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d103      	bne.n	8006cfc <strncmp+0x1c>
 8006cf4:	42a0      	cmp	r0, r4
 8006cf6:	d001      	beq.n	8006cfc <strncmp+0x1c>
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	d1f5      	bne.n	8006ce8 <strncmp+0x8>
 8006cfc:	1ad0      	subs	r0, r2, r3
 8006cfe:	bd10      	pop	{r4, pc}
 8006d00:	4610      	mov	r0, r2
 8006d02:	e7fc      	b.n	8006cfe <strncmp+0x1e>

08006d04 <_sbrk_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	2300      	movs	r3, #0
 8006d08:	4d05      	ldr	r5, [pc, #20]	@ (8006d20 <_sbrk_r+0x1c>)
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	4608      	mov	r0, r1
 8006d0e:	602b      	str	r3, [r5, #0]
 8006d10:	f7fa fe0e 	bl	8001930 <_sbrk>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_sbrk_r+0x1a>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_sbrk_r+0x1a>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	200003b8 	.word	0x200003b8

08006d24 <memcpy>:
 8006d24:	440a      	add	r2, r1
 8006d26:	4291      	cmp	r1, r2
 8006d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d2c:	d100      	bne.n	8006d30 <memcpy+0xc>
 8006d2e:	4770      	bx	lr
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d36:	4291      	cmp	r1, r2
 8006d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d3c:	d1f9      	bne.n	8006d32 <memcpy+0xe>
 8006d3e:	bd10      	pop	{r4, pc}

08006d40 <nan>:
 8006d40:	2000      	movs	r0, #0
 8006d42:	4901      	ldr	r1, [pc, #4]	@ (8006d48 <nan+0x8>)
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	7ff80000 	.word	0x7ff80000

08006d4c <__assert_func>:
 8006d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d4e:	4614      	mov	r4, r2
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <__assert_func+0x2c>)
 8006d54:	4605      	mov	r5, r0
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68d8      	ldr	r0, [r3, #12]
 8006d5a:	b14c      	cbz	r4, 8006d70 <__assert_func+0x24>
 8006d5c:	4b07      	ldr	r3, [pc, #28]	@ (8006d7c <__assert_func+0x30>)
 8006d5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d62:	9100      	str	r1, [sp, #0]
 8006d64:	462b      	mov	r3, r5
 8006d66:	4906      	ldr	r1, [pc, #24]	@ (8006d80 <__assert_func+0x34>)
 8006d68:	f000 fba8 	bl	80074bc <fiprintf>
 8006d6c:	f000 fbb8 	bl	80074e0 <abort>
 8006d70:	4b04      	ldr	r3, [pc, #16]	@ (8006d84 <__assert_func+0x38>)
 8006d72:	461c      	mov	r4, r3
 8006d74:	e7f3      	b.n	8006d5e <__assert_func+0x12>
 8006d76:	bf00      	nop
 8006d78:	20000040 	.word	0x20000040
 8006d7c:	08007bac 	.word	0x08007bac
 8006d80:	08007bb9 	.word	0x08007bb9
 8006d84:	08007be7 	.word	0x08007be7

08006d88 <_calloc_r>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	fba1 5402 	umull	r5, r4, r1, r2
 8006d8e:	b934      	cbnz	r4, 8006d9e <_calloc_r+0x16>
 8006d90:	4629      	mov	r1, r5
 8006d92:	f7fe f9e3 	bl	800515c <_malloc_r>
 8006d96:	4606      	mov	r6, r0
 8006d98:	b928      	cbnz	r0, 8006da6 <_calloc_r+0x1e>
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}
 8006d9e:	220c      	movs	r2, #12
 8006da0:	2600      	movs	r6, #0
 8006da2:	6002      	str	r2, [r0, #0]
 8006da4:	e7f9      	b.n	8006d9a <_calloc_r+0x12>
 8006da6:	462a      	mov	r2, r5
 8006da8:	4621      	mov	r1, r4
 8006daa:	f7fd fa74 	bl	8004296 <memset>
 8006dae:	e7f4      	b.n	8006d9a <_calloc_r+0x12>

08006db0 <rshift>:
 8006db0:	6903      	ldr	r3, [r0, #16]
 8006db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006db6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006dba:	f100 0414 	add.w	r4, r0, #20
 8006dbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006dc2:	dd46      	ble.n	8006e52 <rshift+0xa2>
 8006dc4:	f011 011f 	ands.w	r1, r1, #31
 8006dc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006dcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006dd0:	d10c      	bne.n	8006dec <rshift+0x3c>
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	f100 0710 	add.w	r7, r0, #16
 8006dd8:	42b1      	cmp	r1, r6
 8006dda:	d335      	bcc.n	8006e48 <rshift+0x98>
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	1eea      	subs	r2, r5, #3
 8006de2:	4296      	cmp	r6, r2
 8006de4:	bf38      	it	cc
 8006de6:	2300      	movcc	r3, #0
 8006de8:	4423      	add	r3, r4
 8006dea:	e015      	b.n	8006e18 <rshift+0x68>
 8006dec:	46a1      	mov	r9, r4
 8006dee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006df2:	f1c1 0820 	rsb	r8, r1, #32
 8006df6:	40cf      	lsrs	r7, r1
 8006df8:	f105 0e04 	add.w	lr, r5, #4
 8006dfc:	4576      	cmp	r6, lr
 8006dfe:	46f4      	mov	ip, lr
 8006e00:	d816      	bhi.n	8006e30 <rshift+0x80>
 8006e02:	1a9a      	subs	r2, r3, r2
 8006e04:	0092      	lsls	r2, r2, #2
 8006e06:	3a04      	subs	r2, #4
 8006e08:	3501      	adds	r5, #1
 8006e0a:	42ae      	cmp	r6, r5
 8006e0c:	bf38      	it	cc
 8006e0e:	2200      	movcc	r2, #0
 8006e10:	18a3      	adds	r3, r4, r2
 8006e12:	50a7      	str	r7, [r4, r2]
 8006e14:	b107      	cbz	r7, 8006e18 <rshift+0x68>
 8006e16:	3304      	adds	r3, #4
 8006e18:	42a3      	cmp	r3, r4
 8006e1a:	eba3 0204 	sub.w	r2, r3, r4
 8006e1e:	bf08      	it	eq
 8006e20:	2300      	moveq	r3, #0
 8006e22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e26:	6102      	str	r2, [r0, #16]
 8006e28:	bf08      	it	eq
 8006e2a:	6143      	streq	r3, [r0, #20]
 8006e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e30:	f8dc c000 	ldr.w	ip, [ip]
 8006e34:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e38:	ea4c 0707 	orr.w	r7, ip, r7
 8006e3c:	f849 7b04 	str.w	r7, [r9], #4
 8006e40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e44:	40cf      	lsrs	r7, r1
 8006e46:	e7d9      	b.n	8006dfc <rshift+0x4c>
 8006e48:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e50:	e7c2      	b.n	8006dd8 <rshift+0x28>
 8006e52:	4623      	mov	r3, r4
 8006e54:	e7e0      	b.n	8006e18 <rshift+0x68>

08006e56 <__hexdig_fun>:
 8006e56:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d802      	bhi.n	8006e64 <__hexdig_fun+0xe>
 8006e5e:	3820      	subs	r0, #32
 8006e60:	b2c0      	uxtb	r0, r0
 8006e62:	4770      	bx	lr
 8006e64:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006e68:	2b05      	cmp	r3, #5
 8006e6a:	d801      	bhi.n	8006e70 <__hexdig_fun+0x1a>
 8006e6c:	3847      	subs	r0, #71	@ 0x47
 8006e6e:	e7f7      	b.n	8006e60 <__hexdig_fun+0xa>
 8006e70:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006e74:	2b05      	cmp	r3, #5
 8006e76:	d801      	bhi.n	8006e7c <__hexdig_fun+0x26>
 8006e78:	3827      	subs	r0, #39	@ 0x27
 8006e7a:	e7f1      	b.n	8006e60 <__hexdig_fun+0xa>
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	4770      	bx	lr

08006e80 <__gethex>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	468a      	mov	sl, r1
 8006e86:	4690      	mov	r8, r2
 8006e88:	b085      	sub	sp, #20
 8006e8a:	9302      	str	r3, [sp, #8]
 8006e8c:	680b      	ldr	r3, [r1, #0]
 8006e8e:	9001      	str	r0, [sp, #4]
 8006e90:	1c9c      	adds	r4, r3, #2
 8006e92:	46a1      	mov	r9, r4
 8006e94:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006e98:	2830      	cmp	r0, #48	@ 0x30
 8006e9a:	d0fa      	beq.n	8006e92 <__gethex+0x12>
 8006e9c:	eba9 0303 	sub.w	r3, r9, r3
 8006ea0:	f1a3 0b02 	sub.w	fp, r3, #2
 8006ea4:	f7ff ffd7 	bl	8006e56 <__hexdig_fun>
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d168      	bne.n	8006f80 <__gethex+0x100>
 8006eae:	2201      	movs	r2, #1
 8006eb0:	4648      	mov	r0, r9
 8006eb2:	499f      	ldr	r1, [pc, #636]	@ (8007130 <__gethex+0x2b0>)
 8006eb4:	f7ff ff14 	bl	8006ce0 <strncmp>
 8006eb8:	4607      	mov	r7, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d167      	bne.n	8006f8e <__gethex+0x10e>
 8006ebe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006ec2:	4626      	mov	r6, r4
 8006ec4:	f7ff ffc7 	bl	8006e56 <__hexdig_fun>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d062      	beq.n	8006f92 <__gethex+0x112>
 8006ecc:	4623      	mov	r3, r4
 8006ece:	7818      	ldrb	r0, [r3, #0]
 8006ed0:	4699      	mov	r9, r3
 8006ed2:	2830      	cmp	r0, #48	@ 0x30
 8006ed4:	f103 0301 	add.w	r3, r3, #1
 8006ed8:	d0f9      	beq.n	8006ece <__gethex+0x4e>
 8006eda:	f7ff ffbc 	bl	8006e56 <__hexdig_fun>
 8006ede:	fab0 f580 	clz	r5, r0
 8006ee2:	f04f 0b01 	mov.w	fp, #1
 8006ee6:	096d      	lsrs	r5, r5, #5
 8006ee8:	464a      	mov	r2, r9
 8006eea:	4616      	mov	r6, r2
 8006eec:	7830      	ldrb	r0, [r6, #0]
 8006eee:	3201      	adds	r2, #1
 8006ef0:	f7ff ffb1 	bl	8006e56 <__hexdig_fun>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d1f8      	bne.n	8006eea <__gethex+0x6a>
 8006ef8:	2201      	movs	r2, #1
 8006efa:	4630      	mov	r0, r6
 8006efc:	498c      	ldr	r1, [pc, #560]	@ (8007130 <__gethex+0x2b0>)
 8006efe:	f7ff feef 	bl	8006ce0 <strncmp>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d13f      	bne.n	8006f86 <__gethex+0x106>
 8006f06:	b944      	cbnz	r4, 8006f1a <__gethex+0x9a>
 8006f08:	1c74      	adds	r4, r6, #1
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	7830      	ldrb	r0, [r6, #0]
 8006f10:	3201      	adds	r2, #1
 8006f12:	f7ff ffa0 	bl	8006e56 <__hexdig_fun>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d1f8      	bne.n	8006f0c <__gethex+0x8c>
 8006f1a:	1ba4      	subs	r4, r4, r6
 8006f1c:	00a7      	lsls	r7, r4, #2
 8006f1e:	7833      	ldrb	r3, [r6, #0]
 8006f20:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006f24:	2b50      	cmp	r3, #80	@ 0x50
 8006f26:	d13e      	bne.n	8006fa6 <__gethex+0x126>
 8006f28:	7873      	ldrb	r3, [r6, #1]
 8006f2a:	2b2b      	cmp	r3, #43	@ 0x2b
 8006f2c:	d033      	beq.n	8006f96 <__gethex+0x116>
 8006f2e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006f30:	d034      	beq.n	8006f9c <__gethex+0x11c>
 8006f32:	2400      	movs	r4, #0
 8006f34:	1c71      	adds	r1, r6, #1
 8006f36:	7808      	ldrb	r0, [r1, #0]
 8006f38:	f7ff ff8d 	bl	8006e56 <__hexdig_fun>
 8006f3c:	1e43      	subs	r3, r0, #1
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b18      	cmp	r3, #24
 8006f42:	d830      	bhi.n	8006fa6 <__gethex+0x126>
 8006f44:	f1a0 0210 	sub.w	r2, r0, #16
 8006f48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f4c:	f7ff ff83 	bl	8006e56 <__hexdig_fun>
 8006f50:	f100 3cff 	add.w	ip, r0, #4294967295
 8006f54:	fa5f fc8c 	uxtb.w	ip, ip
 8006f58:	f1bc 0f18 	cmp.w	ip, #24
 8006f5c:	f04f 030a 	mov.w	r3, #10
 8006f60:	d91e      	bls.n	8006fa0 <__gethex+0x120>
 8006f62:	b104      	cbz	r4, 8006f66 <__gethex+0xe6>
 8006f64:	4252      	negs	r2, r2
 8006f66:	4417      	add	r7, r2
 8006f68:	f8ca 1000 	str.w	r1, [sl]
 8006f6c:	b1ed      	cbz	r5, 8006faa <__gethex+0x12a>
 8006f6e:	f1bb 0f00 	cmp.w	fp, #0
 8006f72:	bf0c      	ite	eq
 8006f74:	2506      	moveq	r5, #6
 8006f76:	2500      	movne	r5, #0
 8006f78:	4628      	mov	r0, r5
 8006f7a:	b005      	add	sp, #20
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	2500      	movs	r5, #0
 8006f82:	462c      	mov	r4, r5
 8006f84:	e7b0      	b.n	8006ee8 <__gethex+0x68>
 8006f86:	2c00      	cmp	r4, #0
 8006f88:	d1c7      	bne.n	8006f1a <__gethex+0x9a>
 8006f8a:	4627      	mov	r7, r4
 8006f8c:	e7c7      	b.n	8006f1e <__gethex+0x9e>
 8006f8e:	464e      	mov	r6, r9
 8006f90:	462f      	mov	r7, r5
 8006f92:	2501      	movs	r5, #1
 8006f94:	e7c3      	b.n	8006f1e <__gethex+0x9e>
 8006f96:	2400      	movs	r4, #0
 8006f98:	1cb1      	adds	r1, r6, #2
 8006f9a:	e7cc      	b.n	8006f36 <__gethex+0xb6>
 8006f9c:	2401      	movs	r4, #1
 8006f9e:	e7fb      	b.n	8006f98 <__gethex+0x118>
 8006fa0:	fb03 0002 	mla	r0, r3, r2, r0
 8006fa4:	e7ce      	b.n	8006f44 <__gethex+0xc4>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	e7de      	b.n	8006f68 <__gethex+0xe8>
 8006faa:	4629      	mov	r1, r5
 8006fac:	eba6 0309 	sub.w	r3, r6, r9
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	2b07      	cmp	r3, #7
 8006fb4:	dc0a      	bgt.n	8006fcc <__gethex+0x14c>
 8006fb6:	9801      	ldr	r0, [sp, #4]
 8006fb8:	f7fe f95c 	bl	8005274 <_Balloc>
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	b940      	cbnz	r0, 8006fd2 <__gethex+0x152>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	21e4      	movs	r1, #228	@ 0xe4
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007134 <__gethex+0x2b4>)
 8006fc6:	485c      	ldr	r0, [pc, #368]	@ (8007138 <__gethex+0x2b8>)
 8006fc8:	f7ff fec0 	bl	8006d4c <__assert_func>
 8006fcc:	3101      	adds	r1, #1
 8006fce:	105b      	asrs	r3, r3, #1
 8006fd0:	e7ef      	b.n	8006fb2 <__gethex+0x132>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f100 0a14 	add.w	sl, r0, #20
 8006fd8:	4655      	mov	r5, sl
 8006fda:	469b      	mov	fp, r3
 8006fdc:	45b1      	cmp	r9, r6
 8006fde:	d337      	bcc.n	8007050 <__gethex+0x1d0>
 8006fe0:	f845 bb04 	str.w	fp, [r5], #4
 8006fe4:	eba5 050a 	sub.w	r5, r5, sl
 8006fe8:	10ad      	asrs	r5, r5, #2
 8006fea:	6125      	str	r5, [r4, #16]
 8006fec:	4658      	mov	r0, fp
 8006fee:	f7fe fa33 	bl	8005458 <__hi0bits>
 8006ff2:	016d      	lsls	r5, r5, #5
 8006ff4:	f8d8 6000 	ldr.w	r6, [r8]
 8006ff8:	1a2d      	subs	r5, r5, r0
 8006ffa:	42b5      	cmp	r5, r6
 8006ffc:	dd54      	ble.n	80070a8 <__gethex+0x228>
 8006ffe:	1bad      	subs	r5, r5, r6
 8007000:	4629      	mov	r1, r5
 8007002:	4620      	mov	r0, r4
 8007004:	f7fe fdb5 	bl	8005b72 <__any_on>
 8007008:	4681      	mov	r9, r0
 800700a:	b178      	cbz	r0, 800702c <__gethex+0x1ac>
 800700c:	f04f 0901 	mov.w	r9, #1
 8007010:	1e6b      	subs	r3, r5, #1
 8007012:	1159      	asrs	r1, r3, #5
 8007014:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007018:	f003 021f 	and.w	r2, r3, #31
 800701c:	fa09 f202 	lsl.w	r2, r9, r2
 8007020:	420a      	tst	r2, r1
 8007022:	d003      	beq.n	800702c <__gethex+0x1ac>
 8007024:	454b      	cmp	r3, r9
 8007026:	dc36      	bgt.n	8007096 <__gethex+0x216>
 8007028:	f04f 0902 	mov.w	r9, #2
 800702c:	4629      	mov	r1, r5
 800702e:	4620      	mov	r0, r4
 8007030:	f7ff febe 	bl	8006db0 <rshift>
 8007034:	442f      	add	r7, r5
 8007036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800703a:	42bb      	cmp	r3, r7
 800703c:	da42      	bge.n	80070c4 <__gethex+0x244>
 800703e:	4621      	mov	r1, r4
 8007040:	9801      	ldr	r0, [sp, #4]
 8007042:	f7fe f957 	bl	80052f4 <_Bfree>
 8007046:	2300      	movs	r3, #0
 8007048:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800704a:	25a3      	movs	r5, #163	@ 0xa3
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e793      	b.n	8006f78 <__gethex+0xf8>
 8007050:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007054:	2a2e      	cmp	r2, #46	@ 0x2e
 8007056:	d012      	beq.n	800707e <__gethex+0x1fe>
 8007058:	2b20      	cmp	r3, #32
 800705a:	d104      	bne.n	8007066 <__gethex+0x1e6>
 800705c:	f845 bb04 	str.w	fp, [r5], #4
 8007060:	f04f 0b00 	mov.w	fp, #0
 8007064:	465b      	mov	r3, fp
 8007066:	7830      	ldrb	r0, [r6, #0]
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	f7ff fef4 	bl	8006e56 <__hexdig_fun>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	f000 000f 	and.w	r0, r0, #15
 8007074:	4098      	lsls	r0, r3
 8007076:	ea4b 0b00 	orr.w	fp, fp, r0
 800707a:	3304      	adds	r3, #4
 800707c:	e7ae      	b.n	8006fdc <__gethex+0x15c>
 800707e:	45b1      	cmp	r9, r6
 8007080:	d8ea      	bhi.n	8007058 <__gethex+0x1d8>
 8007082:	2201      	movs	r2, #1
 8007084:	4630      	mov	r0, r6
 8007086:	492a      	ldr	r1, [pc, #168]	@ (8007130 <__gethex+0x2b0>)
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	f7ff fe29 	bl	8006ce0 <strncmp>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	2800      	cmp	r0, #0
 8007092:	d1e1      	bne.n	8007058 <__gethex+0x1d8>
 8007094:	e7a2      	b.n	8006fdc <__gethex+0x15c>
 8007096:	4620      	mov	r0, r4
 8007098:	1ea9      	subs	r1, r5, #2
 800709a:	f7fe fd6a 	bl	8005b72 <__any_on>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d0c2      	beq.n	8007028 <__gethex+0x1a8>
 80070a2:	f04f 0903 	mov.w	r9, #3
 80070a6:	e7c1      	b.n	800702c <__gethex+0x1ac>
 80070a8:	da09      	bge.n	80070be <__gethex+0x23e>
 80070aa:	1b75      	subs	r5, r6, r5
 80070ac:	4621      	mov	r1, r4
 80070ae:	462a      	mov	r2, r5
 80070b0:	9801      	ldr	r0, [sp, #4]
 80070b2:	f7fe fb2f 	bl	8005714 <__lshift>
 80070b6:	4604      	mov	r4, r0
 80070b8:	1b7f      	subs	r7, r7, r5
 80070ba:	f100 0a14 	add.w	sl, r0, #20
 80070be:	f04f 0900 	mov.w	r9, #0
 80070c2:	e7b8      	b.n	8007036 <__gethex+0x1b6>
 80070c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80070c8:	42bd      	cmp	r5, r7
 80070ca:	dd6f      	ble.n	80071ac <__gethex+0x32c>
 80070cc:	1bed      	subs	r5, r5, r7
 80070ce:	42ae      	cmp	r6, r5
 80070d0:	dc34      	bgt.n	800713c <__gethex+0x2bc>
 80070d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d022      	beq.n	8007120 <__gethex+0x2a0>
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d024      	beq.n	8007128 <__gethex+0x2a8>
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d115      	bne.n	800710e <__gethex+0x28e>
 80070e2:	42ae      	cmp	r6, r5
 80070e4:	d113      	bne.n	800710e <__gethex+0x28e>
 80070e6:	2e01      	cmp	r6, #1
 80070e8:	d10b      	bne.n	8007102 <__gethex+0x282>
 80070ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070ee:	9a02      	ldr	r2, [sp, #8]
 80070f0:	2562      	movs	r5, #98	@ 0x62
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	2301      	movs	r3, #1
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	f8ca 3000 	str.w	r3, [sl]
 80070fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fe:	601c      	str	r4, [r3, #0]
 8007100:	e73a      	b.n	8006f78 <__gethex+0xf8>
 8007102:	4620      	mov	r0, r4
 8007104:	1e71      	subs	r1, r6, #1
 8007106:	f7fe fd34 	bl	8005b72 <__any_on>
 800710a:	2800      	cmp	r0, #0
 800710c:	d1ed      	bne.n	80070ea <__gethex+0x26a>
 800710e:	4621      	mov	r1, r4
 8007110:	9801      	ldr	r0, [sp, #4]
 8007112:	f7fe f8ef 	bl	80052f4 <_Bfree>
 8007116:	2300      	movs	r3, #0
 8007118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800711a:	2550      	movs	r5, #80	@ 0x50
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e72b      	b.n	8006f78 <__gethex+0xf8>
 8007120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f3      	bne.n	800710e <__gethex+0x28e>
 8007126:	e7e0      	b.n	80070ea <__gethex+0x26a>
 8007128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1dd      	bne.n	80070ea <__gethex+0x26a>
 800712e:	e7ee      	b.n	800710e <__gethex+0x28e>
 8007130:	08007b91 	.word	0x08007b91
 8007134:	08007b27 	.word	0x08007b27
 8007138:	08007be8 	.word	0x08007be8
 800713c:	1e6f      	subs	r7, r5, #1
 800713e:	f1b9 0f00 	cmp.w	r9, #0
 8007142:	d130      	bne.n	80071a6 <__gethex+0x326>
 8007144:	b127      	cbz	r7, 8007150 <__gethex+0x2d0>
 8007146:	4639      	mov	r1, r7
 8007148:	4620      	mov	r0, r4
 800714a:	f7fe fd12 	bl	8005b72 <__any_on>
 800714e:	4681      	mov	r9, r0
 8007150:	2301      	movs	r3, #1
 8007152:	4629      	mov	r1, r5
 8007154:	1b76      	subs	r6, r6, r5
 8007156:	2502      	movs	r5, #2
 8007158:	117a      	asrs	r2, r7, #5
 800715a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800715e:	f007 071f 	and.w	r7, r7, #31
 8007162:	40bb      	lsls	r3, r7
 8007164:	4213      	tst	r3, r2
 8007166:	4620      	mov	r0, r4
 8007168:	bf18      	it	ne
 800716a:	f049 0902 	orrne.w	r9, r9, #2
 800716e:	f7ff fe1f 	bl	8006db0 <rshift>
 8007172:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007176:	f1b9 0f00 	cmp.w	r9, #0
 800717a:	d047      	beq.n	800720c <__gethex+0x38c>
 800717c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d015      	beq.n	80071b0 <__gethex+0x330>
 8007184:	2b03      	cmp	r3, #3
 8007186:	d017      	beq.n	80071b8 <__gethex+0x338>
 8007188:	2b01      	cmp	r3, #1
 800718a:	d109      	bne.n	80071a0 <__gethex+0x320>
 800718c:	f019 0f02 	tst.w	r9, #2
 8007190:	d006      	beq.n	80071a0 <__gethex+0x320>
 8007192:	f8da 3000 	ldr.w	r3, [sl]
 8007196:	ea49 0903 	orr.w	r9, r9, r3
 800719a:	f019 0f01 	tst.w	r9, #1
 800719e:	d10e      	bne.n	80071be <__gethex+0x33e>
 80071a0:	f045 0510 	orr.w	r5, r5, #16
 80071a4:	e032      	b.n	800720c <__gethex+0x38c>
 80071a6:	f04f 0901 	mov.w	r9, #1
 80071aa:	e7d1      	b.n	8007150 <__gethex+0x2d0>
 80071ac:	2501      	movs	r5, #1
 80071ae:	e7e2      	b.n	8007176 <__gethex+0x2f6>
 80071b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b2:	f1c3 0301 	rsb	r3, r3, #1
 80071b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0f0      	beq.n	80071a0 <__gethex+0x320>
 80071be:	f04f 0c00 	mov.w	ip, #0
 80071c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80071c6:	f104 0314 	add.w	r3, r4, #20
 80071ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80071ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80071dc:	d01b      	beq.n	8007216 <__gethex+0x396>
 80071de:	3201      	adds	r2, #1
 80071e0:	6002      	str	r2, [r0, #0]
 80071e2:	2d02      	cmp	r5, #2
 80071e4:	f104 0314 	add.w	r3, r4, #20
 80071e8:	d13c      	bne.n	8007264 <__gethex+0x3e4>
 80071ea:	f8d8 2000 	ldr.w	r2, [r8]
 80071ee:	3a01      	subs	r2, #1
 80071f0:	42b2      	cmp	r2, r6
 80071f2:	d109      	bne.n	8007208 <__gethex+0x388>
 80071f4:	2201      	movs	r2, #1
 80071f6:	1171      	asrs	r1, r6, #5
 80071f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071fc:	f006 061f 	and.w	r6, r6, #31
 8007200:	fa02 f606 	lsl.w	r6, r2, r6
 8007204:	421e      	tst	r6, r3
 8007206:	d13a      	bne.n	800727e <__gethex+0x3fe>
 8007208:	f045 0520 	orr.w	r5, r5, #32
 800720c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720e:	601c      	str	r4, [r3, #0]
 8007210:	9b02      	ldr	r3, [sp, #8]
 8007212:	601f      	str	r7, [r3, #0]
 8007214:	e6b0      	b.n	8006f78 <__gethex+0xf8>
 8007216:	4299      	cmp	r1, r3
 8007218:	f843 cc04 	str.w	ip, [r3, #-4]
 800721c:	d8d9      	bhi.n	80071d2 <__gethex+0x352>
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	459b      	cmp	fp, r3
 8007222:	db17      	blt.n	8007254 <__gethex+0x3d4>
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	9801      	ldr	r0, [sp, #4]
 8007228:	3101      	adds	r1, #1
 800722a:	f7fe f823 	bl	8005274 <_Balloc>
 800722e:	4681      	mov	r9, r0
 8007230:	b918      	cbnz	r0, 800723a <__gethex+0x3ba>
 8007232:	4602      	mov	r2, r0
 8007234:	2184      	movs	r1, #132	@ 0x84
 8007236:	4b19      	ldr	r3, [pc, #100]	@ (800729c <__gethex+0x41c>)
 8007238:	e6c5      	b.n	8006fc6 <__gethex+0x146>
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	f104 010c 	add.w	r1, r4, #12
 8007240:	3202      	adds	r2, #2
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	300c      	adds	r0, #12
 8007246:	f7ff fd6d 	bl	8006d24 <memcpy>
 800724a:	4621      	mov	r1, r4
 800724c:	9801      	ldr	r0, [sp, #4]
 800724e:	f7fe f851 	bl	80052f4 <_Bfree>
 8007252:	464c      	mov	r4, r9
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6122      	str	r2, [r4, #16]
 800725a:	2201      	movs	r2, #1
 800725c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007260:	615a      	str	r2, [r3, #20]
 8007262:	e7be      	b.n	80071e2 <__gethex+0x362>
 8007264:	6922      	ldr	r2, [r4, #16]
 8007266:	455a      	cmp	r2, fp
 8007268:	dd0b      	ble.n	8007282 <__gethex+0x402>
 800726a:	2101      	movs	r1, #1
 800726c:	4620      	mov	r0, r4
 800726e:	f7ff fd9f 	bl	8006db0 <rshift>
 8007272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007276:	3701      	adds	r7, #1
 8007278:	42bb      	cmp	r3, r7
 800727a:	f6ff aee0 	blt.w	800703e <__gethex+0x1be>
 800727e:	2501      	movs	r5, #1
 8007280:	e7c2      	b.n	8007208 <__gethex+0x388>
 8007282:	f016 061f 	ands.w	r6, r6, #31
 8007286:	d0fa      	beq.n	800727e <__gethex+0x3fe>
 8007288:	4453      	add	r3, sl
 800728a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800728e:	f7fe f8e3 	bl	8005458 <__hi0bits>
 8007292:	f1c6 0620 	rsb	r6, r6, #32
 8007296:	42b0      	cmp	r0, r6
 8007298:	dbe7      	blt.n	800726a <__gethex+0x3ea>
 800729a:	e7f0      	b.n	800727e <__gethex+0x3fe>
 800729c:	08007b27 	.word	0x08007b27

080072a0 <L_shift>:
 80072a0:	f1c2 0208 	rsb	r2, r2, #8
 80072a4:	0092      	lsls	r2, r2, #2
 80072a6:	b570      	push	{r4, r5, r6, lr}
 80072a8:	f1c2 0620 	rsb	r6, r2, #32
 80072ac:	6843      	ldr	r3, [r0, #4]
 80072ae:	6804      	ldr	r4, [r0, #0]
 80072b0:	fa03 f506 	lsl.w	r5, r3, r6
 80072b4:	432c      	orrs	r4, r5
 80072b6:	40d3      	lsrs	r3, r2
 80072b8:	6004      	str	r4, [r0, #0]
 80072ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80072be:	4288      	cmp	r0, r1
 80072c0:	d3f4      	bcc.n	80072ac <L_shift+0xc>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}

080072c4 <__match>:
 80072c4:	b530      	push	{r4, r5, lr}
 80072c6:	6803      	ldr	r3, [r0, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ce:	b914      	cbnz	r4, 80072d6 <__match+0x12>
 80072d0:	6003      	str	r3, [r0, #0]
 80072d2:	2001      	movs	r0, #1
 80072d4:	bd30      	pop	{r4, r5, pc}
 80072d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80072de:	2d19      	cmp	r5, #25
 80072e0:	bf98      	it	ls
 80072e2:	3220      	addls	r2, #32
 80072e4:	42a2      	cmp	r2, r4
 80072e6:	d0f0      	beq.n	80072ca <__match+0x6>
 80072e8:	2000      	movs	r0, #0
 80072ea:	e7f3      	b.n	80072d4 <__match+0x10>

080072ec <__hexnan>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	2500      	movs	r5, #0
 80072f2:	680b      	ldr	r3, [r1, #0]
 80072f4:	4682      	mov	sl, r0
 80072f6:	115e      	asrs	r6, r3, #5
 80072f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072fc:	f013 031f 	ands.w	r3, r3, #31
 8007300:	bf18      	it	ne
 8007302:	3604      	addne	r6, #4
 8007304:	1f37      	subs	r7, r6, #4
 8007306:	4690      	mov	r8, r2
 8007308:	46b9      	mov	r9, r7
 800730a:	463c      	mov	r4, r7
 800730c:	46ab      	mov	fp, r5
 800730e:	b087      	sub	sp, #28
 8007310:	6801      	ldr	r1, [r0, #0]
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	f846 5c04 	str.w	r5, [r6, #-4]
 8007318:	9502      	str	r5, [sp, #8]
 800731a:	784a      	ldrb	r2, [r1, #1]
 800731c:	1c4b      	adds	r3, r1, #1
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	b342      	cbz	r2, 8007374 <__hexnan+0x88>
 8007322:	4610      	mov	r0, r2
 8007324:	9105      	str	r1, [sp, #20]
 8007326:	9204      	str	r2, [sp, #16]
 8007328:	f7ff fd95 	bl	8006e56 <__hexdig_fun>
 800732c:	2800      	cmp	r0, #0
 800732e:	d151      	bne.n	80073d4 <__hexnan+0xe8>
 8007330:	9a04      	ldr	r2, [sp, #16]
 8007332:	9905      	ldr	r1, [sp, #20]
 8007334:	2a20      	cmp	r2, #32
 8007336:	d818      	bhi.n	800736a <__hexnan+0x7e>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	459b      	cmp	fp, r3
 800733c:	dd13      	ble.n	8007366 <__hexnan+0x7a>
 800733e:	454c      	cmp	r4, r9
 8007340:	d206      	bcs.n	8007350 <__hexnan+0x64>
 8007342:	2d07      	cmp	r5, #7
 8007344:	dc04      	bgt.n	8007350 <__hexnan+0x64>
 8007346:	462a      	mov	r2, r5
 8007348:	4649      	mov	r1, r9
 800734a:	4620      	mov	r0, r4
 800734c:	f7ff ffa8 	bl	80072a0 <L_shift>
 8007350:	4544      	cmp	r4, r8
 8007352:	d952      	bls.n	80073fa <__hexnan+0x10e>
 8007354:	2300      	movs	r3, #0
 8007356:	f1a4 0904 	sub.w	r9, r4, #4
 800735a:	f844 3c04 	str.w	r3, [r4, #-4]
 800735e:	461d      	mov	r5, r3
 8007360:	464c      	mov	r4, r9
 8007362:	f8cd b008 	str.w	fp, [sp, #8]
 8007366:	9903      	ldr	r1, [sp, #12]
 8007368:	e7d7      	b.n	800731a <__hexnan+0x2e>
 800736a:	2a29      	cmp	r2, #41	@ 0x29
 800736c:	d157      	bne.n	800741e <__hexnan+0x132>
 800736e:	3102      	adds	r1, #2
 8007370:	f8ca 1000 	str.w	r1, [sl]
 8007374:	f1bb 0f00 	cmp.w	fp, #0
 8007378:	d051      	beq.n	800741e <__hexnan+0x132>
 800737a:	454c      	cmp	r4, r9
 800737c:	d206      	bcs.n	800738c <__hexnan+0xa0>
 800737e:	2d07      	cmp	r5, #7
 8007380:	dc04      	bgt.n	800738c <__hexnan+0xa0>
 8007382:	462a      	mov	r2, r5
 8007384:	4649      	mov	r1, r9
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff ff8a 	bl	80072a0 <L_shift>
 800738c:	4544      	cmp	r4, r8
 800738e:	d936      	bls.n	80073fe <__hexnan+0x112>
 8007390:	4623      	mov	r3, r4
 8007392:	f1a8 0204 	sub.w	r2, r8, #4
 8007396:	f853 1b04 	ldr.w	r1, [r3], #4
 800739a:	429f      	cmp	r7, r3
 800739c:	f842 1f04 	str.w	r1, [r2, #4]!
 80073a0:	d2f9      	bcs.n	8007396 <__hexnan+0xaa>
 80073a2:	1b3b      	subs	r3, r7, r4
 80073a4:	f023 0303 	bic.w	r3, r3, #3
 80073a8:	3304      	adds	r3, #4
 80073aa:	3401      	adds	r4, #1
 80073ac:	3e03      	subs	r6, #3
 80073ae:	42b4      	cmp	r4, r6
 80073b0:	bf88      	it	hi
 80073b2:	2304      	movhi	r3, #4
 80073b4:	2200      	movs	r2, #0
 80073b6:	4443      	add	r3, r8
 80073b8:	f843 2b04 	str.w	r2, [r3], #4
 80073bc:	429f      	cmp	r7, r3
 80073be:	d2fb      	bcs.n	80073b8 <__hexnan+0xcc>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	b91b      	cbnz	r3, 80073cc <__hexnan+0xe0>
 80073c4:	4547      	cmp	r7, r8
 80073c6:	d128      	bne.n	800741a <__hexnan+0x12e>
 80073c8:	2301      	movs	r3, #1
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	2005      	movs	r0, #5
 80073ce:	b007      	add	sp, #28
 80073d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d4:	3501      	adds	r5, #1
 80073d6:	2d08      	cmp	r5, #8
 80073d8:	f10b 0b01 	add.w	fp, fp, #1
 80073dc:	dd06      	ble.n	80073ec <__hexnan+0x100>
 80073de:	4544      	cmp	r4, r8
 80073e0:	d9c1      	bls.n	8007366 <__hexnan+0x7a>
 80073e2:	2300      	movs	r3, #0
 80073e4:	2501      	movs	r5, #1
 80073e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80073ea:	3c04      	subs	r4, #4
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	f000 000f 	and.w	r0, r0, #15
 80073f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80073f6:	6020      	str	r0, [r4, #0]
 80073f8:	e7b5      	b.n	8007366 <__hexnan+0x7a>
 80073fa:	2508      	movs	r5, #8
 80073fc:	e7b3      	b.n	8007366 <__hexnan+0x7a>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0dd      	beq.n	80073c0 <__hexnan+0xd4>
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	f1c3 0320 	rsb	r3, r3, #32
 800740c:	40da      	lsrs	r2, r3
 800740e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007412:	4013      	ands	r3, r2
 8007414:	f846 3c04 	str.w	r3, [r6, #-4]
 8007418:	e7d2      	b.n	80073c0 <__hexnan+0xd4>
 800741a:	3f04      	subs	r7, #4
 800741c:	e7d0      	b.n	80073c0 <__hexnan+0xd4>
 800741e:	2004      	movs	r0, #4
 8007420:	e7d5      	b.n	80073ce <__hexnan+0xe2>

08007422 <__ascii_mbtowc>:
 8007422:	b082      	sub	sp, #8
 8007424:	b901      	cbnz	r1, 8007428 <__ascii_mbtowc+0x6>
 8007426:	a901      	add	r1, sp, #4
 8007428:	b142      	cbz	r2, 800743c <__ascii_mbtowc+0x1a>
 800742a:	b14b      	cbz	r3, 8007440 <__ascii_mbtowc+0x1e>
 800742c:	7813      	ldrb	r3, [r2, #0]
 800742e:	600b      	str	r3, [r1, #0]
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	1e10      	subs	r0, r2, #0
 8007434:	bf18      	it	ne
 8007436:	2001      	movne	r0, #1
 8007438:	b002      	add	sp, #8
 800743a:	4770      	bx	lr
 800743c:	4610      	mov	r0, r2
 800743e:	e7fb      	b.n	8007438 <__ascii_mbtowc+0x16>
 8007440:	f06f 0001 	mvn.w	r0, #1
 8007444:	e7f8      	b.n	8007438 <__ascii_mbtowc+0x16>

08007446 <_realloc_r>:
 8007446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800744a:	4607      	mov	r7, r0
 800744c:	4614      	mov	r4, r2
 800744e:	460d      	mov	r5, r1
 8007450:	b921      	cbnz	r1, 800745c <_realloc_r+0x16>
 8007452:	4611      	mov	r1, r2
 8007454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	f7fd be80 	b.w	800515c <_malloc_r>
 800745c:	b92a      	cbnz	r2, 800746a <_realloc_r+0x24>
 800745e:	f7fd fe0b 	bl	8005078 <_free_r>
 8007462:	4625      	mov	r5, r4
 8007464:	4628      	mov	r0, r5
 8007466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746a:	f000 f840 	bl	80074ee <_malloc_usable_size_r>
 800746e:	4284      	cmp	r4, r0
 8007470:	4606      	mov	r6, r0
 8007472:	d802      	bhi.n	800747a <_realloc_r+0x34>
 8007474:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007478:	d8f4      	bhi.n	8007464 <_realloc_r+0x1e>
 800747a:	4621      	mov	r1, r4
 800747c:	4638      	mov	r0, r7
 800747e:	f7fd fe6d 	bl	800515c <_malloc_r>
 8007482:	4680      	mov	r8, r0
 8007484:	b908      	cbnz	r0, 800748a <_realloc_r+0x44>
 8007486:	4645      	mov	r5, r8
 8007488:	e7ec      	b.n	8007464 <_realloc_r+0x1e>
 800748a:	42b4      	cmp	r4, r6
 800748c:	4622      	mov	r2, r4
 800748e:	4629      	mov	r1, r5
 8007490:	bf28      	it	cs
 8007492:	4632      	movcs	r2, r6
 8007494:	f7ff fc46 	bl	8006d24 <memcpy>
 8007498:	4629      	mov	r1, r5
 800749a:	4638      	mov	r0, r7
 800749c:	f7fd fdec 	bl	8005078 <_free_r>
 80074a0:	e7f1      	b.n	8007486 <_realloc_r+0x40>

080074a2 <__ascii_wctomb>:
 80074a2:	4603      	mov	r3, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	b141      	cbz	r1, 80074ba <__ascii_wctomb+0x18>
 80074a8:	2aff      	cmp	r2, #255	@ 0xff
 80074aa:	d904      	bls.n	80074b6 <__ascii_wctomb+0x14>
 80074ac:	228a      	movs	r2, #138	@ 0x8a
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	2001      	movs	r0, #1
 80074b8:	700a      	strb	r2, [r1, #0]
 80074ba:	4770      	bx	lr

080074bc <fiprintf>:
 80074bc:	b40e      	push	{r1, r2, r3}
 80074be:	b503      	push	{r0, r1, lr}
 80074c0:	4601      	mov	r1, r0
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	4805      	ldr	r0, [pc, #20]	@ (80074dc <fiprintf+0x20>)
 80074c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	f000 f83d 	bl	800754c <_vfiprintf_r>
 80074d2:	b002      	add	sp, #8
 80074d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d8:	b003      	add	sp, #12
 80074da:	4770      	bx	lr
 80074dc:	20000040 	.word	0x20000040

080074e0 <abort>:
 80074e0:	2006      	movs	r0, #6
 80074e2:	b508      	push	{r3, lr}
 80074e4:	f000 fa06 	bl	80078f4 <raise>
 80074e8:	2001      	movs	r0, #1
 80074ea:	f7fa f9ad 	bl	8001848 <_exit>

080074ee <_malloc_usable_size_r>:
 80074ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f2:	1f18      	subs	r0, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbc      	itt	lt
 80074f8:	580b      	ldrlt	r3, [r1, r0]
 80074fa:	18c0      	addlt	r0, r0, r3
 80074fc:	4770      	bx	lr

080074fe <__sfputc_r>:
 80074fe:	6893      	ldr	r3, [r2, #8]
 8007500:	b410      	push	{r4}
 8007502:	3b01      	subs	r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	6093      	str	r3, [r2, #8]
 8007508:	da07      	bge.n	800751a <__sfputc_r+0x1c>
 800750a:	6994      	ldr	r4, [r2, #24]
 800750c:	42a3      	cmp	r3, r4
 800750e:	db01      	blt.n	8007514 <__sfputc_r+0x16>
 8007510:	290a      	cmp	r1, #10
 8007512:	d102      	bne.n	800751a <__sfputc_r+0x1c>
 8007514:	bc10      	pop	{r4}
 8007516:	f000 b931 	b.w	800777c <__swbuf_r>
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	1c58      	adds	r0, r3, #1
 800751e:	6010      	str	r0, [r2, #0]
 8007520:	7019      	strb	r1, [r3, #0]
 8007522:	4608      	mov	r0, r1
 8007524:	bc10      	pop	{r4}
 8007526:	4770      	bx	lr

08007528 <__sfputs_r>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	4606      	mov	r6, r0
 800752c:	460f      	mov	r7, r1
 800752e:	4614      	mov	r4, r2
 8007530:	18d5      	adds	r5, r2, r3
 8007532:	42ac      	cmp	r4, r5
 8007534:	d101      	bne.n	800753a <__sfputs_r+0x12>
 8007536:	2000      	movs	r0, #0
 8007538:	e007      	b.n	800754a <__sfputs_r+0x22>
 800753a:	463a      	mov	r2, r7
 800753c:	4630      	mov	r0, r6
 800753e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007542:	f7ff ffdc 	bl	80074fe <__sfputc_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d1f3      	bne.n	8007532 <__sfputs_r+0xa>
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800754c <_vfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	460d      	mov	r5, r1
 8007552:	4614      	mov	r4, r2
 8007554:	4698      	mov	r8, r3
 8007556:	4606      	mov	r6, r0
 8007558:	b09d      	sub	sp, #116	@ 0x74
 800755a:	b118      	cbz	r0, 8007564 <_vfiprintf_r+0x18>
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b90b      	cbnz	r3, 8007564 <_vfiprintf_r+0x18>
 8007560:	f7fc fdfe 	bl	8004160 <__sinit>
 8007564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007566:	07d9      	lsls	r1, r3, #31
 8007568:	d405      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	059a      	lsls	r2, r3, #22
 800756e:	d402      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 8007570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007572:	f7fc ff0e 	bl	8004392 <__retarget_lock_acquire_recursive>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	071b      	lsls	r3, r3, #28
 800757a:	d501      	bpl.n	8007580 <_vfiprintf_r+0x34>
 800757c:	692b      	ldr	r3, [r5, #16]
 800757e:	b99b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x5c>
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f000 f938 	bl	80077f8 <__swsetup_r>
 8007588:	b170      	cbz	r0, 80075a8 <_vfiprintf_r+0x5c>
 800758a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800758c:	07dc      	lsls	r4, r3, #31
 800758e:	d504      	bpl.n	800759a <_vfiprintf_r+0x4e>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b01d      	add	sp, #116	@ 0x74
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	0598      	lsls	r0, r3, #22
 800759e:	d4f7      	bmi.n	8007590 <_vfiprintf_r+0x44>
 80075a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a2:	f7fc fef7 	bl	8004394 <__retarget_lock_release_recursive>
 80075a6:	e7f3      	b.n	8007590 <_vfiprintf_r+0x44>
 80075a8:	2300      	movs	r3, #0
 80075aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ac:	2320      	movs	r3, #32
 80075ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075b2:	2330      	movs	r3, #48	@ 0x30
 80075b4:	f04f 0901 	mov.w	r9, #1
 80075b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007768 <_vfiprintf_r+0x21c>
 80075c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075c4:	4623      	mov	r3, r4
 80075c6:	469a      	mov	sl, r3
 80075c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075cc:	b10a      	cbz	r2, 80075d2 <_vfiprintf_r+0x86>
 80075ce:	2a25      	cmp	r2, #37	@ 0x25
 80075d0:	d1f9      	bne.n	80075c6 <_vfiprintf_r+0x7a>
 80075d2:	ebba 0b04 	subs.w	fp, sl, r4
 80075d6:	d00b      	beq.n	80075f0 <_vfiprintf_r+0xa4>
 80075d8:	465b      	mov	r3, fp
 80075da:	4622      	mov	r2, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	4630      	mov	r0, r6
 80075e0:	f7ff ffa2 	bl	8007528 <__sfputs_r>
 80075e4:	3001      	adds	r0, #1
 80075e6:	f000 80a7 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ec:	445a      	add	r2, fp
 80075ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 809f 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007604:	f10a 0a01 	add.w	sl, sl, #1
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007610:	931a      	str	r3, [sp, #104]	@ 0x68
 8007612:	4654      	mov	r4, sl
 8007614:	2205      	movs	r2, #5
 8007616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761a:	4853      	ldr	r0, [pc, #332]	@ (8007768 <_vfiprintf_r+0x21c>)
 800761c:	f7fc febb 	bl	8004396 <memchr>
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	b9d8      	cbnz	r0, 800765c <_vfiprintf_r+0x110>
 8007624:	06d1      	lsls	r1, r2, #27
 8007626:	bf44      	itt	mi
 8007628:	2320      	movmi	r3, #32
 800762a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800762e:	0713      	lsls	r3, r2, #28
 8007630:	bf44      	itt	mi
 8007632:	232b      	movmi	r3, #43	@ 0x2b
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b2a      	cmp	r3, #42	@ 0x2a
 800763e:	d015      	beq.n	800766c <_vfiprintf_r+0x120>
 8007640:	4654      	mov	r4, sl
 8007642:	2000      	movs	r0, #0
 8007644:	f04f 0c0a 	mov.w	ip, #10
 8007648:	9a07      	ldr	r2, [sp, #28]
 800764a:	4621      	mov	r1, r4
 800764c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007650:	3b30      	subs	r3, #48	@ 0x30
 8007652:	2b09      	cmp	r3, #9
 8007654:	d94b      	bls.n	80076ee <_vfiprintf_r+0x1a2>
 8007656:	b1b0      	cbz	r0, 8007686 <_vfiprintf_r+0x13a>
 8007658:	9207      	str	r2, [sp, #28]
 800765a:	e014      	b.n	8007686 <_vfiprintf_r+0x13a>
 800765c:	eba0 0308 	sub.w	r3, r0, r8
 8007660:	fa09 f303 	lsl.w	r3, r9, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	46a2      	mov	sl, r4
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	e7d2      	b.n	8007612 <_vfiprintf_r+0xc6>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	1d19      	adds	r1, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	9103      	str	r1, [sp, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfbb      	ittet	lt
 8007678:	425b      	neglt	r3, r3
 800767a:	f042 0202 	orrlt.w	r2, r2, #2
 800767e:	9307      	strge	r3, [sp, #28]
 8007680:	9307      	strlt	r3, [sp, #28]
 8007682:	bfb8      	it	lt
 8007684:	9204      	strlt	r2, [sp, #16]
 8007686:	7823      	ldrb	r3, [r4, #0]
 8007688:	2b2e      	cmp	r3, #46	@ 0x2e
 800768a:	d10a      	bne.n	80076a2 <_vfiprintf_r+0x156>
 800768c:	7863      	ldrb	r3, [r4, #1]
 800768e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007690:	d132      	bne.n	80076f8 <_vfiprintf_r+0x1ac>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3402      	adds	r4, #2
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	9203      	str	r2, [sp, #12]
 800769c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076a0:	9305      	str	r3, [sp, #20]
 80076a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800776c <_vfiprintf_r+0x220>
 80076a6:	2203      	movs	r2, #3
 80076a8:	4650      	mov	r0, sl
 80076aa:	7821      	ldrb	r1, [r4, #0]
 80076ac:	f7fc fe73 	bl	8004396 <memchr>
 80076b0:	b138      	cbz	r0, 80076c2 <_vfiprintf_r+0x176>
 80076b2:	2240      	movs	r2, #64	@ 0x40
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	eba0 000a 	sub.w	r0, r0, sl
 80076ba:	4082      	lsls	r2, r0
 80076bc:	4313      	orrs	r3, r2
 80076be:	3401      	adds	r4, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	2206      	movs	r2, #6
 80076c8:	4829      	ldr	r0, [pc, #164]	@ (8007770 <_vfiprintf_r+0x224>)
 80076ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ce:	f7fc fe62 	bl	8004396 <memchr>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d03f      	beq.n	8007756 <_vfiprintf_r+0x20a>
 80076d6:	4b27      	ldr	r3, [pc, #156]	@ (8007774 <_vfiprintf_r+0x228>)
 80076d8:	bb1b      	cbnz	r3, 8007722 <_vfiprintf_r+0x1d6>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	3307      	adds	r3, #7
 80076de:	f023 0307 	bic.w	r3, r3, #7
 80076e2:	3308      	adds	r3, #8
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e8:	443b      	add	r3, r7
 80076ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ec:	e76a      	b.n	80075c4 <_vfiprintf_r+0x78>
 80076ee:	460c      	mov	r4, r1
 80076f0:	2001      	movs	r0, #1
 80076f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f6:	e7a8      	b.n	800764a <_vfiprintf_r+0xfe>
 80076f8:	2300      	movs	r3, #0
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4619      	mov	r1, r3
 8007700:	3401      	adds	r4, #1
 8007702:	9305      	str	r3, [sp, #20]
 8007704:	4620      	mov	r0, r4
 8007706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770a:	3a30      	subs	r2, #48	@ 0x30
 800770c:	2a09      	cmp	r2, #9
 800770e:	d903      	bls.n	8007718 <_vfiprintf_r+0x1cc>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0c6      	beq.n	80076a2 <_vfiprintf_r+0x156>
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	e7c4      	b.n	80076a2 <_vfiprintf_r+0x156>
 8007718:	4604      	mov	r4, r0
 800771a:	2301      	movs	r3, #1
 800771c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007720:	e7f0      	b.n	8007704 <_vfiprintf_r+0x1b8>
 8007722:	ab03      	add	r3, sp, #12
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	462a      	mov	r2, r5
 8007728:	4630      	mov	r0, r6
 800772a:	4b13      	ldr	r3, [pc, #76]	@ (8007778 <_vfiprintf_r+0x22c>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	f7fb fec5 	bl	80034bc <_printf_float>
 8007732:	4607      	mov	r7, r0
 8007734:	1c78      	adds	r0, r7, #1
 8007736:	d1d6      	bne.n	80076e6 <_vfiprintf_r+0x19a>
 8007738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800773a:	07d9      	lsls	r1, r3, #31
 800773c:	d405      	bmi.n	800774a <_vfiprintf_r+0x1fe>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	059a      	lsls	r2, r3, #22
 8007742:	d402      	bmi.n	800774a <_vfiprintf_r+0x1fe>
 8007744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007746:	f7fc fe25 	bl	8004394 <__retarget_lock_release_recursive>
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	065b      	lsls	r3, r3, #25
 800774e:	f53f af1f 	bmi.w	8007590 <_vfiprintf_r+0x44>
 8007752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007754:	e71e      	b.n	8007594 <_vfiprintf_r+0x48>
 8007756:	ab03      	add	r3, sp, #12
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462a      	mov	r2, r5
 800775c:	4630      	mov	r0, r6
 800775e:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <_vfiprintf_r+0x22c>)
 8007760:	a904      	add	r1, sp, #16
 8007762:	f7fc f949 	bl	80039f8 <_printf_i>
 8007766:	e7e4      	b.n	8007732 <_vfiprintf_r+0x1e6>
 8007768:	08007b93 	.word	0x08007b93
 800776c:	08007b99 	.word	0x08007b99
 8007770:	08007b9d 	.word	0x08007b9d
 8007774:	080034bd 	.word	0x080034bd
 8007778:	08007529 	.word	0x08007529

0800777c <__swbuf_r>:
 800777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800777e:	460e      	mov	r6, r1
 8007780:	4614      	mov	r4, r2
 8007782:	4605      	mov	r5, r0
 8007784:	b118      	cbz	r0, 800778e <__swbuf_r+0x12>
 8007786:	6a03      	ldr	r3, [r0, #32]
 8007788:	b90b      	cbnz	r3, 800778e <__swbuf_r+0x12>
 800778a:	f7fc fce9 	bl	8004160 <__sinit>
 800778e:	69a3      	ldr	r3, [r4, #24]
 8007790:	60a3      	str	r3, [r4, #8]
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	071a      	lsls	r2, r3, #28
 8007796:	d501      	bpl.n	800779c <__swbuf_r+0x20>
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	b943      	cbnz	r3, 80077ae <__swbuf_r+0x32>
 800779c:	4621      	mov	r1, r4
 800779e:	4628      	mov	r0, r5
 80077a0:	f000 f82a 	bl	80077f8 <__swsetup_r>
 80077a4:	b118      	cbz	r0, 80077ae <__swbuf_r+0x32>
 80077a6:	f04f 37ff 	mov.w	r7, #4294967295
 80077aa:	4638      	mov	r0, r7
 80077ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	b2f6      	uxtb	r6, r6
 80077b4:	1a98      	subs	r0, r3, r2
 80077b6:	6963      	ldr	r3, [r4, #20]
 80077b8:	4637      	mov	r7, r6
 80077ba:	4283      	cmp	r3, r0
 80077bc:	dc05      	bgt.n	80077ca <__swbuf_r+0x4e>
 80077be:	4621      	mov	r1, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	f7ff fa4b 	bl	8006c5c <_fflush_r>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d1ed      	bne.n	80077a6 <__swbuf_r+0x2a>
 80077ca:	68a3      	ldr	r3, [r4, #8]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	60a3      	str	r3, [r4, #8]
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	6022      	str	r2, [r4, #0]
 80077d6:	701e      	strb	r6, [r3, #0]
 80077d8:	6962      	ldr	r2, [r4, #20]
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	429a      	cmp	r2, r3
 80077de:	d004      	beq.n	80077ea <__swbuf_r+0x6e>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d5e1      	bpl.n	80077aa <__swbuf_r+0x2e>
 80077e6:	2e0a      	cmp	r6, #10
 80077e8:	d1df      	bne.n	80077aa <__swbuf_r+0x2e>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff fa35 	bl	8006c5c <_fflush_r>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d0d9      	beq.n	80077aa <__swbuf_r+0x2e>
 80077f6:	e7d6      	b.n	80077a6 <__swbuf_r+0x2a>

080077f8 <__swsetup_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4b29      	ldr	r3, [pc, #164]	@ (80078a0 <__swsetup_r+0xa8>)
 80077fc:	4605      	mov	r5, r0
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	460c      	mov	r4, r1
 8007802:	b118      	cbz	r0, 800780c <__swsetup_r+0x14>
 8007804:	6a03      	ldr	r3, [r0, #32]
 8007806:	b90b      	cbnz	r3, 800780c <__swsetup_r+0x14>
 8007808:	f7fc fcaa 	bl	8004160 <__sinit>
 800780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007810:	0719      	lsls	r1, r3, #28
 8007812:	d422      	bmi.n	800785a <__swsetup_r+0x62>
 8007814:	06da      	lsls	r2, r3, #27
 8007816:	d407      	bmi.n	8007828 <__swsetup_r+0x30>
 8007818:	2209      	movs	r2, #9
 800781a:	602a      	str	r2, [r5, #0]
 800781c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	e033      	b.n	8007890 <__swsetup_r+0x98>
 8007828:	0758      	lsls	r0, r3, #29
 800782a:	d512      	bpl.n	8007852 <__swsetup_r+0x5a>
 800782c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800782e:	b141      	cbz	r1, 8007842 <__swsetup_r+0x4a>
 8007830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <__swsetup_r+0x46>
 8007838:	4628      	mov	r0, r5
 800783a:	f7fd fc1d 	bl	8005078 <_free_r>
 800783e:	2300      	movs	r3, #0
 8007840:	6363      	str	r3, [r4, #52]	@ 0x34
 8007842:	89a3      	ldrh	r3, [r4, #12]
 8007844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007848:	81a3      	strh	r3, [r4, #12]
 800784a:	2300      	movs	r3, #0
 800784c:	6063      	str	r3, [r4, #4]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	f043 0308 	orr.w	r3, r3, #8
 8007858:	81a3      	strh	r3, [r4, #12]
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	b94b      	cbnz	r3, 8007872 <__swsetup_r+0x7a>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007868:	d003      	beq.n	8007872 <__swsetup_r+0x7a>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f882 	bl	8007976 <__smakebuf_r>
 8007872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007876:	f013 0201 	ands.w	r2, r3, #1
 800787a:	d00a      	beq.n	8007892 <__swsetup_r+0x9a>
 800787c:	2200      	movs	r2, #0
 800787e:	60a2      	str	r2, [r4, #8]
 8007880:	6962      	ldr	r2, [r4, #20]
 8007882:	4252      	negs	r2, r2
 8007884:	61a2      	str	r2, [r4, #24]
 8007886:	6922      	ldr	r2, [r4, #16]
 8007888:	b942      	cbnz	r2, 800789c <__swsetup_r+0xa4>
 800788a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800788e:	d1c5      	bne.n	800781c <__swsetup_r+0x24>
 8007890:	bd38      	pop	{r3, r4, r5, pc}
 8007892:	0799      	lsls	r1, r3, #30
 8007894:	bf58      	it	pl
 8007896:	6962      	ldrpl	r2, [r4, #20]
 8007898:	60a2      	str	r2, [r4, #8]
 800789a:	e7f4      	b.n	8007886 <__swsetup_r+0x8e>
 800789c:	2000      	movs	r0, #0
 800789e:	e7f7      	b.n	8007890 <__swsetup_r+0x98>
 80078a0:	20000040 	.word	0x20000040

080078a4 <_raise_r>:
 80078a4:	291f      	cmp	r1, #31
 80078a6:	b538      	push	{r3, r4, r5, lr}
 80078a8:	4605      	mov	r5, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	d904      	bls.n	80078b8 <_raise_r+0x14>
 80078ae:	2316      	movs	r3, #22
 80078b0:	6003      	str	r3, [r0, #0]
 80078b2:	f04f 30ff 	mov.w	r0, #4294967295
 80078b6:	bd38      	pop	{r3, r4, r5, pc}
 80078b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80078ba:	b112      	cbz	r2, 80078c2 <_raise_r+0x1e>
 80078bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078c0:	b94b      	cbnz	r3, 80078d6 <_raise_r+0x32>
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f830 	bl	8007928 <_getpid_r>
 80078c8:	4622      	mov	r2, r4
 80078ca:	4601      	mov	r1, r0
 80078cc:	4628      	mov	r0, r5
 80078ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d2:	f000 b817 	b.w	8007904 <_kill_r>
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d00a      	beq.n	80078f0 <_raise_r+0x4c>
 80078da:	1c59      	adds	r1, r3, #1
 80078dc:	d103      	bne.n	80078e6 <_raise_r+0x42>
 80078de:	2316      	movs	r3, #22
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	2001      	movs	r0, #1
 80078e4:	e7e7      	b.n	80078b6 <_raise_r+0x12>
 80078e6:	2100      	movs	r1, #0
 80078e8:	4620      	mov	r0, r4
 80078ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078ee:	4798      	blx	r3
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7e0      	b.n	80078b6 <_raise_r+0x12>

080078f4 <raise>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	@ (8007900 <raise+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f7ff bfd3 	b.w	80078a4 <_raise_r>
 80078fe:	bf00      	nop
 8007900:	20000040 	.word	0x20000040

08007904 <_kill_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	2300      	movs	r3, #0
 8007908:	4d06      	ldr	r5, [pc, #24]	@ (8007924 <_kill_r+0x20>)
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	4611      	mov	r1, r2
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	f7f9 ff89 	bl	8001828 <_kill>
 8007916:	1c43      	adds	r3, r0, #1
 8007918:	d102      	bne.n	8007920 <_kill_r+0x1c>
 800791a:	682b      	ldr	r3, [r5, #0]
 800791c:	b103      	cbz	r3, 8007920 <_kill_r+0x1c>
 800791e:	6023      	str	r3, [r4, #0]
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	200003b8 	.word	0x200003b8

08007928 <_getpid_r>:
 8007928:	f7f9 bf77 	b.w	800181a <_getpid>

0800792c <__swhatbuf_r>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	4615      	mov	r5, r2
 8007936:	2900      	cmp	r1, #0
 8007938:	461e      	mov	r6, r3
 800793a:	b096      	sub	sp, #88	@ 0x58
 800793c:	da0c      	bge.n	8007958 <__swhatbuf_r+0x2c>
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	2100      	movs	r1, #0
 8007942:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007946:	bf14      	ite	ne
 8007948:	2340      	movne	r3, #64	@ 0x40
 800794a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800794e:	2000      	movs	r0, #0
 8007950:	6031      	str	r1, [r6, #0]
 8007952:	602b      	str	r3, [r5, #0]
 8007954:	b016      	add	sp, #88	@ 0x58
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	466a      	mov	r2, sp
 800795a:	f000 f849 	bl	80079f0 <_fstat_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	dbed      	blt.n	800793e <__swhatbuf_r+0x12>
 8007962:	9901      	ldr	r1, [sp, #4]
 8007964:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007968:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800796c:	4259      	negs	r1, r3
 800796e:	4159      	adcs	r1, r3
 8007970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007974:	e7eb      	b.n	800794e <__swhatbuf_r+0x22>

08007976 <__smakebuf_r>:
 8007976:	898b      	ldrh	r3, [r1, #12]
 8007978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800797a:	079d      	lsls	r5, r3, #30
 800797c:	4606      	mov	r6, r0
 800797e:	460c      	mov	r4, r1
 8007980:	d507      	bpl.n	8007992 <__smakebuf_r+0x1c>
 8007982:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	2301      	movs	r3, #1
 800798c:	6163      	str	r3, [r4, #20]
 800798e:	b003      	add	sp, #12
 8007990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007992:	466a      	mov	r2, sp
 8007994:	ab01      	add	r3, sp, #4
 8007996:	f7ff ffc9 	bl	800792c <__swhatbuf_r>
 800799a:	9f00      	ldr	r7, [sp, #0]
 800799c:	4605      	mov	r5, r0
 800799e:	4639      	mov	r1, r7
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7fd fbdb 	bl	800515c <_malloc_r>
 80079a6:	b948      	cbnz	r0, 80079bc <__smakebuf_r+0x46>
 80079a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ac:	059a      	lsls	r2, r3, #22
 80079ae:	d4ee      	bmi.n	800798e <__smakebuf_r+0x18>
 80079b0:	f023 0303 	bic.w	r3, r3, #3
 80079b4:	f043 0302 	orr.w	r3, r3, #2
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	e7e2      	b.n	8007982 <__smakebuf_r+0xc>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	6020      	str	r0, [r4, #0]
 80079cc:	b15b      	cbz	r3, 80079e6 <__smakebuf_r+0x70>
 80079ce:	4630      	mov	r0, r6
 80079d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079d4:	f000 f81e 	bl	8007a14 <_isatty_r>
 80079d8:	b128      	cbz	r0, 80079e6 <__smakebuf_r+0x70>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f023 0303 	bic.w	r3, r3, #3
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	431d      	orrs	r5, r3
 80079ea:	81a5      	strh	r5, [r4, #12]
 80079ec:	e7cf      	b.n	800798e <__smakebuf_r+0x18>
	...

080079f0 <_fstat_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	2300      	movs	r3, #0
 80079f4:	4d06      	ldr	r5, [pc, #24]	@ (8007a10 <_fstat_r+0x20>)
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f7f9 ff72 	bl	80018e6 <_fstat>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d102      	bne.n	8007a0c <_fstat_r+0x1c>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b103      	cbz	r3, 8007a0c <_fstat_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	200003b8 	.word	0x200003b8

08007a14 <_isatty_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	2300      	movs	r3, #0
 8007a18:	4d05      	ldr	r5, [pc, #20]	@ (8007a30 <_isatty_r+0x1c>)
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7f9 ff70 	bl	8001904 <_isatty>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_isatty_r+0x1a>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_isatty_r+0x1a>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200003b8 	.word	0x200003b8

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
